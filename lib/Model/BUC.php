<?php
/**
 * BUC
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * iVantage API
 *
 * This is the iDirect iVantage API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * BUC Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class BUC implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'BUC';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'parent_id' => 'int',
        'manufacturer' => 'string',
        'i_direct_part_number' => 'string',
        'tx_ref_oscillator' => 'string',
        'spectral_inversion' => 'string',
        'start_freq' => 'double',
        'stop_freq' => 'double',
        'gain' => 'double',
        'power' => 'double',
        'translation_freq' => 'double',
        'tx_dc_enable' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'parent_id' => 'int32',
        'manufacturer' => null,
        'i_direct_part_number' => null,
        'tx_ref_oscillator' => null,
        'spectral_inversion' => null,
        'start_freq' => 'double',
        'stop_freq' => 'double',
        'gain' => 'double',
        'power' => 'double',
        'translation_freq' => 'double',
        'tx_dc_enable' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'ID',
        'name' => 'Name',
        'parent_id' => 'ParentID',
        'manufacturer' => 'Manufacturer',
        'i_direct_part_number' => 'iDirectPartNumber',
        'tx_ref_oscillator' => 'TxRefOscillator',
        'spectral_inversion' => 'SpectralInversion',
        'start_freq' => 'StartFreq',
        'stop_freq' => 'StopFreq',
        'gain' => 'Gain',
        'power' => 'Power',
        'translation_freq' => 'TranslationFreq',
        'tx_dc_enable' => 'TxDcEnable'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'parent_id' => 'setParentId',
        'manufacturer' => 'setManufacturer',
        'i_direct_part_number' => 'setIDirectPartNumber',
        'tx_ref_oscillator' => 'setTxRefOscillator',
        'spectral_inversion' => 'setSpectralInversion',
        'start_freq' => 'setStartFreq',
        'stop_freq' => 'setStopFreq',
        'gain' => 'setGain',
        'power' => 'setPower',
        'translation_freq' => 'setTranslationFreq',
        'tx_dc_enable' => 'setTxDcEnable'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'parent_id' => 'getParentId',
        'manufacturer' => 'getManufacturer',
        'i_direct_part_number' => 'getIDirectPartNumber',
        'tx_ref_oscillator' => 'getTxRefOscillator',
        'spectral_inversion' => 'getSpectralInversion',
        'start_freq' => 'getStartFreq',
        'stop_freq' => 'getStopFreq',
        'gain' => 'getGain',
        'power' => 'getPower',
        'translation_freq' => 'getTranslationFreq',
        'tx_dc_enable' => 'getTxDcEnable'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['parent_id'] = isset($data['parent_id']) ? $data['parent_id'] : null;
        $this->container['manufacturer'] = isset($data['manufacturer']) ? $data['manufacturer'] : null;
        $this->container['i_direct_part_number'] = isset($data['i_direct_part_number']) ? $data['i_direct_part_number'] : null;
        $this->container['tx_ref_oscillator'] = isset($data['tx_ref_oscillator']) ? $data['tx_ref_oscillator'] : null;
        $this->container['spectral_inversion'] = isset($data['spectral_inversion']) ? $data['spectral_inversion'] : null;
        $this->container['start_freq'] = isset($data['start_freq']) ? $data['start_freq'] : null;
        $this->container['stop_freq'] = isset($data['stop_freq']) ? $data['stop_freq'] : null;
        $this->container['gain'] = isset($data['gain']) ? $data['gain'] : null;
        $this->container['power'] = isset($data['power']) ? $data['power'] : null;
        $this->container['translation_freq'] = isset($data['translation_freq']) ? $data['translation_freq'] : null;
        $this->container['tx_dc_enable'] = isset($data['tx_dc_enable']) ? $data['tx_dc_enable'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Internal ID of the BUC
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Name of the BUC
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets parent_id
     * @return int
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     * @param int $parent_id
     * @return $this
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets manufacturer
     * @return string
     */
    public function getManufacturer()
    {
        return $this->container['manufacturer'];
    }

    /**
     * Sets manufacturer
     * @param string $manufacturer
     * @return $this
     */
    public function setManufacturer($manufacturer)
    {
        $this->container['manufacturer'] = $manufacturer;

        return $this;
    }

    /**
     * Gets i_direct_part_number
     * @return string
     */
    public function getIDirectPartNumber()
    {
        return $this->container['i_direct_part_number'];
    }

    /**
     * Sets i_direct_part_number
     * @param string $i_direct_part_number
     * @return $this
     */
    public function setIDirectPartNumber($i_direct_part_number)
    {
        $this->container['i_direct_part_number'] = $i_direct_part_number;

        return $this;
    }

    /**
     * Gets tx_ref_oscillator
     * @return string
     */
    public function getTxRefOscillator()
    {
        return $this->container['tx_ref_oscillator'];
    }

    /**
     * Sets tx_ref_oscillator
     * @param string $tx_ref_oscillator
     * @return $this
     */
    public function setTxRefOscillator($tx_ref_oscillator)
    {
        $this->container['tx_ref_oscillator'] = $tx_ref_oscillator;

        return $this;
    }

    /**
     * Gets spectral_inversion
     * @return string
     */
    public function getSpectralInversion()
    {
        return $this->container['spectral_inversion'];
    }

    /**
     * Sets spectral_inversion
     * @param string $spectral_inversion
     * @return $this
     */
    public function setSpectralInversion($spectral_inversion)
    {
        $this->container['spectral_inversion'] = $spectral_inversion;

        return $this;
    }

    /**
     * Gets start_freq
     * @return double
     */
    public function getStartFreq()
    {
        return $this->container['start_freq'];
    }

    /**
     * Sets start_freq
     * @param double $start_freq
     * @return $this
     */
    public function setStartFreq($start_freq)
    {
        $this->container['start_freq'] = $start_freq;

        return $this;
    }

    /**
     * Gets stop_freq
     * @return double
     */
    public function getStopFreq()
    {
        return $this->container['stop_freq'];
    }

    /**
     * Sets stop_freq
     * @param double $stop_freq
     * @return $this
     */
    public function setStopFreq($stop_freq)
    {
        $this->container['stop_freq'] = $stop_freq;

        return $this;
    }

    /**
     * Gets gain
     * @return double
     */
    public function getGain()
    {
        return $this->container['gain'];
    }

    /**
     * Sets gain
     * @param double $gain
     * @return $this
     */
    public function setGain($gain)
    {
        $this->container['gain'] = $gain;

        return $this;
    }

    /**
     * Gets power
     * @return double
     */
    public function getPower()
    {
        return $this->container['power'];
    }

    /**
     * Sets power
     * @param double $power
     * @return $this
     */
    public function setPower($power)
    {
        $this->container['power'] = $power;

        return $this;
    }

    /**
     * Gets translation_freq
     * @return double
     */
    public function getTranslationFreq()
    {
        return $this->container['translation_freq'];
    }

    /**
     * Sets translation_freq
     * @param double $translation_freq
     * @return $this
     */
    public function setTranslationFreq($translation_freq)
    {
        $this->container['translation_freq'] = $translation_freq;

        return $this;
    }

    /**
     * Gets tx_dc_enable
     * @return bool
     */
    public function getTxDcEnable()
    {
        return $this->container['tx_dc_enable'];
    }

    /**
     * Sets tx_dc_enable
     * @param bool $tx_dc_enable
     * @return $this
     */
    public function setTxDcEnable($tx_dc_enable)
    {
        $this->container['tx_dc_enable'] = $tx_dc_enable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


