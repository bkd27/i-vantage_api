<?php
/**
 * Carrier
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * iVantage API
 *
 * This is the iDirect iVantage API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Carrier Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Carrier implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Carrier';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'parent_id' => 'int',
        'spacecraft_id' => 'int',
        'transponder_id' => 'int',
        'bandwidth_id' => 'int',
        'type' => 'string',
        'inbound_mode' => 'string',
        'spreading_factor' => 'string',
        'fec_rate' => 'string',
        'modulation_type' => 'string',
        'min_modcod' => 'string',
        'max_modcod' => 'string',
        'uplink_freq' => 'double',
        'downlink_freq' => 'double',
        'power' => 'double',
        'symbol_rate' => 'double',
        'carrier_spacing' => 'double',
        'superburst' => 'bool',
        'spread_acq_enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'parent_id' => 'int32',
        'spacecraft_id' => 'int32',
        'transponder_id' => 'int32',
        'bandwidth_id' => 'int32',
        'type' => null,
        'inbound_mode' => null,
        'spreading_factor' => null,
        'fec_rate' => null,
        'modulation_type' => null,
        'min_modcod' => null,
        'max_modcod' => null,
        'uplink_freq' => 'double',
        'downlink_freq' => 'double',
        'power' => 'double',
        'symbol_rate' => 'double',
        'carrier_spacing' => 'double',
        'superburst' => null,
        'spread_acq_enabled' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'ID',
        'name' => 'Name',
        'parent_id' => 'ParentID',
        'spacecraft_id' => 'SpacecraftID',
        'transponder_id' => 'TransponderID',
        'bandwidth_id' => 'BandwidthID',
        'type' => 'Type',
        'inbound_mode' => 'InboundMode',
        'spreading_factor' => 'SpreadingFactor',
        'fec_rate' => 'FecRate',
        'modulation_type' => 'ModulationType',
        'min_modcod' => 'MinModcod',
        'max_modcod' => 'MaxModcod',
        'uplink_freq' => 'UplinkFreq',
        'downlink_freq' => 'DownlinkFreq',
        'power' => 'Power',
        'symbol_rate' => 'SymbolRate',
        'carrier_spacing' => 'CarrierSpacing',
        'superburst' => 'Superburst',
        'spread_acq_enabled' => 'SpreadAcqEnabled'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'parent_id' => 'setParentId',
        'spacecraft_id' => 'setSpacecraftId',
        'transponder_id' => 'setTransponderId',
        'bandwidth_id' => 'setBandwidthId',
        'type' => 'setType',
        'inbound_mode' => 'setInboundMode',
        'spreading_factor' => 'setSpreadingFactor',
        'fec_rate' => 'setFecRate',
        'modulation_type' => 'setModulationType',
        'min_modcod' => 'setMinModcod',
        'max_modcod' => 'setMaxModcod',
        'uplink_freq' => 'setUplinkFreq',
        'downlink_freq' => 'setDownlinkFreq',
        'power' => 'setPower',
        'symbol_rate' => 'setSymbolRate',
        'carrier_spacing' => 'setCarrierSpacing',
        'superburst' => 'setSuperburst',
        'spread_acq_enabled' => 'setSpreadAcqEnabled'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'parent_id' => 'getParentId',
        'spacecraft_id' => 'getSpacecraftId',
        'transponder_id' => 'getTransponderId',
        'bandwidth_id' => 'getBandwidthId',
        'type' => 'getType',
        'inbound_mode' => 'getInboundMode',
        'spreading_factor' => 'getSpreadingFactor',
        'fec_rate' => 'getFecRate',
        'modulation_type' => 'getModulationType',
        'min_modcod' => 'getMinModcod',
        'max_modcod' => 'getMaxModcod',
        'uplink_freq' => 'getUplinkFreq',
        'downlink_freq' => 'getDownlinkFreq',
        'power' => 'getPower',
        'symbol_rate' => 'getSymbolRate',
        'carrier_spacing' => 'getCarrierSpacing',
        'superburst' => 'getSuperburst',
        'spread_acq_enabled' => 'getSpreadAcqEnabled'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['parent_id'] = isset($data['parent_id']) ? $data['parent_id'] : null;
        $this->container['spacecraft_id'] = isset($data['spacecraft_id']) ? $data['spacecraft_id'] : null;
        $this->container['transponder_id'] = isset($data['transponder_id']) ? $data['transponder_id'] : null;
        $this->container['bandwidth_id'] = isset($data['bandwidth_id']) ? $data['bandwidth_id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['inbound_mode'] = isset($data['inbound_mode']) ? $data['inbound_mode'] : null;
        $this->container['spreading_factor'] = isset($data['spreading_factor']) ? $data['spreading_factor'] : null;
        $this->container['fec_rate'] = isset($data['fec_rate']) ? $data['fec_rate'] : null;
        $this->container['modulation_type'] = isset($data['modulation_type']) ? $data['modulation_type'] : null;
        $this->container['min_modcod'] = isset($data['min_modcod']) ? $data['min_modcod'] : null;
        $this->container['max_modcod'] = isset($data['max_modcod']) ? $data['max_modcod'] : null;
        $this->container['uplink_freq'] = isset($data['uplink_freq']) ? $data['uplink_freq'] : null;
        $this->container['downlink_freq'] = isset($data['downlink_freq']) ? $data['downlink_freq'] : null;
        $this->container['power'] = isset($data['power']) ? $data['power'] : null;
        $this->container['symbol_rate'] = isset($data['symbol_rate']) ? $data['symbol_rate'] : null;
        $this->container['carrier_spacing'] = isset($data['carrier_spacing']) ? $data['carrier_spacing'] : null;
        $this->container['superburst'] = isset($data['superburst']) ? $data['superburst'] : null;
        $this->container['spread_acq_enabled'] = isset($data['spread_acq_enabled']) ? $data['spread_acq_enabled'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Internal ID of the Carrier
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Name of the Carrier
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets parent_id
     * @return int
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     * @param int $parent_id
     * @return $this
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets spacecraft_id
     * @return int
     */
    public function getSpacecraftId()
    {
        return $this->container['spacecraft_id'];
    }

    /**
     * Sets spacecraft_id
     * @param int $spacecraft_id
     * @return $this
     */
    public function setSpacecraftId($spacecraft_id)
    {
        $this->container['spacecraft_id'] = $spacecraft_id;

        return $this;
    }

    /**
     * Gets transponder_id
     * @return int
     */
    public function getTransponderId()
    {
        return $this->container['transponder_id'];
    }

    /**
     * Sets transponder_id
     * @param int $transponder_id
     * @return $this
     */
    public function setTransponderId($transponder_id)
    {
        $this->container['transponder_id'] = $transponder_id;

        return $this;
    }

    /**
     * Gets bandwidth_id
     * @return int
     */
    public function getBandwidthId()
    {
        return $this->container['bandwidth_id'];
    }

    /**
     * Sets bandwidth_id
     * @param int $bandwidth_id
     * @return $this
     */
    public function setBandwidthId($bandwidth_id)
    {
        $this->container['bandwidth_id'] = $bandwidth_id;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets inbound_mode
     * @return string
     */
    public function getInboundMode()
    {
        return $this->container['inbound_mode'];
    }

    /**
     * Sets inbound_mode
     * @param string $inbound_mode
     * @return $this
     */
    public function setInboundMode($inbound_mode)
    {
        $this->container['inbound_mode'] = $inbound_mode;

        return $this;
    }

    /**
     * Gets spreading_factor
     * @return string
     */
    public function getSpreadingFactor()
    {
        return $this->container['spreading_factor'];
    }

    /**
     * Sets spreading_factor
     * @param string $spreading_factor
     * @return $this
     */
    public function setSpreadingFactor($spreading_factor)
    {
        $this->container['spreading_factor'] = $spreading_factor;

        return $this;
    }

    /**
     * Gets fec_rate
     * @return string
     */
    public function getFecRate()
    {
        return $this->container['fec_rate'];
    }

    /**
     * Sets fec_rate
     * @param string $fec_rate
     * @return $this
     */
    public function setFecRate($fec_rate)
    {
        $this->container['fec_rate'] = $fec_rate;

        return $this;
    }

    /**
     * Gets modulation_type
     * @return string
     */
    public function getModulationType()
    {
        return $this->container['modulation_type'];
    }

    /**
     * Sets modulation_type
     * @param string $modulation_type
     * @return $this
     */
    public function setModulationType($modulation_type)
    {
        $this->container['modulation_type'] = $modulation_type;

        return $this;
    }

    /**
     * Gets min_modcod
     * @return string
     */
    public function getMinModcod()
    {
        return $this->container['min_modcod'];
    }

    /**
     * Sets min_modcod
     * @param string $min_modcod
     * @return $this
     */
    public function setMinModcod($min_modcod)
    {
        $this->container['min_modcod'] = $min_modcod;

        return $this;
    }

    /**
     * Gets max_modcod
     * @return string
     */
    public function getMaxModcod()
    {
        return $this->container['max_modcod'];
    }

    /**
     * Sets max_modcod
     * @param string $max_modcod
     * @return $this
     */
    public function setMaxModcod($max_modcod)
    {
        $this->container['max_modcod'] = $max_modcod;

        return $this;
    }

    /**
     * Gets uplink_freq
     * @return double
     */
    public function getUplinkFreq()
    {
        return $this->container['uplink_freq'];
    }

    /**
     * Sets uplink_freq
     * @param double $uplink_freq
     * @return $this
     */
    public function setUplinkFreq($uplink_freq)
    {
        $this->container['uplink_freq'] = $uplink_freq;

        return $this;
    }

    /**
     * Gets downlink_freq
     * @return double
     */
    public function getDownlinkFreq()
    {
        return $this->container['downlink_freq'];
    }

    /**
     * Sets downlink_freq
     * @param double $downlink_freq
     * @return $this
     */
    public function setDownlinkFreq($downlink_freq)
    {
        $this->container['downlink_freq'] = $downlink_freq;

        return $this;
    }

    /**
     * Gets power
     * @return double
     */
    public function getPower()
    {
        return $this->container['power'];
    }

    /**
     * Sets power
     * @param double $power
     * @return $this
     */
    public function setPower($power)
    {
        $this->container['power'] = $power;

        return $this;
    }

    /**
     * Gets symbol_rate
     * @return double
     */
    public function getSymbolRate()
    {
        return $this->container['symbol_rate'];
    }

    /**
     * Sets symbol_rate
     * @param double $symbol_rate
     * @return $this
     */
    public function setSymbolRate($symbol_rate)
    {
        $this->container['symbol_rate'] = $symbol_rate;

        return $this;
    }

    /**
     * Gets carrier_spacing
     * @return double
     */
    public function getCarrierSpacing()
    {
        return $this->container['carrier_spacing'];
    }

    /**
     * Sets carrier_spacing
     * @param double $carrier_spacing
     * @return $this
     */
    public function setCarrierSpacing($carrier_spacing)
    {
        $this->container['carrier_spacing'] = $carrier_spacing;

        return $this;
    }

    /**
     * Gets superburst
     * @return bool
     */
    public function getSuperburst()
    {
        return $this->container['superburst'];
    }

    /**
     * Sets superburst
     * @param bool $superburst
     * @return $this
     */
    public function setSuperburst($superburst)
    {
        $this->container['superburst'] = $superburst;

        return $this;
    }

    /**
     * Gets spread_acq_enabled
     * @return bool
     */
    public function getSpreadAcqEnabled()
    {
        return $this->container['spread_acq_enabled'];
    }

    /**
     * Sets spread_acq_enabled
     * @param bool $spread_acq_enabled
     * @return $this
     */
    public function setSpreadAcqEnabled($spread_acq_enabled)
    {
        $this->container['spread_acq_enabled'] = $spread_acq_enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


