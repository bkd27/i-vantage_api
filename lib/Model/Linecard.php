<?php
/**
 * Linecard
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * iVantage API
 *
 * This is the iDirect iVantage API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Linecard Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Linecard implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Linecard';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'parent_id' => 'int',
        'network_id' => 'int',
        'hub_rftid' => 'int',
        'chassis_id' => 'int',
        'tx_carrier_id' => 'int',
        'alt_tx_carrier_id' => 'int',
        'sn' => 'int',
        'did' => 'int',
        'model_type' => 'string',
        'linecard_type' => 'string',
        'receive_mode' => 'string',
        'user_password' => 'string',
        'admin_password' => 'string',
        'mgmt_ip_address' => 'string',
        'mgmt_subnet_mask' => 'string',
        'mgmt_gateway' => 'string',
        'gig0_ip_address' => 'string',
        'gig0_subnet_mask' => 'string',
        'gig0_gateway' => 'string',
        'gig0_speed' => 'string',
        'active' => 'bool',
        'rx_center_freq' => 'double',
        'rx_carrier_ids' => '\Swagger\Client\Model\RXCarrier[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'parent_id' => 'int32',
        'network_id' => 'int32',
        'hub_rftid' => 'int32',
        'chassis_id' => 'int32',
        'tx_carrier_id' => 'int32',
        'alt_tx_carrier_id' => 'int32',
        'sn' => 'int64',
        'did' => 'int64',
        'model_type' => null,
        'linecard_type' => null,
        'receive_mode' => null,
        'user_password' => null,
        'admin_password' => null,
        'mgmt_ip_address' => null,
        'mgmt_subnet_mask' => null,
        'mgmt_gateway' => null,
        'gig0_ip_address' => null,
        'gig0_subnet_mask' => null,
        'gig0_gateway' => null,
        'gig0_speed' => null,
        'active' => null,
        'rx_center_freq' => 'double',
        'rx_carrier_ids' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'ID',
        'name' => 'Name',
        'parent_id' => 'ParentID',
        'network_id' => 'NetworkID',
        'hub_rftid' => 'HubRFTID',
        'chassis_id' => 'ChassisID',
        'tx_carrier_id' => 'TxCarrierID',
        'alt_tx_carrier_id' => 'AltTxCarrierID',
        'sn' => 'SN',
        'did' => 'DID',
        'model_type' => 'ModelType',
        'linecard_type' => 'LinecardType',
        'receive_mode' => 'ReceiveMode',
        'user_password' => 'UserPassword',
        'admin_password' => 'AdminPassword',
        'mgmt_ip_address' => 'MgmtIPAddress',
        'mgmt_subnet_mask' => 'MgmtSubnetMask',
        'mgmt_gateway' => 'MgmtGateway',
        'gig0_ip_address' => 'GIG0IPAddress',
        'gig0_subnet_mask' => 'GIG0SubnetMask',
        'gig0_gateway' => 'GIG0Gateway',
        'gig0_speed' => 'GIG0Speed',
        'active' => 'Active',
        'rx_center_freq' => 'RxCenterFreq',
        'rx_carrier_ids' => 'RXCarrierIds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'parent_id' => 'setParentId',
        'network_id' => 'setNetworkId',
        'hub_rftid' => 'setHubRftid',
        'chassis_id' => 'setChassisId',
        'tx_carrier_id' => 'setTxCarrierId',
        'alt_tx_carrier_id' => 'setAltTxCarrierId',
        'sn' => 'setSn',
        'did' => 'setDid',
        'model_type' => 'setModelType',
        'linecard_type' => 'setLinecardType',
        'receive_mode' => 'setReceiveMode',
        'user_password' => 'setUserPassword',
        'admin_password' => 'setAdminPassword',
        'mgmt_ip_address' => 'setMgmtIpAddress',
        'mgmt_subnet_mask' => 'setMgmtSubnetMask',
        'mgmt_gateway' => 'setMgmtGateway',
        'gig0_ip_address' => 'setGig0IpAddress',
        'gig0_subnet_mask' => 'setGig0SubnetMask',
        'gig0_gateway' => 'setGig0Gateway',
        'gig0_speed' => 'setGig0Speed',
        'active' => 'setActive',
        'rx_center_freq' => 'setRxCenterFreq',
        'rx_carrier_ids' => 'setRxCarrierIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'parent_id' => 'getParentId',
        'network_id' => 'getNetworkId',
        'hub_rftid' => 'getHubRftid',
        'chassis_id' => 'getChassisId',
        'tx_carrier_id' => 'getTxCarrierId',
        'alt_tx_carrier_id' => 'getAltTxCarrierId',
        'sn' => 'getSn',
        'did' => 'getDid',
        'model_type' => 'getModelType',
        'linecard_type' => 'getLinecardType',
        'receive_mode' => 'getReceiveMode',
        'user_password' => 'getUserPassword',
        'admin_password' => 'getAdminPassword',
        'mgmt_ip_address' => 'getMgmtIpAddress',
        'mgmt_subnet_mask' => 'getMgmtSubnetMask',
        'mgmt_gateway' => 'getMgmtGateway',
        'gig0_ip_address' => 'getGig0IpAddress',
        'gig0_subnet_mask' => 'getGig0SubnetMask',
        'gig0_gateway' => 'getGig0Gateway',
        'gig0_speed' => 'getGig0Speed',
        'active' => 'getActive',
        'rx_center_freq' => 'getRxCenterFreq',
        'rx_carrier_ids' => 'getRxCarrierIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['parent_id'] = isset($data['parent_id']) ? $data['parent_id'] : null;
        $this->container['network_id'] = isset($data['network_id']) ? $data['network_id'] : null;
        $this->container['hub_rftid'] = isset($data['hub_rftid']) ? $data['hub_rftid'] : null;
        $this->container['chassis_id'] = isset($data['chassis_id']) ? $data['chassis_id'] : null;
        $this->container['tx_carrier_id'] = isset($data['tx_carrier_id']) ? $data['tx_carrier_id'] : null;
        $this->container['alt_tx_carrier_id'] = isset($data['alt_tx_carrier_id']) ? $data['alt_tx_carrier_id'] : null;
        $this->container['sn'] = isset($data['sn']) ? $data['sn'] : null;
        $this->container['did'] = isset($data['did']) ? $data['did'] : null;
        $this->container['model_type'] = isset($data['model_type']) ? $data['model_type'] : null;
        $this->container['linecard_type'] = isset($data['linecard_type']) ? $data['linecard_type'] : null;
        $this->container['receive_mode'] = isset($data['receive_mode']) ? $data['receive_mode'] : null;
        $this->container['user_password'] = isset($data['user_password']) ? $data['user_password'] : null;
        $this->container['admin_password'] = isset($data['admin_password']) ? $data['admin_password'] : null;
        $this->container['mgmt_ip_address'] = isset($data['mgmt_ip_address']) ? $data['mgmt_ip_address'] : null;
        $this->container['mgmt_subnet_mask'] = isset($data['mgmt_subnet_mask']) ? $data['mgmt_subnet_mask'] : null;
        $this->container['mgmt_gateway'] = isset($data['mgmt_gateway']) ? $data['mgmt_gateway'] : null;
        $this->container['gig0_ip_address'] = isset($data['gig0_ip_address']) ? $data['gig0_ip_address'] : null;
        $this->container['gig0_subnet_mask'] = isset($data['gig0_subnet_mask']) ? $data['gig0_subnet_mask'] : null;
        $this->container['gig0_gateway'] = isset($data['gig0_gateway']) ? $data['gig0_gateway'] : null;
        $this->container['gig0_speed'] = isset($data['gig0_speed']) ? $data['gig0_speed'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['rx_center_freq'] = isset($data['rx_center_freq']) ? $data['rx_center_freq'] : null;
        $this->container['rx_carrier_ids'] = isset($data['rx_carrier_ids']) ? $data['rx_carrier_ids'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Internal ID of the Linecard
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the Linecard
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return int
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param int $parent_id parent_id
     *
     * @return $this
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets network_id
     *
     * @return int
     */
    public function getNetworkId()
    {
        return $this->container['network_id'];
    }

    /**
     * Sets network_id
     *
     * @param int $network_id network_id
     *
     * @return $this
     */
    public function setNetworkId($network_id)
    {
        $this->container['network_id'] = $network_id;

        return $this;
    }

    /**
     * Gets hub_rftid
     *
     * @return int
     */
    public function getHubRftid()
    {
        return $this->container['hub_rftid'];
    }

    /**
     * Sets hub_rftid
     *
     * @param int $hub_rftid hub_rftid
     *
     * @return $this
     */
    public function setHubRftid($hub_rftid)
    {
        $this->container['hub_rftid'] = $hub_rftid;

        return $this;
    }

    /**
     * Gets chassis_id
     *
     * @return int
     */
    public function getChassisId()
    {
        return $this->container['chassis_id'];
    }

    /**
     * Sets chassis_id
     *
     * @param int $chassis_id chassis_id
     *
     * @return $this
     */
    public function setChassisId($chassis_id)
    {
        $this->container['chassis_id'] = $chassis_id;

        return $this;
    }

    /**
     * Gets tx_carrier_id
     *
     * @return int
     */
    public function getTxCarrierId()
    {
        return $this->container['tx_carrier_id'];
    }

    /**
     * Sets tx_carrier_id
     *
     * @param int $tx_carrier_id tx_carrier_id
     *
     * @return $this
     */
    public function setTxCarrierId($tx_carrier_id)
    {
        $this->container['tx_carrier_id'] = $tx_carrier_id;

        return $this;
    }

    /**
     * Gets alt_tx_carrier_id
     *
     * @return int
     */
    public function getAltTxCarrierId()
    {
        return $this->container['alt_tx_carrier_id'];
    }

    /**
     * Sets alt_tx_carrier_id
     *
     * @param int $alt_tx_carrier_id alt_tx_carrier_id
     *
     * @return $this
     */
    public function setAltTxCarrierId($alt_tx_carrier_id)
    {
        $this->container['alt_tx_carrier_id'] = $alt_tx_carrier_id;

        return $this;
    }

    /**
     * Gets sn
     *
     * @return int
     */
    public function getSn()
    {
        return $this->container['sn'];
    }

    /**
     * Sets sn
     *
     * @param int $sn sn
     *
     * @return $this
     */
    public function setSn($sn)
    {
        $this->container['sn'] = $sn;

        return $this;
    }

    /**
     * Gets did
     *
     * @return int
     */
    public function getDid()
    {
        return $this->container['did'];
    }

    /**
     * Sets did
     *
     * @param int $did did
     *
     * @return $this
     */
    public function setDid($did)
    {
        $this->container['did'] = $did;

        return $this;
    }

    /**
     * Gets model_type
     *
     * @return string
     */
    public function getModelType()
    {
        return $this->container['model_type'];
    }

    /**
     * Sets model_type
     *
     * @param string $model_type model_type
     *
     * @return $this
     */
    public function setModelType($model_type)
    {
        $this->container['model_type'] = $model_type;

        return $this;
    }

    /**
     * Gets linecard_type
     *
     * @return string
     */
    public function getLinecardType()
    {
        return $this->container['linecard_type'];
    }

    /**
     * Sets linecard_type
     *
     * @param string $linecard_type linecard_type
     *
     * @return $this
     */
    public function setLinecardType($linecard_type)
    {
        $this->container['linecard_type'] = $linecard_type;

        return $this;
    }

    /**
     * Gets receive_mode
     *
     * @return string
     */
    public function getReceiveMode()
    {
        return $this->container['receive_mode'];
    }

    /**
     * Sets receive_mode
     *
     * @param string $receive_mode receive_mode
     *
     * @return $this
     */
    public function setReceiveMode($receive_mode)
    {
        $this->container['receive_mode'] = $receive_mode;

        return $this;
    }

    /**
     * Gets user_password
     *
     * @return string
     */
    public function getUserPassword()
    {
        return $this->container['user_password'];
    }

    /**
     * Sets user_password
     *
     * @param string $user_password user_password
     *
     * @return $this
     */
    public function setUserPassword($user_password)
    {
        $this->container['user_password'] = $user_password;

        return $this;
    }

    /**
     * Gets admin_password
     *
     * @return string
     */
    public function getAdminPassword()
    {
        return $this->container['admin_password'];
    }

    /**
     * Sets admin_password
     *
     * @param string $admin_password admin_password
     *
     * @return $this
     */
    public function setAdminPassword($admin_password)
    {
        $this->container['admin_password'] = $admin_password;

        return $this;
    }

    /**
     * Gets mgmt_ip_address
     *
     * @return string
     */
    public function getMgmtIpAddress()
    {
        return $this->container['mgmt_ip_address'];
    }

    /**
     * Sets mgmt_ip_address
     *
     * @param string $mgmt_ip_address mgmt_ip_address
     *
     * @return $this
     */
    public function setMgmtIpAddress($mgmt_ip_address)
    {
        $this->container['mgmt_ip_address'] = $mgmt_ip_address;

        return $this;
    }

    /**
     * Gets mgmt_subnet_mask
     *
     * @return string
     */
    public function getMgmtSubnetMask()
    {
        return $this->container['mgmt_subnet_mask'];
    }

    /**
     * Sets mgmt_subnet_mask
     *
     * @param string $mgmt_subnet_mask mgmt_subnet_mask
     *
     * @return $this
     */
    public function setMgmtSubnetMask($mgmt_subnet_mask)
    {
        $this->container['mgmt_subnet_mask'] = $mgmt_subnet_mask;

        return $this;
    }

    /**
     * Gets mgmt_gateway
     *
     * @return string
     */
    public function getMgmtGateway()
    {
        return $this->container['mgmt_gateway'];
    }

    /**
     * Sets mgmt_gateway
     *
     * @param string $mgmt_gateway mgmt_gateway
     *
     * @return $this
     */
    public function setMgmtGateway($mgmt_gateway)
    {
        $this->container['mgmt_gateway'] = $mgmt_gateway;

        return $this;
    }

    /**
     * Gets gig0_ip_address
     *
     * @return string
     */
    public function getGig0IpAddress()
    {
        return $this->container['gig0_ip_address'];
    }

    /**
     * Sets gig0_ip_address
     *
     * @param string $gig0_ip_address gig0_ip_address
     *
     * @return $this
     */
    public function setGig0IpAddress($gig0_ip_address)
    {
        $this->container['gig0_ip_address'] = $gig0_ip_address;

        return $this;
    }

    /**
     * Gets gig0_subnet_mask
     *
     * @return string
     */
    public function getGig0SubnetMask()
    {
        return $this->container['gig0_subnet_mask'];
    }

    /**
     * Sets gig0_subnet_mask
     *
     * @param string $gig0_subnet_mask gig0_subnet_mask
     *
     * @return $this
     */
    public function setGig0SubnetMask($gig0_subnet_mask)
    {
        $this->container['gig0_subnet_mask'] = $gig0_subnet_mask;

        return $this;
    }

    /**
     * Gets gig0_gateway
     *
     * @return string
     */
    public function getGig0Gateway()
    {
        return $this->container['gig0_gateway'];
    }

    /**
     * Sets gig0_gateway
     *
     * @param string $gig0_gateway gig0_gateway
     *
     * @return $this
     */
    public function setGig0Gateway($gig0_gateway)
    {
        $this->container['gig0_gateway'] = $gig0_gateway;

        return $this;
    }

    /**
     * Gets gig0_speed
     *
     * @return string
     */
    public function getGig0Speed()
    {
        return $this->container['gig0_speed'];
    }

    /**
     * Sets gig0_speed
     *
     * @param string $gig0_speed gig0_speed
     *
     * @return $this
     */
    public function setGig0Speed($gig0_speed)
    {
        $this->container['gig0_speed'] = $gig0_speed;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets rx_center_freq
     *
     * @return double
     */
    public function getRxCenterFreq()
    {
        return $this->container['rx_center_freq'];
    }

    /**
     * Sets rx_center_freq
     *
     * @param double $rx_center_freq rx_center_freq
     *
     * @return $this
     */
    public function setRxCenterFreq($rx_center_freq)
    {
        $this->container['rx_center_freq'] = $rx_center_freq;

        return $this;
    }

    /**
     * Gets rx_carrier_ids
     *
     * @return \Swagger\Client\Model\RXCarrier[]
     */
    public function getRxCarrierIds()
    {
        return $this->container['rx_carrier_ids'];
    }

    /**
     * Sets rx_carrier_ids
     *
     * @param \Swagger\Client\Model\RXCarrier[] $rx_carrier_ids rx_carrier_ids
     *
     * @return $this
     */
    public function setRxCarrierIds($rx_carrier_ids)
    {
        $this->container['rx_carrier_ids'] = $rx_carrier_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


