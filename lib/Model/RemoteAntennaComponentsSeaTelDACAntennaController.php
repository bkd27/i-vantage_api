<?php
/**
 * RemoteAntennaComponentsSeaTelDACAntennaController
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * iVantage API
 *
 * This is the iDirect iVantage API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RemoteAntennaComponentsSeaTelDACAntennaController Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RemoteAntennaComponentsSeaTelDACAntennaController implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Remote_AntennaComponents_SeaTelDACAntennaController';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'lnb_voltage' => 'int',
        'enable22_khz_tone' => 'bool',
        'enable_dac97' => 'bool',
        'nid' => 'string',
        'dvb_fec' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'lnb_voltage' => 'int32',
        'enable22_khz_tone' => null,
        'enable_dac97' => null,
        'nid' => null,
        'dvb_fec' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'lnb_voltage' => 'LNBVoltage',
        'enable22_khz_tone' => 'Enable22KhzTone',
        'enable_dac97' => 'EnableDAC97',
        'nid' => 'NID',
        'dvb_fec' => 'DVB_FEC'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'lnb_voltage' => 'setLnbVoltage',
        'enable22_khz_tone' => 'setEnable22KhzTone',
        'enable_dac97' => 'setEnableDac97',
        'nid' => 'setNid',
        'dvb_fec' => 'setDvbFec'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'lnb_voltage' => 'getLnbVoltage',
        'enable22_khz_tone' => 'getEnable22KhzTone',
        'enable_dac97' => 'getEnableDac97',
        'nid' => 'getNid',
        'dvb_fec' => 'getDvbFec'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['lnb_voltage'] = isset($data['lnb_voltage']) ? $data['lnb_voltage'] : null;
        $this->container['enable22_khz_tone'] = isset($data['enable22_khz_tone']) ? $data['enable22_khz_tone'] : null;
        $this->container['enable_dac97'] = isset($data['enable_dac97']) ? $data['enable_dac97'] : null;
        $this->container['nid'] = isset($data['nid']) ? $data['nid'] : null;
        $this->container['dvb_fec'] = isset($data['dvb_fec']) ? $data['dvb_fec'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets lnb_voltage
     *
     * @return int
     */
    public function getLnbVoltage()
    {
        return $this->container['lnb_voltage'];
    }

    /**
     * Sets lnb_voltage
     *
     * @param int $lnb_voltage lnb_voltage
     *
     * @return $this
     */
    public function setLnbVoltage($lnb_voltage)
    {
        $this->container['lnb_voltage'] = $lnb_voltage;

        return $this;
    }

    /**
     * Gets enable22_khz_tone
     *
     * @return bool
     */
    public function getEnable22KhzTone()
    {
        return $this->container['enable22_khz_tone'];
    }

    /**
     * Sets enable22_khz_tone
     *
     * @param bool $enable22_khz_tone enable22_khz_tone
     *
     * @return $this
     */
    public function setEnable22KhzTone($enable22_khz_tone)
    {
        $this->container['enable22_khz_tone'] = $enable22_khz_tone;

        return $this;
    }

    /**
     * Gets enable_dac97
     *
     * @return bool
     */
    public function getEnableDac97()
    {
        return $this->container['enable_dac97'];
    }

    /**
     * Sets enable_dac97
     *
     * @param bool $enable_dac97 enable_dac97
     *
     * @return $this
     */
    public function setEnableDac97($enable_dac97)
    {
        $this->container['enable_dac97'] = $enable_dac97;

        return $this;
    }

    /**
     * Gets nid
     *
     * @return string
     */
    public function getNid()
    {
        return $this->container['nid'];
    }

    /**
     * Sets nid
     *
     * @param string $nid nid
     *
     * @return $this
     */
    public function setNid($nid)
    {
        $this->container['nid'] = $nid;

        return $this;
    }

    /**
     * Gets dvb_fec
     *
     * @return double
     */
    public function getDvbFec()
    {
        return $this->container['dvb_fec'];
    }

    /**
     * Sets dvb_fec
     *
     * @param double $dvb_fec dvb_fec
     *
     * @return $this
     */
    public function setDvbFec($dvb_fec)
    {
        $this->container['dvb_fec'] = $dvb_fec;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


