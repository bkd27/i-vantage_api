<?php
/**
 * RuleIPPrefix
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * iVantage API
 *
 * This is the iDirect iVantage API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RuleIPPrefix Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RuleIPPrefix implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Rule_IPPrefix';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'prefix_number' => 'int',
        'len' => 'int',
        'le_value' => 'int',
        'ge_value' => 'int',
        'afi' => 'string',
        'safi' => 'string',
        'match' => 'string',
        'permit' => 'string',
        'address' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'prefix_number' => 'int32',
        'len' => 'int32',
        'le_value' => 'int32',
        'ge_value' => 'int32',
        'afi' => null,
        'safi' => null,
        'match' => null,
        'permit' => null,
        'address' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'prefix_number' => 'PrefixNumber',
        'len' => 'Len',
        'le_value' => 'LEValue',
        'ge_value' => 'GEValue',
        'afi' => 'AFI',
        'safi' => 'SAFI',
        'match' => 'Match',
        'permit' => 'Permit',
        'address' => 'Address'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'prefix_number' => 'setPrefixNumber',
        'len' => 'setLen',
        'le_value' => 'setLeValue',
        'ge_value' => 'setGeValue',
        'afi' => 'setAfi',
        'safi' => 'setSafi',
        'match' => 'setMatch',
        'permit' => 'setPermit',
        'address' => 'setAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'prefix_number' => 'getPrefixNumber',
        'len' => 'getLen',
        'le_value' => 'getLeValue',
        'ge_value' => 'getGeValue',
        'afi' => 'getAfi',
        'safi' => 'getSafi',
        'match' => 'getMatch',
        'permit' => 'getPermit',
        'address' => 'getAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['prefix_number'] = isset($data['prefix_number']) ? $data['prefix_number'] : null;
        $this->container['len'] = isset($data['len']) ? $data['len'] : null;
        $this->container['le_value'] = isset($data['le_value']) ? $data['le_value'] : null;
        $this->container['ge_value'] = isset($data['ge_value']) ? $data['ge_value'] : null;
        $this->container['afi'] = isset($data['afi']) ? $data['afi'] : null;
        $this->container['safi'] = isset($data['safi']) ? $data['safi'] : null;
        $this->container['match'] = isset($data['match']) ? $data['match'] : null;
        $this->container['permit'] = isset($data['permit']) ? $data['permit'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets prefix_number
     *
     * @return int
     */
    public function getPrefixNumber()
    {
        return $this->container['prefix_number'];
    }

    /**
     * Sets prefix_number
     *
     * @param int $prefix_number prefix_number
     *
     * @return $this
     */
    public function setPrefixNumber($prefix_number)
    {
        $this->container['prefix_number'] = $prefix_number;

        return $this;
    }

    /**
     * Gets len
     *
     * @return int
     */
    public function getLen()
    {
        return $this->container['len'];
    }

    /**
     * Sets len
     *
     * @param int $len len
     *
     * @return $this
     */
    public function setLen($len)
    {
        $this->container['len'] = $len;

        return $this;
    }

    /**
     * Gets le_value
     *
     * @return int
     */
    public function getLeValue()
    {
        return $this->container['le_value'];
    }

    /**
     * Sets le_value
     *
     * @param int $le_value le_value
     *
     * @return $this
     */
    public function setLeValue($le_value)
    {
        $this->container['le_value'] = $le_value;

        return $this;
    }

    /**
     * Gets ge_value
     *
     * @return int
     */
    public function getGeValue()
    {
        return $this->container['ge_value'];
    }

    /**
     * Sets ge_value
     *
     * @param int $ge_value ge_value
     *
     * @return $this
     */
    public function setGeValue($ge_value)
    {
        $this->container['ge_value'] = $ge_value;

        return $this;
    }

    /**
     * Gets afi
     *
     * @return string
     */
    public function getAfi()
    {
        return $this->container['afi'];
    }

    /**
     * Sets afi
     *
     * @param string $afi afi
     *
     * @return $this
     */
    public function setAfi($afi)
    {
        $this->container['afi'] = $afi;

        return $this;
    }

    /**
     * Gets safi
     *
     * @return string
     */
    public function getSafi()
    {
        return $this->container['safi'];
    }

    /**
     * Sets safi
     *
     * @param string $safi safi
     *
     * @return $this
     */
    public function setSafi($safi)
    {
        $this->container['safi'] = $safi;

        return $this;
    }

    /**
     * Gets match
     *
     * @return string
     */
    public function getMatch()
    {
        return $this->container['match'];
    }

    /**
     * Sets match
     *
     * @param string $match match
     *
     * @return $this
     */
    public function setMatch($match)
    {
        $this->container['match'] = $match;

        return $this;
    }

    /**
     * Gets permit
     *
     * @return string
     */
    public function getPermit()
    {
        return $this->container['permit'];
    }

    /**
     * Sets permit
     *
     * @param string $permit permit
     *
     * @return $this
     */
    public function setPermit($permit)
    {
        $this->container['permit'] = $permit;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


