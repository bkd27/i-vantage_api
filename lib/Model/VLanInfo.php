<?php
/**
 * VLanInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * iVantage API
 *
 * This is the iDirect iVantage API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * VLanInfo Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VLanInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VLanInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'v_lan_id' => 'int',
        'eth0_ip_address' => 'string',
        'eth0_subnet_mask' => 'string',
        'sat0_ip_address' => 'string',
        'sat0_subnet_mask' => 'string',
        'eth0_ripv2' => 'bool',
        'sat0_ripv2' => 'bool',
        'nat' => 'bool',
        'dns' => '\Swagger\Client\Model\VLanInfoDNS',
        'dhcp' => '\Swagger\Client\Model\VLanInfoDHCP',
        'port_forward' => '\Swagger\Client\Model\PortForward[]',
        'static_routes' => '\Swagger\Client\Model\StaticRoute[]',
        'gre_tunnels' => '\Swagger\Client\Model\GreTunnel[]',
        'multicast_groups' => '\Swagger\Client\Model\MulticastGroup[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'v_lan_id' => 'int64',
        'eth0_ip_address' => null,
        'eth0_subnet_mask' => null,
        'sat0_ip_address' => null,
        'sat0_subnet_mask' => null,
        'eth0_ripv2' => null,
        'sat0_ripv2' => null,
        'nat' => null,
        'dns' => null,
        'dhcp' => null,
        'port_forward' => null,
        'static_routes' => null,
        'gre_tunnels' => null,
        'multicast_groups' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'v_lan_id' => 'VLanID',
        'eth0_ip_address' => 'ETH0IPAddress',
        'eth0_subnet_mask' => 'ETH0SubnetMask',
        'sat0_ip_address' => 'SAT0IPAddress',
        'sat0_subnet_mask' => 'SAT0SubnetMask',
        'eth0_ripv2' => 'ETH0RIPv2',
        'sat0_ripv2' => 'SAT0RIPv2',
        'nat' => 'NAT',
        'dns' => 'DNS',
        'dhcp' => 'DHCP',
        'port_forward' => 'PortForward',
        'static_routes' => 'StaticRoutes',
        'gre_tunnels' => 'GreTunnels',
        'multicast_groups' => 'MulticastGroups'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'v_lan_id' => 'setVLanId',
        'eth0_ip_address' => 'setEth0IpAddress',
        'eth0_subnet_mask' => 'setEth0SubnetMask',
        'sat0_ip_address' => 'setSat0IpAddress',
        'sat0_subnet_mask' => 'setSat0SubnetMask',
        'eth0_ripv2' => 'setEth0Ripv2',
        'sat0_ripv2' => 'setSat0Ripv2',
        'nat' => 'setNat',
        'dns' => 'setDns',
        'dhcp' => 'setDhcp',
        'port_forward' => 'setPortForward',
        'static_routes' => 'setStaticRoutes',
        'gre_tunnels' => 'setGreTunnels',
        'multicast_groups' => 'setMulticastGroups'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'v_lan_id' => 'getVLanId',
        'eth0_ip_address' => 'getEth0IpAddress',
        'eth0_subnet_mask' => 'getEth0SubnetMask',
        'sat0_ip_address' => 'getSat0IpAddress',
        'sat0_subnet_mask' => 'getSat0SubnetMask',
        'eth0_ripv2' => 'getEth0Ripv2',
        'sat0_ripv2' => 'getSat0Ripv2',
        'nat' => 'getNat',
        'dns' => 'getDns',
        'dhcp' => 'getDhcp',
        'port_forward' => 'getPortForward',
        'static_routes' => 'getStaticRoutes',
        'gre_tunnels' => 'getGreTunnels',
        'multicast_groups' => 'getMulticastGroups'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['v_lan_id'] = isset($data['v_lan_id']) ? $data['v_lan_id'] : null;
        $this->container['eth0_ip_address'] = isset($data['eth0_ip_address']) ? $data['eth0_ip_address'] : null;
        $this->container['eth0_subnet_mask'] = isset($data['eth0_subnet_mask']) ? $data['eth0_subnet_mask'] : null;
        $this->container['sat0_ip_address'] = isset($data['sat0_ip_address']) ? $data['sat0_ip_address'] : null;
        $this->container['sat0_subnet_mask'] = isset($data['sat0_subnet_mask']) ? $data['sat0_subnet_mask'] : null;
        $this->container['eth0_ripv2'] = isset($data['eth0_ripv2']) ? $data['eth0_ripv2'] : null;
        $this->container['sat0_ripv2'] = isset($data['sat0_ripv2']) ? $data['sat0_ripv2'] : null;
        $this->container['nat'] = isset($data['nat']) ? $data['nat'] : null;
        $this->container['dns'] = isset($data['dns']) ? $data['dns'] : null;
        $this->container['dhcp'] = isset($data['dhcp']) ? $data['dhcp'] : null;
        $this->container['port_forward'] = isset($data['port_forward']) ? $data['port_forward'] : null;
        $this->container['static_routes'] = isset($data['static_routes']) ? $data['static_routes'] : null;
        $this->container['gre_tunnels'] = isset($data['gre_tunnels']) ? $data['gre_tunnels'] : null;
        $this->container['multicast_groups'] = isset($data['multicast_groups']) ? $data['multicast_groups'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets v_lan_id
     *
     * @return int
     */
    public function getVLanId()
    {
        return $this->container['v_lan_id'];
    }

    /**
     * Sets v_lan_id
     *
     * @param int $v_lan_id v_lan_id
     *
     * @return $this
     */
    public function setVLanId($v_lan_id)
    {
        $this->container['v_lan_id'] = $v_lan_id;

        return $this;
    }

    /**
     * Gets eth0_ip_address
     *
     * @return string
     */
    public function getEth0IpAddress()
    {
        return $this->container['eth0_ip_address'];
    }

    /**
     * Sets eth0_ip_address
     *
     * @param string $eth0_ip_address eth0_ip_address
     *
     * @return $this
     */
    public function setEth0IpAddress($eth0_ip_address)
    {
        $this->container['eth0_ip_address'] = $eth0_ip_address;

        return $this;
    }

    /**
     * Gets eth0_subnet_mask
     *
     * @return string
     */
    public function getEth0SubnetMask()
    {
        return $this->container['eth0_subnet_mask'];
    }

    /**
     * Sets eth0_subnet_mask
     *
     * @param string $eth0_subnet_mask eth0_subnet_mask
     *
     * @return $this
     */
    public function setEth0SubnetMask($eth0_subnet_mask)
    {
        $this->container['eth0_subnet_mask'] = $eth0_subnet_mask;

        return $this;
    }

    /**
     * Gets sat0_ip_address
     *
     * @return string
     */
    public function getSat0IpAddress()
    {
        return $this->container['sat0_ip_address'];
    }

    /**
     * Sets sat0_ip_address
     *
     * @param string $sat0_ip_address sat0_ip_address
     *
     * @return $this
     */
    public function setSat0IpAddress($sat0_ip_address)
    {
        $this->container['sat0_ip_address'] = $sat0_ip_address;

        return $this;
    }

    /**
     * Gets sat0_subnet_mask
     *
     * @return string
     */
    public function getSat0SubnetMask()
    {
        return $this->container['sat0_subnet_mask'];
    }

    /**
     * Sets sat0_subnet_mask
     *
     * @param string $sat0_subnet_mask sat0_subnet_mask
     *
     * @return $this
     */
    public function setSat0SubnetMask($sat0_subnet_mask)
    {
        $this->container['sat0_subnet_mask'] = $sat0_subnet_mask;

        return $this;
    }

    /**
     * Gets eth0_ripv2
     *
     * @return bool
     */
    public function getEth0Ripv2()
    {
        return $this->container['eth0_ripv2'];
    }

    /**
     * Sets eth0_ripv2
     *
     * @param bool $eth0_ripv2 eth0_ripv2
     *
     * @return $this
     */
    public function setEth0Ripv2($eth0_ripv2)
    {
        $this->container['eth0_ripv2'] = $eth0_ripv2;

        return $this;
    }

    /**
     * Gets sat0_ripv2
     *
     * @return bool
     */
    public function getSat0Ripv2()
    {
        return $this->container['sat0_ripv2'];
    }

    /**
     * Sets sat0_ripv2
     *
     * @param bool $sat0_ripv2 sat0_ripv2
     *
     * @return $this
     */
    public function setSat0Ripv2($sat0_ripv2)
    {
        $this->container['sat0_ripv2'] = $sat0_ripv2;

        return $this;
    }

    /**
     * Gets nat
     *
     * @return bool
     */
    public function getNat()
    {
        return $this->container['nat'];
    }

    /**
     * Sets nat
     *
     * @param bool $nat nat
     *
     * @return $this
     */
    public function setNat($nat)
    {
        $this->container['nat'] = $nat;

        return $this;
    }

    /**
     * Gets dns
     *
     * @return \Swagger\Client\Model\VLanInfoDNS
     */
    public function getDns()
    {
        return $this->container['dns'];
    }

    /**
     * Sets dns
     *
     * @param \Swagger\Client\Model\VLanInfoDNS $dns dns
     *
     * @return $this
     */
    public function setDns($dns)
    {
        $this->container['dns'] = $dns;

        return $this;
    }

    /**
     * Gets dhcp
     *
     * @return \Swagger\Client\Model\VLanInfoDHCP
     */
    public function getDhcp()
    {
        return $this->container['dhcp'];
    }

    /**
     * Sets dhcp
     *
     * @param \Swagger\Client\Model\VLanInfoDHCP $dhcp dhcp
     *
     * @return $this
     */
    public function setDhcp($dhcp)
    {
        $this->container['dhcp'] = $dhcp;

        return $this;
    }

    /**
     * Gets port_forward
     *
     * @return \Swagger\Client\Model\PortForward[]
     */
    public function getPortForward()
    {
        return $this->container['port_forward'];
    }

    /**
     * Sets port_forward
     *
     * @param \Swagger\Client\Model\PortForward[] $port_forward port_forward
     *
     * @return $this
     */
    public function setPortForward($port_forward)
    {
        $this->container['port_forward'] = $port_forward;

        return $this;
    }

    /**
     * Gets static_routes
     *
     * @return \Swagger\Client\Model\StaticRoute[]
     */
    public function getStaticRoutes()
    {
        return $this->container['static_routes'];
    }

    /**
     * Sets static_routes
     *
     * @param \Swagger\Client\Model\StaticRoute[] $static_routes static_routes
     *
     * @return $this
     */
    public function setStaticRoutes($static_routes)
    {
        $this->container['static_routes'] = $static_routes;

        return $this;
    }

    /**
     * Gets gre_tunnels
     *
     * @return \Swagger\Client\Model\GreTunnel[]
     */
    public function getGreTunnels()
    {
        return $this->container['gre_tunnels'];
    }

    /**
     * Sets gre_tunnels
     *
     * @param \Swagger\Client\Model\GreTunnel[] $gre_tunnels gre_tunnels
     *
     * @return $this
     */
    public function setGreTunnels($gre_tunnels)
    {
        $this->container['gre_tunnels'] = $gre_tunnels;

        return $this;
    }

    /**
     * Gets multicast_groups
     *
     * @return \Swagger\Client\Model\MulticastGroup[]
     */
    public function getMulticastGroups()
    {
        return $this->container['multicast_groups'];
    }

    /**
     * Sets multicast_groups
     *
     * @param \Swagger\Client\Model\MulticastGroup[] $multicast_groups multicast_groups
     *
     * @return $this
     */
    public function setMulticastGroups($multicast_groups)
    {
        $this->container['multicast_groups'] = $multicast_groups;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


