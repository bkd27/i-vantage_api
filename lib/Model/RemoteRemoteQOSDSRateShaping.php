<?php
/**
 * RemoteRemoteQOSDSRateShaping
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * iVantage API
 *
 * This is the iDirect iVantage API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RemoteRemoteQOSDSRateShaping Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RemoteRemoteQOSDSRateShaping implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Remote_RemoteQOS_DSRateShaping';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'enable_max_ir' => 'bool',
        'enable_cir' => 'bool',
        'enable_min_ir' => 'bool',
        'enable_eir' => 'bool',
        'max_ir' => 'double',
        'cir' => 'double',
        'cost' => 'double',
        'min_ir' => 'double',
        'priority' => 'string',
        'min_modcod' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'enable_max_ir' => null,
        'enable_cir' => null,
        'enable_min_ir' => null,
        'enable_eir' => null,
        'max_ir' => 'double',
        'cir' => 'double',
        'cost' => 'double',
        'min_ir' => 'double',
        'priority' => null,
        'min_modcod' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enable_max_ir' => 'EnableMaxIR',
        'enable_cir' => 'EnableCIR',
        'enable_min_ir' => 'EnableMinIR',
        'enable_eir' => 'EnableEIR',
        'max_ir' => 'MaxIR',
        'cir' => 'CIR',
        'cost' => 'Cost',
        'min_ir' => 'MinIR',
        'priority' => 'Priority',
        'min_modcod' => 'MinMODCOD'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enable_max_ir' => 'setEnableMaxIr',
        'enable_cir' => 'setEnableCir',
        'enable_min_ir' => 'setEnableMinIr',
        'enable_eir' => 'setEnableEir',
        'max_ir' => 'setMaxIr',
        'cir' => 'setCir',
        'cost' => 'setCost',
        'min_ir' => 'setMinIr',
        'priority' => 'setPriority',
        'min_modcod' => 'setMinModcod'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enable_max_ir' => 'getEnableMaxIr',
        'enable_cir' => 'getEnableCir',
        'enable_min_ir' => 'getEnableMinIr',
        'enable_eir' => 'getEnableEir',
        'max_ir' => 'getMaxIr',
        'cir' => 'getCir',
        'cost' => 'getCost',
        'min_ir' => 'getMinIr',
        'priority' => 'getPriority',
        'min_modcod' => 'getMinModcod'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['enable_max_ir'] = isset($data['enable_max_ir']) ? $data['enable_max_ir'] : null;
        $this->container['enable_cir'] = isset($data['enable_cir']) ? $data['enable_cir'] : null;
        $this->container['enable_min_ir'] = isset($data['enable_min_ir']) ? $data['enable_min_ir'] : null;
        $this->container['enable_eir'] = isset($data['enable_eir']) ? $data['enable_eir'] : null;
        $this->container['max_ir'] = isset($data['max_ir']) ? $data['max_ir'] : null;
        $this->container['cir'] = isset($data['cir']) ? $data['cir'] : null;
        $this->container['cost'] = isset($data['cost']) ? $data['cost'] : null;
        $this->container['min_ir'] = isset($data['min_ir']) ? $data['min_ir'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['min_modcod'] = isset($data['min_modcod']) ? $data['min_modcod'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enable_max_ir
     *
     * @return bool
     */
    public function getEnableMaxIr()
    {
        return $this->container['enable_max_ir'];
    }

    /**
     * Sets enable_max_ir
     *
     * @param bool $enable_max_ir enable_max_ir
     *
     * @return $this
     */
    public function setEnableMaxIr($enable_max_ir)
    {
        $this->container['enable_max_ir'] = $enable_max_ir;

        return $this;
    }

    /**
     * Gets enable_cir
     *
     * @return bool
     */
    public function getEnableCir()
    {
        return $this->container['enable_cir'];
    }

    /**
     * Sets enable_cir
     *
     * @param bool $enable_cir enable_cir
     *
     * @return $this
     */
    public function setEnableCir($enable_cir)
    {
        $this->container['enable_cir'] = $enable_cir;

        return $this;
    }

    /**
     * Gets enable_min_ir
     *
     * @return bool
     */
    public function getEnableMinIr()
    {
        return $this->container['enable_min_ir'];
    }

    /**
     * Sets enable_min_ir
     *
     * @param bool $enable_min_ir enable_min_ir
     *
     * @return $this
     */
    public function setEnableMinIr($enable_min_ir)
    {
        $this->container['enable_min_ir'] = $enable_min_ir;

        return $this;
    }

    /**
     * Gets enable_eir
     *
     * @return bool
     */
    public function getEnableEir()
    {
        return $this->container['enable_eir'];
    }

    /**
     * Sets enable_eir
     *
     * @param bool $enable_eir enable_eir
     *
     * @return $this
     */
    public function setEnableEir($enable_eir)
    {
        $this->container['enable_eir'] = $enable_eir;

        return $this;
    }

    /**
     * Gets max_ir
     *
     * @return double
     */
    public function getMaxIr()
    {
        return $this->container['max_ir'];
    }

    /**
     * Sets max_ir
     *
     * @param double $max_ir max_ir
     *
     * @return $this
     */
    public function setMaxIr($max_ir)
    {
        $this->container['max_ir'] = $max_ir;

        return $this;
    }

    /**
     * Gets cir
     *
     * @return double
     */
    public function getCir()
    {
        return $this->container['cir'];
    }

    /**
     * Sets cir
     *
     * @param double $cir cir
     *
     * @return $this
     */
    public function setCir($cir)
    {
        $this->container['cir'] = $cir;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return double
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param double $cost cost
     *
     * @return $this
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets min_ir
     *
     * @return double
     */
    public function getMinIr()
    {
        return $this->container['min_ir'];
    }

    /**
     * Sets min_ir
     *
     * @param double $min_ir min_ir
     *
     * @return $this
     */
    public function setMinIr($min_ir)
    {
        $this->container['min_ir'] = $min_ir;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return string
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param string $priority priority
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets min_modcod
     *
     * @return string
     */
    public function getMinModcod()
    {
        return $this->container['min_modcod'];
    }

    /**
     * Sets min_modcod
     *
     * @param string $min_modcod min_modcod
     *
     * @return $this
     */
    public function setMinModcod($min_modcod)
    {
        $this->container['min_modcod'] = $min_modcod;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


