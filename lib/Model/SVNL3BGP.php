<?php
/**
 * SVNL3BGP
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * iVantage API
 *
 * This is the iDirect iVantage API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * SVNL3BGP Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SVNL3BGP implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SVN_L3_BGP';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'remote_id' => 'int',
        'as' => 'int',
        'enabled' => 'bool',
        'orf' => '\Swagger\Client\Model\SVNL3BGPORF',
        'route_redistribution' => '\Swagger\Client\Model\SVNL3BGPRouteRedistribution',
        'route_maps' => '\Swagger\Client\Model\RouteMaps[]',
        'aggregate_addresses' => '\Swagger\Client\Model\AggregateAddress[]',
        'config_tables' => '\Swagger\Client\Model\ConfigTables[]',
        'peers' => '\Swagger\Client\Model\Peers[]',
        'peer_groups' => '\Swagger\Client\Model\PeerGroups[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'remote_id' => 'int32',
        'as' => 'int32',
        'enabled' => null,
        'orf' => null,
        'route_redistribution' => null,
        'route_maps' => null,
        'aggregate_addresses' => null,
        'config_tables' => null,
        'peers' => null,
        'peer_groups' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'remote_id' => 'RemoteID',
        'as' => 'AS',
        'enabled' => 'Enabled',
        'orf' => 'ORF',
        'route_redistribution' => 'RouteRedistribution',
        'route_maps' => 'RouteMaps',
        'aggregate_addresses' => 'AggregateAddresses',
        'config_tables' => 'ConfigTables',
        'peers' => 'Peers',
        'peer_groups' => 'PeerGroups'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'remote_id' => 'setRemoteId',
        'as' => 'setAs',
        'enabled' => 'setEnabled',
        'orf' => 'setOrf',
        'route_redistribution' => 'setRouteRedistribution',
        'route_maps' => 'setRouteMaps',
        'aggregate_addresses' => 'setAggregateAddresses',
        'config_tables' => 'setConfigTables',
        'peers' => 'setPeers',
        'peer_groups' => 'setPeerGroups'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'remote_id' => 'getRemoteId',
        'as' => 'getAs',
        'enabled' => 'getEnabled',
        'orf' => 'getOrf',
        'route_redistribution' => 'getRouteRedistribution',
        'route_maps' => 'getRouteMaps',
        'aggregate_addresses' => 'getAggregateAddresses',
        'config_tables' => 'getConfigTables',
        'peers' => 'getPeers',
        'peer_groups' => 'getPeerGroups'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['remote_id'] = isset($data['remote_id']) ? $data['remote_id'] : null;
        $this->container['as'] = isset($data['as']) ? $data['as'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['orf'] = isset($data['orf']) ? $data['orf'] : null;
        $this->container['route_redistribution'] = isset($data['route_redistribution']) ? $data['route_redistribution'] : null;
        $this->container['route_maps'] = isset($data['route_maps']) ? $data['route_maps'] : null;
        $this->container['aggregate_addresses'] = isset($data['aggregate_addresses']) ? $data['aggregate_addresses'] : null;
        $this->container['config_tables'] = isset($data['config_tables']) ? $data['config_tables'] : null;
        $this->container['peers'] = isset($data['peers']) ? $data['peers'] : null;
        $this->container['peer_groups'] = isset($data['peer_groups']) ? $data['peer_groups'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets remote_id
     * @return int
     */
    public function getRemoteId()
    {
        return $this->container['remote_id'];
    }

    /**
     * Sets remote_id
     * @param int $remote_id
     * @return $this
     */
    public function setRemoteId($remote_id)
    {
        $this->container['remote_id'] = $remote_id;

        return $this;
    }

    /**
     * Gets as
     * @return int
     */
    public function getAs()
    {
        return $this->container['as'];
    }

    /**
     * Sets as
     * @param int $as
     * @return $this
     */
    public function setAs($as)
    {
        $this->container['as'] = $as;

        return $this;
    }

    /**
     * Gets enabled
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     * @param bool $enabled
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets orf
     * @return \Swagger\Client\Model\SVNL3BGPORF
     */
    public function getOrf()
    {
        return $this->container['orf'];
    }

    /**
     * Sets orf
     * @param \Swagger\Client\Model\SVNL3BGPORF $orf
     * @return $this
     */
    public function setOrf($orf)
    {
        $this->container['orf'] = $orf;

        return $this;
    }

    /**
     * Gets route_redistribution
     * @return \Swagger\Client\Model\SVNL3BGPRouteRedistribution
     */
    public function getRouteRedistribution()
    {
        return $this->container['route_redistribution'];
    }

    /**
     * Sets route_redistribution
     * @param \Swagger\Client\Model\SVNL3BGPRouteRedistribution $route_redistribution
     * @return $this
     */
    public function setRouteRedistribution($route_redistribution)
    {
        $this->container['route_redistribution'] = $route_redistribution;

        return $this;
    }

    /**
     * Gets route_maps
     * @return \Swagger\Client\Model\RouteMaps[]
     */
    public function getRouteMaps()
    {
        return $this->container['route_maps'];
    }

    /**
     * Sets route_maps
     * @param \Swagger\Client\Model\RouteMaps[] $route_maps
     * @return $this
     */
    public function setRouteMaps($route_maps)
    {
        $this->container['route_maps'] = $route_maps;

        return $this;
    }

    /**
     * Gets aggregate_addresses
     * @return \Swagger\Client\Model\AggregateAddress[]
     */
    public function getAggregateAddresses()
    {
        return $this->container['aggregate_addresses'];
    }

    /**
     * Sets aggregate_addresses
     * @param \Swagger\Client\Model\AggregateAddress[] $aggregate_addresses
     * @return $this
     */
    public function setAggregateAddresses($aggregate_addresses)
    {
        $this->container['aggregate_addresses'] = $aggregate_addresses;

        return $this;
    }

    /**
     * Gets config_tables
     * @return \Swagger\Client\Model\ConfigTables[]
     */
    public function getConfigTables()
    {
        return $this->container['config_tables'];
    }

    /**
     * Sets config_tables
     * @param \Swagger\Client\Model\ConfigTables[] $config_tables
     * @return $this
     */
    public function setConfigTables($config_tables)
    {
        $this->container['config_tables'] = $config_tables;

        return $this;
    }

    /**
     * Gets peers
     * @return \Swagger\Client\Model\Peers[]
     */
    public function getPeers()
    {
        return $this->container['peers'];
    }

    /**
     * Sets peers
     * @param \Swagger\Client\Model\Peers[] $peers
     * @return $this
     */
    public function setPeers($peers)
    {
        $this->container['peers'] = $peers;

        return $this;
    }

    /**
     * Gets peer_groups
     * @return \Swagger\Client\Model\PeerGroups[]
     */
    public function getPeerGroups()
    {
        return $this->container['peer_groups'];
    }

    /**
     * Sets peer_groups
     * @param \Swagger\Client\Model\PeerGroups[] $peer_groups
     * @return $this
     */
    public function setPeerGroups($peer_groups)
    {
        $this->container['peer_groups'] = $peer_groups;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


