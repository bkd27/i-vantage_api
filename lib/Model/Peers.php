<?php
/**
 * Peers
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * iVantage API
 *
 * This is the iDirect iVantage API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Peers Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Peers implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Peers';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'peer_number' => 'int',
        'remote_port' => 'int',
        'remote_as' => 'int',
        'config_table_number' => 'int',
        'connect_retry' => 'int',
        'hold_time' => 'int',
        'keep_alive' => 'int',
        'peer_group_number' => 'int',
        'max_routes_peer' => 'int',
        'remote_addr' => 'string',
        'drop_warn' => 'string',
        'md5_auth_password' => 'string',
        'next_hop_self' => 'bool',
        'is_reflector_client' => 'bool',
        'passive' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'peer_number' => 'int32',
        'remote_port' => 'int32',
        'remote_as' => 'int32',
        'config_table_number' => 'int32',
        'connect_retry' => 'int32',
        'hold_time' => 'int32',
        'keep_alive' => 'int32',
        'peer_group_number' => 'int32',
        'max_routes_peer' => 'int32',
        'remote_addr' => null,
        'drop_warn' => null,
        'md5_auth_password' => null,
        'next_hop_self' => null,
        'is_reflector_client' => null,
        'passive' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'peer_number' => 'PeerNumber',
        'remote_port' => 'RemotePort',
        'remote_as' => 'RemoteAS',
        'config_table_number' => 'ConfigTableNumber',
        'connect_retry' => 'ConnectRetry',
        'hold_time' => 'HoldTime',
        'keep_alive' => 'KeepAlive',
        'peer_group_number' => 'PeerGroupNumber',
        'max_routes_peer' => 'MaxRoutesPeer',
        'remote_addr' => 'RemoteAddr',
        'drop_warn' => 'DropWarn',
        'md5_auth_password' => 'MD5AuthPassword',
        'next_hop_self' => 'NextHopSelf',
        'is_reflector_client' => 'IsReflectorClient',
        'passive' => 'Passive'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'peer_number' => 'setPeerNumber',
        'remote_port' => 'setRemotePort',
        'remote_as' => 'setRemoteAs',
        'config_table_number' => 'setConfigTableNumber',
        'connect_retry' => 'setConnectRetry',
        'hold_time' => 'setHoldTime',
        'keep_alive' => 'setKeepAlive',
        'peer_group_number' => 'setPeerGroupNumber',
        'max_routes_peer' => 'setMaxRoutesPeer',
        'remote_addr' => 'setRemoteAddr',
        'drop_warn' => 'setDropWarn',
        'md5_auth_password' => 'setMd5AuthPassword',
        'next_hop_self' => 'setNextHopSelf',
        'is_reflector_client' => 'setIsReflectorClient',
        'passive' => 'setPassive'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'peer_number' => 'getPeerNumber',
        'remote_port' => 'getRemotePort',
        'remote_as' => 'getRemoteAs',
        'config_table_number' => 'getConfigTableNumber',
        'connect_retry' => 'getConnectRetry',
        'hold_time' => 'getHoldTime',
        'keep_alive' => 'getKeepAlive',
        'peer_group_number' => 'getPeerGroupNumber',
        'max_routes_peer' => 'getMaxRoutesPeer',
        'remote_addr' => 'getRemoteAddr',
        'drop_warn' => 'getDropWarn',
        'md5_auth_password' => 'getMd5AuthPassword',
        'next_hop_self' => 'getNextHopSelf',
        'is_reflector_client' => 'getIsReflectorClient',
        'passive' => 'getPassive'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['peer_number'] = isset($data['peer_number']) ? $data['peer_number'] : null;
        $this->container['remote_port'] = isset($data['remote_port']) ? $data['remote_port'] : null;
        $this->container['remote_as'] = isset($data['remote_as']) ? $data['remote_as'] : null;
        $this->container['config_table_number'] = isset($data['config_table_number']) ? $data['config_table_number'] : null;
        $this->container['connect_retry'] = isset($data['connect_retry']) ? $data['connect_retry'] : null;
        $this->container['hold_time'] = isset($data['hold_time']) ? $data['hold_time'] : null;
        $this->container['keep_alive'] = isset($data['keep_alive']) ? $data['keep_alive'] : null;
        $this->container['peer_group_number'] = isset($data['peer_group_number']) ? $data['peer_group_number'] : null;
        $this->container['max_routes_peer'] = isset($data['max_routes_peer']) ? $data['max_routes_peer'] : null;
        $this->container['remote_addr'] = isset($data['remote_addr']) ? $data['remote_addr'] : null;
        $this->container['drop_warn'] = isset($data['drop_warn']) ? $data['drop_warn'] : null;
        $this->container['md5_auth_password'] = isset($data['md5_auth_password']) ? $data['md5_auth_password'] : null;
        $this->container['next_hop_self'] = isset($data['next_hop_self']) ? $data['next_hop_self'] : null;
        $this->container['is_reflector_client'] = isset($data['is_reflector_client']) ? $data['is_reflector_client'] : null;
        $this->container['passive'] = isset($data['passive']) ? $data['passive'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets peer_number
     *
     * @return int
     */
    public function getPeerNumber()
    {
        return $this->container['peer_number'];
    }

    /**
     * Sets peer_number
     *
     * @param int $peer_number peer_number
     *
     * @return $this
     */
    public function setPeerNumber($peer_number)
    {
        $this->container['peer_number'] = $peer_number;

        return $this;
    }

    /**
     * Gets remote_port
     *
     * @return int
     */
    public function getRemotePort()
    {
        return $this->container['remote_port'];
    }

    /**
     * Sets remote_port
     *
     * @param int $remote_port remote_port
     *
     * @return $this
     */
    public function setRemotePort($remote_port)
    {
        $this->container['remote_port'] = $remote_port;

        return $this;
    }

    /**
     * Gets remote_as
     *
     * @return int
     */
    public function getRemoteAs()
    {
        return $this->container['remote_as'];
    }

    /**
     * Sets remote_as
     *
     * @param int $remote_as remote_as
     *
     * @return $this
     */
    public function setRemoteAs($remote_as)
    {
        $this->container['remote_as'] = $remote_as;

        return $this;
    }

    /**
     * Gets config_table_number
     *
     * @return int
     */
    public function getConfigTableNumber()
    {
        return $this->container['config_table_number'];
    }

    /**
     * Sets config_table_number
     *
     * @param int $config_table_number config_table_number
     *
     * @return $this
     */
    public function setConfigTableNumber($config_table_number)
    {
        $this->container['config_table_number'] = $config_table_number;

        return $this;
    }

    /**
     * Gets connect_retry
     *
     * @return int
     */
    public function getConnectRetry()
    {
        return $this->container['connect_retry'];
    }

    /**
     * Sets connect_retry
     *
     * @param int $connect_retry connect_retry
     *
     * @return $this
     */
    public function setConnectRetry($connect_retry)
    {
        $this->container['connect_retry'] = $connect_retry;

        return $this;
    }

    /**
     * Gets hold_time
     *
     * @return int
     */
    public function getHoldTime()
    {
        return $this->container['hold_time'];
    }

    /**
     * Sets hold_time
     *
     * @param int $hold_time hold_time
     *
     * @return $this
     */
    public function setHoldTime($hold_time)
    {
        $this->container['hold_time'] = $hold_time;

        return $this;
    }

    /**
     * Gets keep_alive
     *
     * @return int
     */
    public function getKeepAlive()
    {
        return $this->container['keep_alive'];
    }

    /**
     * Sets keep_alive
     *
     * @param int $keep_alive keep_alive
     *
     * @return $this
     */
    public function setKeepAlive($keep_alive)
    {
        $this->container['keep_alive'] = $keep_alive;

        return $this;
    }

    /**
     * Gets peer_group_number
     *
     * @return int
     */
    public function getPeerGroupNumber()
    {
        return $this->container['peer_group_number'];
    }

    /**
     * Sets peer_group_number
     *
     * @param int $peer_group_number peer_group_number
     *
     * @return $this
     */
    public function setPeerGroupNumber($peer_group_number)
    {
        $this->container['peer_group_number'] = $peer_group_number;

        return $this;
    }

    /**
     * Gets max_routes_peer
     *
     * @return int
     */
    public function getMaxRoutesPeer()
    {
        return $this->container['max_routes_peer'];
    }

    /**
     * Sets max_routes_peer
     *
     * @param int $max_routes_peer max_routes_peer
     *
     * @return $this
     */
    public function setMaxRoutesPeer($max_routes_peer)
    {
        $this->container['max_routes_peer'] = $max_routes_peer;

        return $this;
    }

    /**
     * Gets remote_addr
     *
     * @return string
     */
    public function getRemoteAddr()
    {
        return $this->container['remote_addr'];
    }

    /**
     * Sets remote_addr
     *
     * @param string $remote_addr remote_addr
     *
     * @return $this
     */
    public function setRemoteAddr($remote_addr)
    {
        $this->container['remote_addr'] = $remote_addr;

        return $this;
    }

    /**
     * Gets drop_warn
     *
     * @return string
     */
    public function getDropWarn()
    {
        return $this->container['drop_warn'];
    }

    /**
     * Sets drop_warn
     *
     * @param string $drop_warn drop_warn
     *
     * @return $this
     */
    public function setDropWarn($drop_warn)
    {
        $this->container['drop_warn'] = $drop_warn;

        return $this;
    }

    /**
     * Gets md5_auth_password
     *
     * @return string
     */
    public function getMd5AuthPassword()
    {
        return $this->container['md5_auth_password'];
    }

    /**
     * Sets md5_auth_password
     *
     * @param string $md5_auth_password md5_auth_password
     *
     * @return $this
     */
    public function setMd5AuthPassword($md5_auth_password)
    {
        $this->container['md5_auth_password'] = $md5_auth_password;

        return $this;
    }

    /**
     * Gets next_hop_self
     *
     * @return bool
     */
    public function getNextHopSelf()
    {
        return $this->container['next_hop_self'];
    }

    /**
     * Sets next_hop_self
     *
     * @param bool $next_hop_self next_hop_self
     *
     * @return $this
     */
    public function setNextHopSelf($next_hop_self)
    {
        $this->container['next_hop_self'] = $next_hop_self;

        return $this;
    }

    /**
     * Gets is_reflector_client
     *
     * @return bool
     */
    public function getIsReflectorClient()
    {
        return $this->container['is_reflector_client'];
    }

    /**
     * Sets is_reflector_client
     *
     * @param bool $is_reflector_client is_reflector_client
     *
     * @return $this
     */
    public function setIsReflectorClient($is_reflector_client)
    {
        $this->container['is_reflector_client'] = $is_reflector_client;

        return $this;
    }

    /**
     * Gets passive
     *
     * @return bool
     */
    public function getPassive()
    {
        return $this->container['passive'];
    }

    /**
     * Sets passive
     *
     * @param bool $passive passive
     *
     * @return $this
     */
    public function setPassive($passive)
    {
        $this->container['passive'] = $passive;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


