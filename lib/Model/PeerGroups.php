<?php
/**
 * PeerGroups
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * iVantage API
 *
 * This is the iDirect iVantage API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * PeerGroups Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PeerGroups implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PeerGroups';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'peer_group_number' => 'int',
        'config_table_number' => 'int',
        'area' => 'string',
        'next_hop_self' => 'bool',
        'aggregate' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'peer_group_number' => 'int32',
        'config_table_number' => 'int32',
        'area' => null,
        'next_hop_self' => null,
        'aggregate' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'peer_group_number' => 'PeerGroupNumber',
        'config_table_number' => 'ConfigTableNumber',
        'area' => 'Area',
        'next_hop_self' => 'NextHopSelf',
        'aggregate' => 'Aggregate'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'peer_group_number' => 'setPeerGroupNumber',
        'config_table_number' => 'setConfigTableNumber',
        'area' => 'setArea',
        'next_hop_self' => 'setNextHopSelf',
        'aggregate' => 'setAggregate'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'peer_group_number' => 'getPeerGroupNumber',
        'config_table_number' => 'getConfigTableNumber',
        'area' => 'getArea',
        'next_hop_self' => 'getNextHopSelf',
        'aggregate' => 'getAggregate'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['peer_group_number'] = isset($data['peer_group_number']) ? $data['peer_group_number'] : null;
        $this->container['config_table_number'] = isset($data['config_table_number']) ? $data['config_table_number'] : null;
        $this->container['area'] = isset($data['area']) ? $data['area'] : null;
        $this->container['next_hop_self'] = isset($data['next_hop_self']) ? $data['next_hop_self'] : null;
        $this->container['aggregate'] = isset($data['aggregate']) ? $data['aggregate'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets peer_group_number
     * @return int
     */
    public function getPeerGroupNumber()
    {
        return $this->container['peer_group_number'];
    }

    /**
     * Sets peer_group_number
     * @param int $peer_group_number
     * @return $this
     */
    public function setPeerGroupNumber($peer_group_number)
    {
        $this->container['peer_group_number'] = $peer_group_number;

        return $this;
    }

    /**
     * Gets config_table_number
     * @return int
     */
    public function getConfigTableNumber()
    {
        return $this->container['config_table_number'];
    }

    /**
     * Sets config_table_number
     * @param int $config_table_number
     * @return $this
     */
    public function setConfigTableNumber($config_table_number)
    {
        $this->container['config_table_number'] = $config_table_number;

        return $this;
    }

    /**
     * Gets area
     * @return string
     */
    public function getArea()
    {
        return $this->container['area'];
    }

    /**
     * Sets area
     * @param string $area
     * @return $this
     */
    public function setArea($area)
    {
        $this->container['area'] = $area;

        return $this;
    }

    /**
     * Gets next_hop_self
     * @return bool
     */
    public function getNextHopSelf()
    {
        return $this->container['next_hop_self'];
    }

    /**
     * Sets next_hop_self
     * @param bool $next_hop_self
     * @return $this
     */
    public function setNextHopSelf($next_hop_self)
    {
        $this->container['next_hop_self'] = $next_hop_self;

        return $this;
    }

    /**
     * Gets aggregate
     * @return bool
     */
    public function getAggregate()
    {
        return $this->container['aggregate'];
    }

    /**
     * Sets aggregate
     * @param bool $aggregate
     * @return $this
     */
    public function setAggregate($aggregate)
    {
        $this->container['aggregate'] = $aggregate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


