<?php
/**
 * InrouteGroup
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * iVantage API
 *
 * This is the iDirect iVantage API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InrouteGroup Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InrouteGroup implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InrouteGroup';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'network_id' => 'int',
        'max_cotm_speed' => 'int',
        'qos_mode' => 'string',
        'bandwidth_group_ids' => 'int[]',
        'carrier_ids' => 'int[]',
        'timeplan' => '\Swagger\Client\Model\InrouteGroupTimeplan',
        'adaptive' => '\Swagger\Client\Model\InrouteGroupAdaptive',
        'mesh' => '\Swagger\Client\Model\InrouteGroupMesh',
        'compositions' => '\Swagger\Client\Model\Composition[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'network_id' => 'int32',
        'max_cotm_speed' => 'int32',
        'qos_mode' => null,
        'bandwidth_group_ids' => 'int32',
        'carrier_ids' => 'int32',
        'timeplan' => null,
        'adaptive' => null,
        'mesh' => null,
        'compositions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'ID',
        'name' => 'Name',
        'network_id' => 'NetworkID',
        'max_cotm_speed' => 'MaxCotmSpeed',
        'qos_mode' => 'QosMode',
        'bandwidth_group_ids' => 'BandwidthGroupIDs',
        'carrier_ids' => 'CarrierIDs',
        'timeplan' => 'Timeplan',
        'adaptive' => 'Adaptive',
        'mesh' => 'Mesh',
        'compositions' => 'Compositions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'network_id' => 'setNetworkId',
        'max_cotm_speed' => 'setMaxCotmSpeed',
        'qos_mode' => 'setQosMode',
        'bandwidth_group_ids' => 'setBandwidthGroupIds',
        'carrier_ids' => 'setCarrierIds',
        'timeplan' => 'setTimeplan',
        'adaptive' => 'setAdaptive',
        'mesh' => 'setMesh',
        'compositions' => 'setCompositions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'network_id' => 'getNetworkId',
        'max_cotm_speed' => 'getMaxCotmSpeed',
        'qos_mode' => 'getQosMode',
        'bandwidth_group_ids' => 'getBandwidthGroupIds',
        'carrier_ids' => 'getCarrierIds',
        'timeplan' => 'getTimeplan',
        'adaptive' => 'getAdaptive',
        'mesh' => 'getMesh',
        'compositions' => 'getCompositions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['network_id'] = isset($data['network_id']) ? $data['network_id'] : null;
        $this->container['max_cotm_speed'] = isset($data['max_cotm_speed']) ? $data['max_cotm_speed'] : null;
        $this->container['qos_mode'] = isset($data['qos_mode']) ? $data['qos_mode'] : null;
        $this->container['bandwidth_group_ids'] = isset($data['bandwidth_group_ids']) ? $data['bandwidth_group_ids'] : null;
        $this->container['carrier_ids'] = isset($data['carrier_ids']) ? $data['carrier_ids'] : null;
        $this->container['timeplan'] = isset($data['timeplan']) ? $data['timeplan'] : null;
        $this->container['adaptive'] = isset($data['adaptive']) ? $data['adaptive'] : null;
        $this->container['mesh'] = isset($data['mesh']) ? $data['mesh'] : null;
        $this->container['compositions'] = isset($data['compositions']) ? $data['compositions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Internal ID of the InrouteGroup
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the InrouteGroup
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets network_id
     *
     * @return int
     */
    public function getNetworkId()
    {
        return $this->container['network_id'];
    }

    /**
     * Sets network_id
     *
     * @param int $network_id network_id
     *
     * @return $this
     */
    public function setNetworkId($network_id)
    {
        $this->container['network_id'] = $network_id;

        return $this;
    }

    /**
     * Gets max_cotm_speed
     *
     * @return int
     */
    public function getMaxCotmSpeed()
    {
        return $this->container['max_cotm_speed'];
    }

    /**
     * Sets max_cotm_speed
     *
     * @param int $max_cotm_speed max_cotm_speed
     *
     * @return $this
     */
    public function setMaxCotmSpeed($max_cotm_speed)
    {
        $this->container['max_cotm_speed'] = $max_cotm_speed;

        return $this;
    }

    /**
     * Gets qos_mode
     *
     * @return string
     */
    public function getQosMode()
    {
        return $this->container['qos_mode'];
    }

    /**
     * Sets qos_mode
     *
     * @param string $qos_mode qos_mode
     *
     * @return $this
     */
    public function setQosMode($qos_mode)
    {
        $this->container['qos_mode'] = $qos_mode;

        return $this;
    }

    /**
     * Gets bandwidth_group_ids
     *
     * @return int[]
     */
    public function getBandwidthGroupIds()
    {
        return $this->container['bandwidth_group_ids'];
    }

    /**
     * Sets bandwidth_group_ids
     *
     * @param int[] $bandwidth_group_ids bandwidth_group_ids
     *
     * @return $this
     */
    public function setBandwidthGroupIds($bandwidth_group_ids)
    {
        $this->container['bandwidth_group_ids'] = $bandwidth_group_ids;

        return $this;
    }

    /**
     * Gets carrier_ids
     *
     * @return int[]
     */
    public function getCarrierIds()
    {
        return $this->container['carrier_ids'];
    }

    /**
     * Sets carrier_ids
     *
     * @param int[] $carrier_ids carrier_ids
     *
     * @return $this
     */
    public function setCarrierIds($carrier_ids)
    {
        $this->container['carrier_ids'] = $carrier_ids;

        return $this;
    }

    /**
     * Gets timeplan
     *
     * @return \Swagger\Client\Model\InrouteGroupTimeplan
     */
    public function getTimeplan()
    {
        return $this->container['timeplan'];
    }

    /**
     * Sets timeplan
     *
     * @param \Swagger\Client\Model\InrouteGroupTimeplan $timeplan timeplan
     *
     * @return $this
     */
    public function setTimeplan($timeplan)
    {
        $this->container['timeplan'] = $timeplan;

        return $this;
    }

    /**
     * Gets adaptive
     *
     * @return \Swagger\Client\Model\InrouteGroupAdaptive
     */
    public function getAdaptive()
    {
        return $this->container['adaptive'];
    }

    /**
     * Sets adaptive
     *
     * @param \Swagger\Client\Model\InrouteGroupAdaptive $adaptive adaptive
     *
     * @return $this
     */
    public function setAdaptive($adaptive)
    {
        $this->container['adaptive'] = $adaptive;

        return $this;
    }

    /**
     * Gets mesh
     *
     * @return \Swagger\Client\Model\InrouteGroupMesh
     */
    public function getMesh()
    {
        return $this->container['mesh'];
    }

    /**
     * Sets mesh
     *
     * @param \Swagger\Client\Model\InrouteGroupMesh $mesh mesh
     *
     * @return $this
     */
    public function setMesh($mesh)
    {
        $this->container['mesh'] = $mesh;

        return $this;
    }

    /**
     * Gets compositions
     *
     * @return \Swagger\Client\Model\Composition[]
     */
    public function getCompositions()
    {
        return $this->container['compositions'];
    }

    /**
     * Sets compositions
     *
     * @param \Swagger\Client\Model\Composition[] $compositions compositions
     *
     * @return $this
     */
    public function setCompositions($compositions)
    {
        $this->container['compositions'] = $compositions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


