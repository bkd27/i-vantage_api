<?php
/**
 * UserVlanInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * iVantage API
 *
 * This is the iDirect iVantage API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * UserVlanInfo Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class UserVlanInfo implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'UserVlanInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'v_lan_id' => 'int',
        'upstream_address' => 'string',
        'upstream_subnet_mask' => 'string',
        'upstream_gateway' => 'string',
        'enable_ri_pv2' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'v_lan_id' => 'int32',
        'upstream_address' => null,
        'upstream_subnet_mask' => null,
        'upstream_gateway' => null,
        'enable_ri_pv2' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'v_lan_id' => 'VLanID',
        'upstream_address' => 'UpstreamAddress',
        'upstream_subnet_mask' => 'UpstreamSubnetMask',
        'upstream_gateway' => 'UpstreamGateway',
        'enable_ri_pv2' => 'EnableRIPv2'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'v_lan_id' => 'setVLanId',
        'upstream_address' => 'setUpstreamAddress',
        'upstream_subnet_mask' => 'setUpstreamSubnetMask',
        'upstream_gateway' => 'setUpstreamGateway',
        'enable_ri_pv2' => 'setEnableRiPv2'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'v_lan_id' => 'getVLanId',
        'upstream_address' => 'getUpstreamAddress',
        'upstream_subnet_mask' => 'getUpstreamSubnetMask',
        'upstream_gateway' => 'getUpstreamGateway',
        'enable_ri_pv2' => 'getEnableRiPv2'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['v_lan_id'] = isset($data['v_lan_id']) ? $data['v_lan_id'] : null;
        $this->container['upstream_address'] = isset($data['upstream_address']) ? $data['upstream_address'] : null;
        $this->container['upstream_subnet_mask'] = isset($data['upstream_subnet_mask']) ? $data['upstream_subnet_mask'] : null;
        $this->container['upstream_gateway'] = isset($data['upstream_gateway']) ? $data['upstream_gateway'] : null;
        $this->container['enable_ri_pv2'] = isset($data['enable_ri_pv2']) ? $data['enable_ri_pv2'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets v_lan_id
     * @return int
     */
    public function getVLanId()
    {
        return $this->container['v_lan_id'];
    }

    /**
     * Sets v_lan_id
     * @param int $v_lan_id
     * @return $this
     */
    public function setVLanId($v_lan_id)
    {
        $this->container['v_lan_id'] = $v_lan_id;

        return $this;
    }

    /**
     * Gets upstream_address
     * @return string
     */
    public function getUpstreamAddress()
    {
        return $this->container['upstream_address'];
    }

    /**
     * Sets upstream_address
     * @param string $upstream_address
     * @return $this
     */
    public function setUpstreamAddress($upstream_address)
    {
        $this->container['upstream_address'] = $upstream_address;

        return $this;
    }

    /**
     * Gets upstream_subnet_mask
     * @return string
     */
    public function getUpstreamSubnetMask()
    {
        return $this->container['upstream_subnet_mask'];
    }

    /**
     * Sets upstream_subnet_mask
     * @param string $upstream_subnet_mask
     * @return $this
     */
    public function setUpstreamSubnetMask($upstream_subnet_mask)
    {
        $this->container['upstream_subnet_mask'] = $upstream_subnet_mask;

        return $this;
    }

    /**
     * Gets upstream_gateway
     * @return string
     */
    public function getUpstreamGateway()
    {
        return $this->container['upstream_gateway'];
    }

    /**
     * Sets upstream_gateway
     * @param string $upstream_gateway
     * @return $this
     */
    public function setUpstreamGateway($upstream_gateway)
    {
        $this->container['upstream_gateway'] = $upstream_gateway;

        return $this;
    }

    /**
     * Gets enable_ri_pv2
     * @return bool
     */
    public function getEnableRiPv2()
    {
        return $this->container['enable_ri_pv2'];
    }

    /**
     * Sets enable_ri_pv2
     * @param bool $enable_ri_pv2
     * @return $this
     */
    public function setEnableRiPv2($enable_ri_pv2)
    {
        $this->container['enable_ri_pv2'] = $enable_ri_pv2;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


