<?php
/**
 * RemoteMesh
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * iVantage API
 *
 * This is the iDirect iVantage API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RemoteMesh Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RemoteMesh implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Remote_Mesh';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'mode' => 'string',
        'receiver_ip_address' => 'string',
        'receiver_subnet_mask' => 'string',
        'receiver_sn' => 'int',
        'receiver_fade_margin' => 'double',
        'receiver_hysteresis_margin' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'mode' => null,
        'receiver_ip_address' => null,
        'receiver_subnet_mask' => null,
        'receiver_sn' => 'int64',
        'receiver_fade_margin' => 'double',
        'receiver_hysteresis_margin' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mode' => 'Mode',
        'receiver_ip_address' => 'ReceiverIPAddress',
        'receiver_subnet_mask' => 'ReceiverSubnetMask',
        'receiver_sn' => 'ReceiverSN',
        'receiver_fade_margin' => 'ReceiverFadeMargin',
        'receiver_hysteresis_margin' => 'ReceiverHysteresisMargin'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mode' => 'setMode',
        'receiver_ip_address' => 'setReceiverIpAddress',
        'receiver_subnet_mask' => 'setReceiverSubnetMask',
        'receiver_sn' => 'setReceiverSn',
        'receiver_fade_margin' => 'setReceiverFadeMargin',
        'receiver_hysteresis_margin' => 'setReceiverHysteresisMargin'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mode' => 'getMode',
        'receiver_ip_address' => 'getReceiverIpAddress',
        'receiver_subnet_mask' => 'getReceiverSubnetMask',
        'receiver_sn' => 'getReceiverSn',
        'receiver_fade_margin' => 'getReceiverFadeMargin',
        'receiver_hysteresis_margin' => 'getReceiverHysteresisMargin'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mode'] = isset($data['mode']) ? $data['mode'] : null;
        $this->container['receiver_ip_address'] = isset($data['receiver_ip_address']) ? $data['receiver_ip_address'] : null;
        $this->container['receiver_subnet_mask'] = isset($data['receiver_subnet_mask']) ? $data['receiver_subnet_mask'] : null;
        $this->container['receiver_sn'] = isset($data['receiver_sn']) ? $data['receiver_sn'] : null;
        $this->container['receiver_fade_margin'] = isset($data['receiver_fade_margin']) ? $data['receiver_fade_margin'] : null;
        $this->container['receiver_hysteresis_margin'] = isset($data['receiver_hysteresis_margin']) ? $data['receiver_hysteresis_margin'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mode
     *
     * @return string
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string $mode mode
     *
     * @return $this
     */
    public function setMode($mode)
    {
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets receiver_ip_address
     *
     * @return string
     */
    public function getReceiverIpAddress()
    {
        return $this->container['receiver_ip_address'];
    }

    /**
     * Sets receiver_ip_address
     *
     * @param string $receiver_ip_address receiver_ip_address
     *
     * @return $this
     */
    public function setReceiverIpAddress($receiver_ip_address)
    {
        $this->container['receiver_ip_address'] = $receiver_ip_address;

        return $this;
    }

    /**
     * Gets receiver_subnet_mask
     *
     * @return string
     */
    public function getReceiverSubnetMask()
    {
        return $this->container['receiver_subnet_mask'];
    }

    /**
     * Sets receiver_subnet_mask
     *
     * @param string $receiver_subnet_mask receiver_subnet_mask
     *
     * @return $this
     */
    public function setReceiverSubnetMask($receiver_subnet_mask)
    {
        $this->container['receiver_subnet_mask'] = $receiver_subnet_mask;

        return $this;
    }

    /**
     * Gets receiver_sn
     *
     * @return int
     */
    public function getReceiverSn()
    {
        return $this->container['receiver_sn'];
    }

    /**
     * Sets receiver_sn
     *
     * @param int $receiver_sn receiver_sn
     *
     * @return $this
     */
    public function setReceiverSn($receiver_sn)
    {
        $this->container['receiver_sn'] = $receiver_sn;

        return $this;
    }

    /**
     * Gets receiver_fade_margin
     *
     * @return double
     */
    public function getReceiverFadeMargin()
    {
        return $this->container['receiver_fade_margin'];
    }

    /**
     * Sets receiver_fade_margin
     *
     * @param double $receiver_fade_margin receiver_fade_margin
     *
     * @return $this
     */
    public function setReceiverFadeMargin($receiver_fade_margin)
    {
        $this->container['receiver_fade_margin'] = $receiver_fade_margin;

        return $this;
    }

    /**
     * Gets receiver_hysteresis_margin
     *
     * @return double
     */
    public function getReceiverHysteresisMargin()
    {
        return $this->container['receiver_hysteresis_margin'];
    }

    /**
     * Sets receiver_hysteresis_margin
     *
     * @param double $receiver_hysteresis_margin receiver_hysteresis_margin
     *
     * @return $this
     */
    public function setReceiverHysteresisMargin($receiver_hysteresis_margin)
    {
        $this->container['receiver_hysteresis_margin'] = $receiver_hysteresis_margin;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


