<?php
/**
 * RemoteMobile
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * iVantage API
 *
 * This is the iDirect iVantage API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RemoteMobile Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RemoteMobile implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Remote_Mobile';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'security' => 'bool',
        'handshake' => 'bool',
        'gps_input' => 'string',
        'serial_device' => 'string',
        'serial_settings' => 'string',
        'cotm_type' => 'string',
        'gps_refresh_rate' => 'int',
        'min_look_angle' => 'double',
        'max_skew' => 'double',
        'skew_margin' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'security' => null,
        'handshake' => null,
        'gps_input' => null,
        'serial_device' => null,
        'serial_settings' => null,
        'cotm_type' => null,
        'gps_refresh_rate' => 'int32',
        'min_look_angle' => 'double',
        'max_skew' => 'double',
        'skew_margin' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'security' => 'Security',
        'handshake' => 'Handshake',
        'gps_input' => 'GPSInput',
        'serial_device' => 'SerialDevice',
        'serial_settings' => 'SerialSettings',
        'cotm_type' => 'COTMType',
        'gps_refresh_rate' => 'GPSRefreshRate',
        'min_look_angle' => 'MinLookAngle',
        'max_skew' => 'MaxSkew',
        'skew_margin' => 'SkewMargin'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'security' => 'setSecurity',
        'handshake' => 'setHandshake',
        'gps_input' => 'setGpsInput',
        'serial_device' => 'setSerialDevice',
        'serial_settings' => 'setSerialSettings',
        'cotm_type' => 'setCotmType',
        'gps_refresh_rate' => 'setGpsRefreshRate',
        'min_look_angle' => 'setMinLookAngle',
        'max_skew' => 'setMaxSkew',
        'skew_margin' => 'setSkewMargin'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'security' => 'getSecurity',
        'handshake' => 'getHandshake',
        'gps_input' => 'getGpsInput',
        'serial_device' => 'getSerialDevice',
        'serial_settings' => 'getSerialSettings',
        'cotm_type' => 'getCotmType',
        'gps_refresh_rate' => 'getGpsRefreshRate',
        'min_look_angle' => 'getMinLookAngle',
        'max_skew' => 'getMaxSkew',
        'skew_margin' => 'getSkewMargin'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['security'] = isset($data['security']) ? $data['security'] : null;
        $this->container['handshake'] = isset($data['handshake']) ? $data['handshake'] : null;
        $this->container['gps_input'] = isset($data['gps_input']) ? $data['gps_input'] : null;
        $this->container['serial_device'] = isset($data['serial_device']) ? $data['serial_device'] : null;
        $this->container['serial_settings'] = isset($data['serial_settings']) ? $data['serial_settings'] : null;
        $this->container['cotm_type'] = isset($data['cotm_type']) ? $data['cotm_type'] : null;
        $this->container['gps_refresh_rate'] = isset($data['gps_refresh_rate']) ? $data['gps_refresh_rate'] : null;
        $this->container['min_look_angle'] = isset($data['min_look_angle']) ? $data['min_look_angle'] : null;
        $this->container['max_skew'] = isset($data['max_skew']) ? $data['max_skew'] : null;
        $this->container['skew_margin'] = isset($data['skew_margin']) ? $data['skew_margin'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets security
     *
     * @return bool
     */
    public function getSecurity()
    {
        return $this->container['security'];
    }

    /**
     * Sets security
     *
     * @param bool $security security
     *
     * @return $this
     */
    public function setSecurity($security)
    {
        $this->container['security'] = $security;

        return $this;
    }

    /**
     * Gets handshake
     *
     * @return bool
     */
    public function getHandshake()
    {
        return $this->container['handshake'];
    }

    /**
     * Sets handshake
     *
     * @param bool $handshake handshake
     *
     * @return $this
     */
    public function setHandshake($handshake)
    {
        $this->container['handshake'] = $handshake;

        return $this;
    }

    /**
     * Gets gps_input
     *
     * @return string
     */
    public function getGpsInput()
    {
        return $this->container['gps_input'];
    }

    /**
     * Sets gps_input
     *
     * @param string $gps_input gps_input
     *
     * @return $this
     */
    public function setGpsInput($gps_input)
    {
        $this->container['gps_input'] = $gps_input;

        return $this;
    }

    /**
     * Gets serial_device
     *
     * @return string
     */
    public function getSerialDevice()
    {
        return $this->container['serial_device'];
    }

    /**
     * Sets serial_device
     *
     * @param string $serial_device serial_device
     *
     * @return $this
     */
    public function setSerialDevice($serial_device)
    {
        $this->container['serial_device'] = $serial_device;

        return $this;
    }

    /**
     * Gets serial_settings
     *
     * @return string
     */
    public function getSerialSettings()
    {
        return $this->container['serial_settings'];
    }

    /**
     * Sets serial_settings
     *
     * @param string $serial_settings serial_settings
     *
     * @return $this
     */
    public function setSerialSettings($serial_settings)
    {
        $this->container['serial_settings'] = $serial_settings;

        return $this;
    }

    /**
     * Gets cotm_type
     *
     * @return string
     */
    public function getCotmType()
    {
        return $this->container['cotm_type'];
    }

    /**
     * Sets cotm_type
     *
     * @param string $cotm_type cotm_type
     *
     * @return $this
     */
    public function setCotmType($cotm_type)
    {
        $this->container['cotm_type'] = $cotm_type;

        return $this;
    }

    /**
     * Gets gps_refresh_rate
     *
     * @return int
     */
    public function getGpsRefreshRate()
    {
        return $this->container['gps_refresh_rate'];
    }

    /**
     * Sets gps_refresh_rate
     *
     * @param int $gps_refresh_rate gps_refresh_rate
     *
     * @return $this
     */
    public function setGpsRefreshRate($gps_refresh_rate)
    {
        $this->container['gps_refresh_rate'] = $gps_refresh_rate;

        return $this;
    }

    /**
     * Gets min_look_angle
     *
     * @return double
     */
    public function getMinLookAngle()
    {
        return $this->container['min_look_angle'];
    }

    /**
     * Sets min_look_angle
     *
     * @param double $min_look_angle min_look_angle
     *
     * @return $this
     */
    public function setMinLookAngle($min_look_angle)
    {
        $this->container['min_look_angle'] = $min_look_angle;

        return $this;
    }

    /**
     * Gets max_skew
     *
     * @return double
     */
    public function getMaxSkew()
    {
        return $this->container['max_skew'];
    }

    /**
     * Sets max_skew
     *
     * @param double $max_skew max_skew
     *
     * @return $this
     */
    public function setMaxSkew($max_skew)
    {
        $this->container['max_skew'] = $max_skew;

        return $this;
    }

    /**
     * Gets skew_margin
     *
     * @return double
     */
    public function getSkewMargin()
    {
        return $this->container['skew_margin'];
    }

    /**
     * Sets skew_margin
     *
     * @param double $skew_margin skew_margin
     *
     * @return $this
     */
    public function setSkewMargin($skew_margin)
    {
        $this->container['skew_margin'] = $skew_margin;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


