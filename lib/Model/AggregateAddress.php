<?php
/**
 * AggregateAddress
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * iVantage API
 *
 * This is the iDirect iVantage API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * AggregateAddress Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AggregateAddress implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'AggregateAddress';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'aggregate_address_number' => 'int',
        'prefix_len' => 'int',
        'suppress_map_number' => 'int',
        'advertise_map_number' => 'int',
        'attribute_map_number' => 'int',
        'afi' => 'string',
        'safi' => 'string',
        'prefix_addr' => 'string',
        'option' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'aggregate_address_number' => 'int32',
        'prefix_len' => 'int32',
        'suppress_map_number' => 'int32',
        'advertise_map_number' => 'int32',
        'attribute_map_number' => 'int32',
        'afi' => null,
        'safi' => null,
        'prefix_addr' => null,
        'option' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'aggregate_address_number' => 'AggregateAddressNumber',
        'prefix_len' => 'PrefixLen',
        'suppress_map_number' => 'SuppressMapNumber',
        'advertise_map_number' => 'AdvertiseMapNumber',
        'attribute_map_number' => 'AttributeMapNumber',
        'afi' => 'AFI',
        'safi' => 'SAFI',
        'prefix_addr' => 'PrefixAddr',
        'option' => 'Option'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'aggregate_address_number' => 'setAggregateAddressNumber',
        'prefix_len' => 'setPrefixLen',
        'suppress_map_number' => 'setSuppressMapNumber',
        'advertise_map_number' => 'setAdvertiseMapNumber',
        'attribute_map_number' => 'setAttributeMapNumber',
        'afi' => 'setAfi',
        'safi' => 'setSafi',
        'prefix_addr' => 'setPrefixAddr',
        'option' => 'setOption'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'aggregate_address_number' => 'getAggregateAddressNumber',
        'prefix_len' => 'getPrefixLen',
        'suppress_map_number' => 'getSuppressMapNumber',
        'advertise_map_number' => 'getAdvertiseMapNumber',
        'attribute_map_number' => 'getAttributeMapNumber',
        'afi' => 'getAfi',
        'safi' => 'getSafi',
        'prefix_addr' => 'getPrefixAddr',
        'option' => 'getOption'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['aggregate_address_number'] = isset($data['aggregate_address_number']) ? $data['aggregate_address_number'] : null;
        $this->container['prefix_len'] = isset($data['prefix_len']) ? $data['prefix_len'] : null;
        $this->container['suppress_map_number'] = isset($data['suppress_map_number']) ? $data['suppress_map_number'] : null;
        $this->container['advertise_map_number'] = isset($data['advertise_map_number']) ? $data['advertise_map_number'] : null;
        $this->container['attribute_map_number'] = isset($data['attribute_map_number']) ? $data['attribute_map_number'] : null;
        $this->container['afi'] = isset($data['afi']) ? $data['afi'] : null;
        $this->container['safi'] = isset($data['safi']) ? $data['safi'] : null;
        $this->container['prefix_addr'] = isset($data['prefix_addr']) ? $data['prefix_addr'] : null;
        $this->container['option'] = isset($data['option']) ? $data['option'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets aggregate_address_number
     * @return int
     */
    public function getAggregateAddressNumber()
    {
        return $this->container['aggregate_address_number'];
    }

    /**
     * Sets aggregate_address_number
     * @param int $aggregate_address_number
     * @return $this
     */
    public function setAggregateAddressNumber($aggregate_address_number)
    {
        $this->container['aggregate_address_number'] = $aggregate_address_number;

        return $this;
    }

    /**
     * Gets prefix_len
     * @return int
     */
    public function getPrefixLen()
    {
        return $this->container['prefix_len'];
    }

    /**
     * Sets prefix_len
     * @param int $prefix_len
     * @return $this
     */
    public function setPrefixLen($prefix_len)
    {
        $this->container['prefix_len'] = $prefix_len;

        return $this;
    }

    /**
     * Gets suppress_map_number
     * @return int
     */
    public function getSuppressMapNumber()
    {
        return $this->container['suppress_map_number'];
    }

    /**
     * Sets suppress_map_number
     * @param int $suppress_map_number
     * @return $this
     */
    public function setSuppressMapNumber($suppress_map_number)
    {
        $this->container['suppress_map_number'] = $suppress_map_number;

        return $this;
    }

    /**
     * Gets advertise_map_number
     * @return int
     */
    public function getAdvertiseMapNumber()
    {
        return $this->container['advertise_map_number'];
    }

    /**
     * Sets advertise_map_number
     * @param int $advertise_map_number
     * @return $this
     */
    public function setAdvertiseMapNumber($advertise_map_number)
    {
        $this->container['advertise_map_number'] = $advertise_map_number;

        return $this;
    }

    /**
     * Gets attribute_map_number
     * @return int
     */
    public function getAttributeMapNumber()
    {
        return $this->container['attribute_map_number'];
    }

    /**
     * Sets attribute_map_number
     * @param int $attribute_map_number
     * @return $this
     */
    public function setAttributeMapNumber($attribute_map_number)
    {
        $this->container['attribute_map_number'] = $attribute_map_number;

        return $this;
    }

    /**
     * Gets afi
     * @return string
     */
    public function getAfi()
    {
        return $this->container['afi'];
    }

    /**
     * Sets afi
     * @param string $afi
     * @return $this
     */
    public function setAfi($afi)
    {
        $this->container['afi'] = $afi;

        return $this;
    }

    /**
     * Gets safi
     * @return string
     */
    public function getSafi()
    {
        return $this->container['safi'];
    }

    /**
     * Sets safi
     * @param string $safi
     * @return $this
     */
    public function setSafi($safi)
    {
        $this->container['safi'] = $safi;

        return $this;
    }

    /**
     * Gets prefix_addr
     * @return string
     */
    public function getPrefixAddr()
    {
        return $this->container['prefix_addr'];
    }

    /**
     * Sets prefix_addr
     * @param string $prefix_addr
     * @return $this
     */
    public function setPrefixAddr($prefix_addr)
    {
        $this->container['prefix_addr'] = $prefix_addr;

        return $this;
    }

    /**
     * Gets option
     * @return string
     */
    public function getOption()
    {
        return $this->container['option'];
    }

    /**
     * Sets option
     * @param string $option
     * @return $this
     */
    public function setOption($option)
    {
        $this->container['option'] = $option;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


