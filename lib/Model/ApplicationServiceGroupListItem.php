<?php
/**
 * ApplicationServiceGroupListItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * iVantage API
 *
 * This is the iDirect iVantage API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ApplicationServiceGroupListItem Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ApplicationServiceGroupListItem implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ApplicationServiceGroupListItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'parent_id' => 'int',
        'name' => 'string',
        'parent_name' => 'string',
        'qos_mode' => 'string',
        'qos_group_type' => 'string',
        'downstream' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'parent_id' => 'int32',
        'name' => null,
        'parent_name' => null,
        'qos_mode' => null,
        'qos_group_type' => null,
        'downstream' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'ID',
        'parent_id' => 'ParentID',
        'name' => 'Name',
        'parent_name' => 'ParentName',
        'qos_mode' => 'QOSMode',
        'qos_group_type' => 'QOSGroupType',
        'downstream' => 'Downstream'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'parent_id' => 'setParentId',
        'name' => 'setName',
        'parent_name' => 'setParentName',
        'qos_mode' => 'setQosMode',
        'qos_group_type' => 'setQosGroupType',
        'downstream' => 'setDownstream'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'parent_id' => 'getParentId',
        'name' => 'getName',
        'parent_name' => 'getParentName',
        'qos_mode' => 'getQosMode',
        'qos_group_type' => 'getQosGroupType',
        'downstream' => 'getDownstream'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['parent_id'] = isset($data['parent_id']) ? $data['parent_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['parent_name'] = isset($data['parent_name']) ? $data['parent_name'] : null;
        $this->container['qos_mode'] = isset($data['qos_mode']) ? $data['qos_mode'] : null;
        $this->container['qos_group_type'] = isset($data['qos_group_type']) ? $data['qos_group_type'] : null;
        $this->container['downstream'] = isset($data['downstream']) ? $data['downstream'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets parent_id
     * @return int
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     * @param int $parent_id
     * @return $this
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets parent_name
     * @return string
     */
    public function getParentName()
    {
        return $this->container['parent_name'];
    }

    /**
     * Sets parent_name
     * @param string $parent_name
     * @return $this
     */
    public function setParentName($parent_name)
    {
        $this->container['parent_name'] = $parent_name;

        return $this;
    }

    /**
     * Gets qos_mode
     * @return string
     */
    public function getQosMode()
    {
        return $this->container['qos_mode'];
    }

    /**
     * Sets qos_mode
     * @param string $qos_mode
     * @return $this
     */
    public function setQosMode($qos_mode)
    {
        $this->container['qos_mode'] = $qos_mode;

        return $this;
    }

    /**
     * Gets qos_group_type
     * @return string
     */
    public function getQosGroupType()
    {
        return $this->container['qos_group_type'];
    }

    /**
     * Sets qos_group_type
     * @param string $qos_group_type
     * @return $this
     */
    public function setQosGroupType($qos_group_type)
    {
        $this->container['qos_group_type'] = $qos_group_type;

        return $this;
    }

    /**
     * Gets downstream
     * @return bool
     */
    public function getDownstream()
    {
        return $this->container['downstream'];
    }

    /**
     * Sets downstream
     * @param bool $downstream
     * @return $this
     */
    public function setDownstream($downstream)
    {
        $this->container['downstream'] = $downstream;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


