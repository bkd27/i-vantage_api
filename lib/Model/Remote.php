<?php
/**
 * Remote
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * iVantage API
 *
 * This is the iDirect iVantage API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Remote Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Remote implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Remote';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'parent_id' => 'int',
        'sn' => 'int',
        'scpc_peer_id' => 'int',
        'did' => 'int',
        'network_id' => 'int',
        'model_type' => 'string',
        'mgmt_ip_address' => 'string',
        'mgmt_subnet_mask' => 'string',
        'mgmt_gateway' => 'string',
        'lan_ip_address' => 'string',
        'lan_subnet_mask' => 'string',
        'lan_gateway' => 'string',
        'user_password' => 'string',
        'admin_password' => 'string',
        'os_password' => 'string',
        'modcod' => 'string',
        'is_scpc' => 'bool',
        'active' => 'bool',
        'tcp_compression' => 'bool',
        'udp_hdr_compression' => 'bool',
        'udp_compression' => 'bool',
        'link_encryption' => 'bool',
        'crtp' => 'bool',
        'antenna_tx_handshake' => 'bool',
        'is_mobile' => 'bool',
        'is_roaming' => 'bool',
        'rx_only' => 'bool',
        'rx_only_multicast' => 'bool',
        'local_telnet_only' => 'bool',
        'v_lan_tagging' => 'bool',
        'allow_bgp' => 'bool',
        'disable_tx_pwm' => 'bool',
        'inroute_group_id' => 'int',
        'spreading_factor' => 'int',
        'payload_size' => 'int',
        'rx_only_mc_timeout' => 'int',
        'rx_carrier_id' => 'int',
        'tx_carrier_id' => 'int',
        'tx_power' => 'double',
        'lat' => 'double',
        'lon' => 'double',
        'up_cir' => 'double',
        'up_mir' => 'double',
        'up_min' => 'double',
        'down_cir' => 'double',
        'down_mir' => 'double',
        'down_min' => 'double',
        'symbol_rate' => 'double',
        'initial_power' => 'double',
        'max_power' => 'double',
        'p1_db' => 'double',
        'obo_limit' => 'double',
        'pool_license' => 'string[]',
        'mobile' => '\Swagger\Client\Model\RemoteMobile',
        'customer' => '\Swagger\Client\Model\RemoteCustomer',
        'l2o_s' => '\Swagger\Client\Model\RemoteL2oS',
        'second_receiver' => '\Swagger\Client\Model\RemoteSecondReceiver',
        'antenna_components' => '\Swagger\Client\Model\RemoteAntennaComponents',
        'remote_qos' => '\Swagger\Client\Model\RemoteRemoteQOS',
        'custom_keys' => '\Swagger\Client\Model\RemoteCustomKeys',
        'mesh' => '\Swagger\Client\Model\RemoteMesh',
        'roaming_instances' => '\Swagger\Client\Model\RoamingInstance[]',
        'switch_ports' => '\Swagger\Client\Model\SwitchPort[]',
        'v_lans' => '\Swagger\Client\Model\VLanInfo[]',
        'discrete_ports' => '\Swagger\Client\Model\DiscretePort[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'parent_id' => 'int64',
        'sn' => 'int64',
        'scpc_peer_id' => 'int64',
        'did' => 'int64',
        'network_id' => 'int64',
        'model_type' => null,
        'mgmt_ip_address' => null,
        'mgmt_subnet_mask' => null,
        'mgmt_gateway' => null,
        'lan_ip_address' => null,
        'lan_subnet_mask' => null,
        'lan_gateway' => null,
        'user_password' => null,
        'admin_password' => null,
        'os_password' => null,
        'modcod' => null,
        'is_scpc' => null,
        'active' => null,
        'tcp_compression' => null,
        'udp_hdr_compression' => null,
        'udp_compression' => null,
        'link_encryption' => null,
        'crtp' => null,
        'antenna_tx_handshake' => null,
        'is_mobile' => null,
        'is_roaming' => null,
        'rx_only' => null,
        'rx_only_multicast' => null,
        'local_telnet_only' => null,
        'v_lan_tagging' => null,
        'allow_bgp' => null,
        'disable_tx_pwm' => null,
        'inroute_group_id' => 'int32',
        'spreading_factor' => 'int32',
        'payload_size' => 'int32',
        'rx_only_mc_timeout' => 'int32',
        'rx_carrier_id' => 'int32',
        'tx_carrier_id' => 'int32',
        'tx_power' => 'double',
        'lat' => 'double',
        'lon' => 'double',
        'up_cir' => 'double',
        'up_mir' => 'double',
        'up_min' => 'double',
        'down_cir' => 'double',
        'down_mir' => 'double',
        'down_min' => 'double',
        'symbol_rate' => 'double',
        'initial_power' => 'double',
        'max_power' => 'double',
        'p1_db' => 'double',
        'obo_limit' => 'double',
        'pool_license' => null,
        'mobile' => null,
        'customer' => null,
        'l2o_s' => null,
        'second_receiver' => null,
        'antenna_components' => null,
        'remote_qos' => null,
        'custom_keys' => null,
        'mesh' => null,
        'roaming_instances' => null,
        'switch_ports' => null,
        'v_lans' => null,
        'discrete_ports' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'ID',
        'name' => 'Name',
        'parent_id' => 'ParentID',
        'sn' => 'SN',
        'scpc_peer_id' => 'SCPCPeerID',
        'did' => 'DID',
        'network_id' => 'NetworkID',
        'model_type' => 'ModelType',
        'mgmt_ip_address' => 'MgmtIPAddress',
        'mgmt_subnet_mask' => 'MgmtSubnetMask',
        'mgmt_gateway' => 'MgmtGateway',
        'lan_ip_address' => 'LanIPAddress',
        'lan_subnet_mask' => 'LanSubnetMask',
        'lan_gateway' => 'LanGateway',
        'user_password' => 'UserPassword',
        'admin_password' => 'AdminPassword',
        'os_password' => 'OSPassword',
        'modcod' => 'MODCOD',
        'is_scpc' => 'IsSCPC',
        'active' => 'Active',
        'tcp_compression' => 'TCPCompression',
        'udp_hdr_compression' => 'UDPHdrCompression',
        'udp_compression' => 'UDPCompression',
        'link_encryption' => 'LinkEncryption',
        'crtp' => 'CRTP',
        'antenna_tx_handshake' => 'AntennaTxHandshake',
        'is_mobile' => 'IsMobile',
        'is_roaming' => 'IsRoaming',
        'rx_only' => 'RxOnly',
        'rx_only_multicast' => 'RxOnlyMulticast',
        'local_telnet_only' => 'LocalTelnetOnly',
        'v_lan_tagging' => 'VLanTagging',
        'allow_bgp' => 'AllowBGP',
        'disable_tx_pwm' => 'DisableTxPWM',
        'inroute_group_id' => 'InrouteGroupID',
        'spreading_factor' => 'SpreadingFactor',
        'payload_size' => 'PayloadSize',
        'rx_only_mc_timeout' => 'RxOnlyMCTimeout',
        'rx_carrier_id' => 'RXCarrierID',
        'tx_carrier_id' => 'TXCarrierID',
        'tx_power' => 'TXPower',
        'lat' => 'Lat',
        'lon' => 'Lon',
        'up_cir' => 'UpCIR',
        'up_mir' => 'UpMIR',
        'up_min' => 'UpMIN',
        'down_cir' => 'DownCIR',
        'down_mir' => 'DownMIR',
        'down_min' => 'DownMIN',
        'symbol_rate' => 'SymbolRate',
        'initial_power' => 'InitialPower',
        'max_power' => 'MaxPower',
        'p1_db' => 'P1DB',
        'obo_limit' => 'OBOLimit',
        'pool_license' => 'PoolLicense',
        'mobile' => 'Mobile',
        'customer' => 'Customer',
        'l2o_s' => 'L2oS',
        'second_receiver' => 'SecondReceiver',
        'antenna_components' => 'AntennaComponents',
        'remote_qos' => 'RemoteQOS',
        'custom_keys' => 'CustomKeys',
        'mesh' => 'Mesh',
        'roaming_instances' => 'RoamingInstances',
        'switch_ports' => 'SwitchPorts',
        'v_lans' => 'VLans',
        'discrete_ports' => 'DiscretePorts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'parent_id' => 'setParentId',
        'sn' => 'setSn',
        'scpc_peer_id' => 'setScpcPeerId',
        'did' => 'setDid',
        'network_id' => 'setNetworkId',
        'model_type' => 'setModelType',
        'mgmt_ip_address' => 'setMgmtIpAddress',
        'mgmt_subnet_mask' => 'setMgmtSubnetMask',
        'mgmt_gateway' => 'setMgmtGateway',
        'lan_ip_address' => 'setLanIpAddress',
        'lan_subnet_mask' => 'setLanSubnetMask',
        'lan_gateway' => 'setLanGateway',
        'user_password' => 'setUserPassword',
        'admin_password' => 'setAdminPassword',
        'os_password' => 'setOsPassword',
        'modcod' => 'setModcod',
        'is_scpc' => 'setIsScpc',
        'active' => 'setActive',
        'tcp_compression' => 'setTcpCompression',
        'udp_hdr_compression' => 'setUdpHdrCompression',
        'udp_compression' => 'setUdpCompression',
        'link_encryption' => 'setLinkEncryption',
        'crtp' => 'setCrtp',
        'antenna_tx_handshake' => 'setAntennaTxHandshake',
        'is_mobile' => 'setIsMobile',
        'is_roaming' => 'setIsRoaming',
        'rx_only' => 'setRxOnly',
        'rx_only_multicast' => 'setRxOnlyMulticast',
        'local_telnet_only' => 'setLocalTelnetOnly',
        'v_lan_tagging' => 'setVLanTagging',
        'allow_bgp' => 'setAllowBgp',
        'disable_tx_pwm' => 'setDisableTxPwm',
        'inroute_group_id' => 'setInrouteGroupId',
        'spreading_factor' => 'setSpreadingFactor',
        'payload_size' => 'setPayloadSize',
        'rx_only_mc_timeout' => 'setRxOnlyMcTimeout',
        'rx_carrier_id' => 'setRxCarrierId',
        'tx_carrier_id' => 'setTxCarrierId',
        'tx_power' => 'setTxPower',
        'lat' => 'setLat',
        'lon' => 'setLon',
        'up_cir' => 'setUpCir',
        'up_mir' => 'setUpMir',
        'up_min' => 'setUpMin',
        'down_cir' => 'setDownCir',
        'down_mir' => 'setDownMir',
        'down_min' => 'setDownMin',
        'symbol_rate' => 'setSymbolRate',
        'initial_power' => 'setInitialPower',
        'max_power' => 'setMaxPower',
        'p1_db' => 'setP1Db',
        'obo_limit' => 'setOboLimit',
        'pool_license' => 'setPoolLicense',
        'mobile' => 'setMobile',
        'customer' => 'setCustomer',
        'l2o_s' => 'setL2oS',
        'second_receiver' => 'setSecondReceiver',
        'antenna_components' => 'setAntennaComponents',
        'remote_qos' => 'setRemoteQos',
        'custom_keys' => 'setCustomKeys',
        'mesh' => 'setMesh',
        'roaming_instances' => 'setRoamingInstances',
        'switch_ports' => 'setSwitchPorts',
        'v_lans' => 'setVLans',
        'discrete_ports' => 'setDiscretePorts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'parent_id' => 'getParentId',
        'sn' => 'getSn',
        'scpc_peer_id' => 'getScpcPeerId',
        'did' => 'getDid',
        'network_id' => 'getNetworkId',
        'model_type' => 'getModelType',
        'mgmt_ip_address' => 'getMgmtIpAddress',
        'mgmt_subnet_mask' => 'getMgmtSubnetMask',
        'mgmt_gateway' => 'getMgmtGateway',
        'lan_ip_address' => 'getLanIpAddress',
        'lan_subnet_mask' => 'getLanSubnetMask',
        'lan_gateway' => 'getLanGateway',
        'user_password' => 'getUserPassword',
        'admin_password' => 'getAdminPassword',
        'os_password' => 'getOsPassword',
        'modcod' => 'getModcod',
        'is_scpc' => 'getIsScpc',
        'active' => 'getActive',
        'tcp_compression' => 'getTcpCompression',
        'udp_hdr_compression' => 'getUdpHdrCompression',
        'udp_compression' => 'getUdpCompression',
        'link_encryption' => 'getLinkEncryption',
        'crtp' => 'getCrtp',
        'antenna_tx_handshake' => 'getAntennaTxHandshake',
        'is_mobile' => 'getIsMobile',
        'is_roaming' => 'getIsRoaming',
        'rx_only' => 'getRxOnly',
        'rx_only_multicast' => 'getRxOnlyMulticast',
        'local_telnet_only' => 'getLocalTelnetOnly',
        'v_lan_tagging' => 'getVLanTagging',
        'allow_bgp' => 'getAllowBgp',
        'disable_tx_pwm' => 'getDisableTxPwm',
        'inroute_group_id' => 'getInrouteGroupId',
        'spreading_factor' => 'getSpreadingFactor',
        'payload_size' => 'getPayloadSize',
        'rx_only_mc_timeout' => 'getRxOnlyMcTimeout',
        'rx_carrier_id' => 'getRxCarrierId',
        'tx_carrier_id' => 'getTxCarrierId',
        'tx_power' => 'getTxPower',
        'lat' => 'getLat',
        'lon' => 'getLon',
        'up_cir' => 'getUpCir',
        'up_mir' => 'getUpMir',
        'up_min' => 'getUpMin',
        'down_cir' => 'getDownCir',
        'down_mir' => 'getDownMir',
        'down_min' => 'getDownMin',
        'symbol_rate' => 'getSymbolRate',
        'initial_power' => 'getInitialPower',
        'max_power' => 'getMaxPower',
        'p1_db' => 'getP1Db',
        'obo_limit' => 'getOboLimit',
        'pool_license' => 'getPoolLicense',
        'mobile' => 'getMobile',
        'customer' => 'getCustomer',
        'l2o_s' => 'getL2oS',
        'second_receiver' => 'getSecondReceiver',
        'antenna_components' => 'getAntennaComponents',
        'remote_qos' => 'getRemoteQos',
        'custom_keys' => 'getCustomKeys',
        'mesh' => 'getMesh',
        'roaming_instances' => 'getRoamingInstances',
        'switch_ports' => 'getSwitchPorts',
        'v_lans' => 'getVLans',
        'discrete_ports' => 'getDiscretePorts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['parent_id'] = isset($data['parent_id']) ? $data['parent_id'] : null;
        $this->container['sn'] = isset($data['sn']) ? $data['sn'] : null;
        $this->container['scpc_peer_id'] = isset($data['scpc_peer_id']) ? $data['scpc_peer_id'] : null;
        $this->container['did'] = isset($data['did']) ? $data['did'] : null;
        $this->container['network_id'] = isset($data['network_id']) ? $data['network_id'] : null;
        $this->container['model_type'] = isset($data['model_type']) ? $data['model_type'] : null;
        $this->container['mgmt_ip_address'] = isset($data['mgmt_ip_address']) ? $data['mgmt_ip_address'] : null;
        $this->container['mgmt_subnet_mask'] = isset($data['mgmt_subnet_mask']) ? $data['mgmt_subnet_mask'] : null;
        $this->container['mgmt_gateway'] = isset($data['mgmt_gateway']) ? $data['mgmt_gateway'] : null;
        $this->container['lan_ip_address'] = isset($data['lan_ip_address']) ? $data['lan_ip_address'] : null;
        $this->container['lan_subnet_mask'] = isset($data['lan_subnet_mask']) ? $data['lan_subnet_mask'] : null;
        $this->container['lan_gateway'] = isset($data['lan_gateway']) ? $data['lan_gateway'] : null;
        $this->container['user_password'] = isset($data['user_password']) ? $data['user_password'] : null;
        $this->container['admin_password'] = isset($data['admin_password']) ? $data['admin_password'] : null;
        $this->container['os_password'] = isset($data['os_password']) ? $data['os_password'] : null;
        $this->container['modcod'] = isset($data['modcod']) ? $data['modcod'] : null;
        $this->container['is_scpc'] = isset($data['is_scpc']) ? $data['is_scpc'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['tcp_compression'] = isset($data['tcp_compression']) ? $data['tcp_compression'] : null;
        $this->container['udp_hdr_compression'] = isset($data['udp_hdr_compression']) ? $data['udp_hdr_compression'] : null;
        $this->container['udp_compression'] = isset($data['udp_compression']) ? $data['udp_compression'] : null;
        $this->container['link_encryption'] = isset($data['link_encryption']) ? $data['link_encryption'] : null;
        $this->container['crtp'] = isset($data['crtp']) ? $data['crtp'] : null;
        $this->container['antenna_tx_handshake'] = isset($data['antenna_tx_handshake']) ? $data['antenna_tx_handshake'] : null;
        $this->container['is_mobile'] = isset($data['is_mobile']) ? $data['is_mobile'] : null;
        $this->container['is_roaming'] = isset($data['is_roaming']) ? $data['is_roaming'] : null;
        $this->container['rx_only'] = isset($data['rx_only']) ? $data['rx_only'] : null;
        $this->container['rx_only_multicast'] = isset($data['rx_only_multicast']) ? $data['rx_only_multicast'] : null;
        $this->container['local_telnet_only'] = isset($data['local_telnet_only']) ? $data['local_telnet_only'] : null;
        $this->container['v_lan_tagging'] = isset($data['v_lan_tagging']) ? $data['v_lan_tagging'] : null;
        $this->container['allow_bgp'] = isset($data['allow_bgp']) ? $data['allow_bgp'] : null;
        $this->container['disable_tx_pwm'] = isset($data['disable_tx_pwm']) ? $data['disable_tx_pwm'] : null;
        $this->container['inroute_group_id'] = isset($data['inroute_group_id']) ? $data['inroute_group_id'] : null;
        $this->container['spreading_factor'] = isset($data['spreading_factor']) ? $data['spreading_factor'] : null;
        $this->container['payload_size'] = isset($data['payload_size']) ? $data['payload_size'] : null;
        $this->container['rx_only_mc_timeout'] = isset($data['rx_only_mc_timeout']) ? $data['rx_only_mc_timeout'] : null;
        $this->container['rx_carrier_id'] = isset($data['rx_carrier_id']) ? $data['rx_carrier_id'] : null;
        $this->container['tx_carrier_id'] = isset($data['tx_carrier_id']) ? $data['tx_carrier_id'] : null;
        $this->container['tx_power'] = isset($data['tx_power']) ? $data['tx_power'] : null;
        $this->container['lat'] = isset($data['lat']) ? $data['lat'] : null;
        $this->container['lon'] = isset($data['lon']) ? $data['lon'] : null;
        $this->container['up_cir'] = isset($data['up_cir']) ? $data['up_cir'] : null;
        $this->container['up_mir'] = isset($data['up_mir']) ? $data['up_mir'] : null;
        $this->container['up_min'] = isset($data['up_min']) ? $data['up_min'] : null;
        $this->container['down_cir'] = isset($data['down_cir']) ? $data['down_cir'] : null;
        $this->container['down_mir'] = isset($data['down_mir']) ? $data['down_mir'] : null;
        $this->container['down_min'] = isset($data['down_min']) ? $data['down_min'] : null;
        $this->container['symbol_rate'] = isset($data['symbol_rate']) ? $data['symbol_rate'] : null;
        $this->container['initial_power'] = isset($data['initial_power']) ? $data['initial_power'] : null;
        $this->container['max_power'] = isset($data['max_power']) ? $data['max_power'] : null;
        $this->container['p1_db'] = isset($data['p1_db']) ? $data['p1_db'] : null;
        $this->container['obo_limit'] = isset($data['obo_limit']) ? $data['obo_limit'] : null;
        $this->container['pool_license'] = isset($data['pool_license']) ? $data['pool_license'] : null;
        $this->container['mobile'] = isset($data['mobile']) ? $data['mobile'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['l2o_s'] = isset($data['l2o_s']) ? $data['l2o_s'] : null;
        $this->container['second_receiver'] = isset($data['second_receiver']) ? $data['second_receiver'] : null;
        $this->container['antenna_components'] = isset($data['antenna_components']) ? $data['antenna_components'] : null;
        $this->container['remote_qos'] = isset($data['remote_qos']) ? $data['remote_qos'] : null;
        $this->container['custom_keys'] = isset($data['custom_keys']) ? $data['custom_keys'] : null;
        $this->container['mesh'] = isset($data['mesh']) ? $data['mesh'] : null;
        $this->container['roaming_instances'] = isset($data['roaming_instances']) ? $data['roaming_instances'] : null;
        $this->container['switch_ports'] = isset($data['switch_ports']) ? $data['switch_ports'] : null;
        $this->container['v_lans'] = isset($data['v_lans']) ? $data['v_lans'] : null;
        $this->container['discrete_ports'] = isset($data['discrete_ports']) ? $data['discrete_ports'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Internal ID of the Remote
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the Remote
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return int
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param int $parent_id parent_id
     *
     * @return $this
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets sn
     *
     * @return int
     */
    public function getSn()
    {
        return $this->container['sn'];
    }

    /**
     * Sets sn
     *
     * @param int $sn sn
     *
     * @return $this
     */
    public function setSn($sn)
    {
        $this->container['sn'] = $sn;

        return $this;
    }

    /**
     * Gets scpc_peer_id
     *
     * @return int
     */
    public function getScpcPeerId()
    {
        return $this->container['scpc_peer_id'];
    }

    /**
     * Sets scpc_peer_id
     *
     * @param int $scpc_peer_id scpc_peer_id
     *
     * @return $this
     */
    public function setScpcPeerId($scpc_peer_id)
    {
        $this->container['scpc_peer_id'] = $scpc_peer_id;

        return $this;
    }

    /**
     * Gets did
     *
     * @return int
     */
    public function getDid()
    {
        return $this->container['did'];
    }

    /**
     * Sets did
     *
     * @param int $did did
     *
     * @return $this
     */
    public function setDid($did)
    {
        $this->container['did'] = $did;

        return $this;
    }

    /**
     * Gets network_id
     *
     * @return int
     */
    public function getNetworkId()
    {
        return $this->container['network_id'];
    }

    /**
     * Sets network_id
     *
     * @param int $network_id network_id
     *
     * @return $this
     */
    public function setNetworkId($network_id)
    {
        $this->container['network_id'] = $network_id;

        return $this;
    }

    /**
     * Gets model_type
     *
     * @return string
     */
    public function getModelType()
    {
        return $this->container['model_type'];
    }

    /**
     * Sets model_type
     *
     * @param string $model_type model_type
     *
     * @return $this
     */
    public function setModelType($model_type)
    {
        $this->container['model_type'] = $model_type;

        return $this;
    }

    /**
     * Gets mgmt_ip_address
     *
     * @return string
     */
    public function getMgmtIpAddress()
    {
        return $this->container['mgmt_ip_address'];
    }

    /**
     * Sets mgmt_ip_address
     *
     * @param string $mgmt_ip_address mgmt_ip_address
     *
     * @return $this
     */
    public function setMgmtIpAddress($mgmt_ip_address)
    {
        $this->container['mgmt_ip_address'] = $mgmt_ip_address;

        return $this;
    }

    /**
     * Gets mgmt_subnet_mask
     *
     * @return string
     */
    public function getMgmtSubnetMask()
    {
        return $this->container['mgmt_subnet_mask'];
    }

    /**
     * Sets mgmt_subnet_mask
     *
     * @param string $mgmt_subnet_mask mgmt_subnet_mask
     *
     * @return $this
     */
    public function setMgmtSubnetMask($mgmt_subnet_mask)
    {
        $this->container['mgmt_subnet_mask'] = $mgmt_subnet_mask;

        return $this;
    }

    /**
     * Gets mgmt_gateway
     *
     * @return string
     */
    public function getMgmtGateway()
    {
        return $this->container['mgmt_gateway'];
    }

    /**
     * Sets mgmt_gateway
     *
     * @param string $mgmt_gateway mgmt_gateway
     *
     * @return $this
     */
    public function setMgmtGateway($mgmt_gateway)
    {
        $this->container['mgmt_gateway'] = $mgmt_gateway;

        return $this;
    }

    /**
     * Gets lan_ip_address
     *
     * @return string
     */
    public function getLanIpAddress()
    {
        return $this->container['lan_ip_address'];
    }

    /**
     * Sets lan_ip_address
     *
     * @param string $lan_ip_address lan_ip_address
     *
     * @return $this
     */
    public function setLanIpAddress($lan_ip_address)
    {
        $this->container['lan_ip_address'] = $lan_ip_address;

        return $this;
    }

    /**
     * Gets lan_subnet_mask
     *
     * @return string
     */
    public function getLanSubnetMask()
    {
        return $this->container['lan_subnet_mask'];
    }

    /**
     * Sets lan_subnet_mask
     *
     * @param string $lan_subnet_mask lan_subnet_mask
     *
     * @return $this
     */
    public function setLanSubnetMask($lan_subnet_mask)
    {
        $this->container['lan_subnet_mask'] = $lan_subnet_mask;

        return $this;
    }

    /**
     * Gets lan_gateway
     *
     * @return string
     */
    public function getLanGateway()
    {
        return $this->container['lan_gateway'];
    }

    /**
     * Sets lan_gateway
     *
     * @param string $lan_gateway lan_gateway
     *
     * @return $this
     */
    public function setLanGateway($lan_gateway)
    {
        $this->container['lan_gateway'] = $lan_gateway;

        return $this;
    }

    /**
     * Gets user_password
     *
     * @return string
     */
    public function getUserPassword()
    {
        return $this->container['user_password'];
    }

    /**
     * Sets user_password
     *
     * @param string $user_password user_password
     *
     * @return $this
     */
    public function setUserPassword($user_password)
    {
        $this->container['user_password'] = $user_password;

        return $this;
    }

    /**
     * Gets admin_password
     *
     * @return string
     */
    public function getAdminPassword()
    {
        return $this->container['admin_password'];
    }

    /**
     * Sets admin_password
     *
     * @param string $admin_password admin_password
     *
     * @return $this
     */
    public function setAdminPassword($admin_password)
    {
        $this->container['admin_password'] = $admin_password;

        return $this;
    }

    /**
     * Gets os_password
     *
     * @return string
     */
    public function getOsPassword()
    {
        return $this->container['os_password'];
    }

    /**
     * Sets os_password
     *
     * @param string $os_password os_password
     *
     * @return $this
     */
    public function setOsPassword($os_password)
    {
        $this->container['os_password'] = $os_password;

        return $this;
    }

    /**
     * Gets modcod
     *
     * @return string
     */
    public function getModcod()
    {
        return $this->container['modcod'];
    }

    /**
     * Sets modcod
     *
     * @param string $modcod modcod
     *
     * @return $this
     */
    public function setModcod($modcod)
    {
        $this->container['modcod'] = $modcod;

        return $this;
    }

    /**
     * Gets is_scpc
     *
     * @return bool
     */
    public function getIsScpc()
    {
        return $this->container['is_scpc'];
    }

    /**
     * Sets is_scpc
     *
     * @param bool $is_scpc is_scpc
     *
     * @return $this
     */
    public function setIsScpc($is_scpc)
    {
        $this->container['is_scpc'] = $is_scpc;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets tcp_compression
     *
     * @return bool
     */
    public function getTcpCompression()
    {
        return $this->container['tcp_compression'];
    }

    /**
     * Sets tcp_compression
     *
     * @param bool $tcp_compression tcp_compression
     *
     * @return $this
     */
    public function setTcpCompression($tcp_compression)
    {
        $this->container['tcp_compression'] = $tcp_compression;

        return $this;
    }

    /**
     * Gets udp_hdr_compression
     *
     * @return bool
     */
    public function getUdpHdrCompression()
    {
        return $this->container['udp_hdr_compression'];
    }

    /**
     * Sets udp_hdr_compression
     *
     * @param bool $udp_hdr_compression udp_hdr_compression
     *
     * @return $this
     */
    public function setUdpHdrCompression($udp_hdr_compression)
    {
        $this->container['udp_hdr_compression'] = $udp_hdr_compression;

        return $this;
    }

    /**
     * Gets udp_compression
     *
     * @return bool
     */
    public function getUdpCompression()
    {
        return $this->container['udp_compression'];
    }

    /**
     * Sets udp_compression
     *
     * @param bool $udp_compression udp_compression
     *
     * @return $this
     */
    public function setUdpCompression($udp_compression)
    {
        $this->container['udp_compression'] = $udp_compression;

        return $this;
    }

    /**
     * Gets link_encryption
     *
     * @return bool
     */
    public function getLinkEncryption()
    {
        return $this->container['link_encryption'];
    }

    /**
     * Sets link_encryption
     *
     * @param bool $link_encryption link_encryption
     *
     * @return $this
     */
    public function setLinkEncryption($link_encryption)
    {
        $this->container['link_encryption'] = $link_encryption;

        return $this;
    }

    /**
     * Gets crtp
     *
     * @return bool
     */
    public function getCrtp()
    {
        return $this->container['crtp'];
    }

    /**
     * Sets crtp
     *
     * @param bool $crtp crtp
     *
     * @return $this
     */
    public function setCrtp($crtp)
    {
        $this->container['crtp'] = $crtp;

        return $this;
    }

    /**
     * Gets antenna_tx_handshake
     *
     * @return bool
     */
    public function getAntennaTxHandshake()
    {
        return $this->container['antenna_tx_handshake'];
    }

    /**
     * Sets antenna_tx_handshake
     *
     * @param bool $antenna_tx_handshake antenna_tx_handshake
     *
     * @return $this
     */
    public function setAntennaTxHandshake($antenna_tx_handshake)
    {
        $this->container['antenna_tx_handshake'] = $antenna_tx_handshake;

        return $this;
    }

    /**
     * Gets is_mobile
     *
     * @return bool
     */
    public function getIsMobile()
    {
        return $this->container['is_mobile'];
    }

    /**
     * Sets is_mobile
     *
     * @param bool $is_mobile is_mobile
     *
     * @return $this
     */
    public function setIsMobile($is_mobile)
    {
        $this->container['is_mobile'] = $is_mobile;

        return $this;
    }

    /**
     * Gets is_roaming
     *
     * @return bool
     */
    public function getIsRoaming()
    {
        return $this->container['is_roaming'];
    }

    /**
     * Sets is_roaming
     *
     * @param bool $is_roaming is_roaming
     *
     * @return $this
     */
    public function setIsRoaming($is_roaming)
    {
        $this->container['is_roaming'] = $is_roaming;

        return $this;
    }

    /**
     * Gets rx_only
     *
     * @return bool
     */
    public function getRxOnly()
    {
        return $this->container['rx_only'];
    }

    /**
     * Sets rx_only
     *
     * @param bool $rx_only rx_only
     *
     * @return $this
     */
    public function setRxOnly($rx_only)
    {
        $this->container['rx_only'] = $rx_only;

        return $this;
    }

    /**
     * Gets rx_only_multicast
     *
     * @return bool
     */
    public function getRxOnlyMulticast()
    {
        return $this->container['rx_only_multicast'];
    }

    /**
     * Sets rx_only_multicast
     *
     * @param bool $rx_only_multicast rx_only_multicast
     *
     * @return $this
     */
    public function setRxOnlyMulticast($rx_only_multicast)
    {
        $this->container['rx_only_multicast'] = $rx_only_multicast;

        return $this;
    }

    /**
     * Gets local_telnet_only
     *
     * @return bool
     */
    public function getLocalTelnetOnly()
    {
        return $this->container['local_telnet_only'];
    }

    /**
     * Sets local_telnet_only
     *
     * @param bool $local_telnet_only local_telnet_only
     *
     * @return $this
     */
    public function setLocalTelnetOnly($local_telnet_only)
    {
        $this->container['local_telnet_only'] = $local_telnet_only;

        return $this;
    }

    /**
     * Gets v_lan_tagging
     *
     * @return bool
     */
    public function getVLanTagging()
    {
        return $this->container['v_lan_tagging'];
    }

    /**
     * Sets v_lan_tagging
     *
     * @param bool $v_lan_tagging v_lan_tagging
     *
     * @return $this
     */
    public function setVLanTagging($v_lan_tagging)
    {
        $this->container['v_lan_tagging'] = $v_lan_tagging;

        return $this;
    }

    /**
     * Gets allow_bgp
     *
     * @return bool
     */
    public function getAllowBgp()
    {
        return $this->container['allow_bgp'];
    }

    /**
     * Sets allow_bgp
     *
     * @param bool $allow_bgp allow_bgp
     *
     * @return $this
     */
    public function setAllowBgp($allow_bgp)
    {
        $this->container['allow_bgp'] = $allow_bgp;

        return $this;
    }

    /**
     * Gets disable_tx_pwm
     *
     * @return bool
     */
    public function getDisableTxPwm()
    {
        return $this->container['disable_tx_pwm'];
    }

    /**
     * Sets disable_tx_pwm
     *
     * @param bool $disable_tx_pwm disable_tx_pwm
     *
     * @return $this
     */
    public function setDisableTxPwm($disable_tx_pwm)
    {
        $this->container['disable_tx_pwm'] = $disable_tx_pwm;

        return $this;
    }

    /**
     * Gets inroute_group_id
     *
     * @return int
     */
    public function getInrouteGroupId()
    {
        return $this->container['inroute_group_id'];
    }

    /**
     * Sets inroute_group_id
     *
     * @param int $inroute_group_id inroute_group_id
     *
     * @return $this
     */
    public function setInrouteGroupId($inroute_group_id)
    {
        $this->container['inroute_group_id'] = $inroute_group_id;

        return $this;
    }

    /**
     * Gets spreading_factor
     *
     * @return int
     */
    public function getSpreadingFactor()
    {
        return $this->container['spreading_factor'];
    }

    /**
     * Sets spreading_factor
     *
     * @param int $spreading_factor spreading_factor
     *
     * @return $this
     */
    public function setSpreadingFactor($spreading_factor)
    {
        $this->container['spreading_factor'] = $spreading_factor;

        return $this;
    }

    /**
     * Gets payload_size
     *
     * @return int
     */
    public function getPayloadSize()
    {
        return $this->container['payload_size'];
    }

    /**
     * Sets payload_size
     *
     * @param int $payload_size payload_size
     *
     * @return $this
     */
    public function setPayloadSize($payload_size)
    {
        $this->container['payload_size'] = $payload_size;

        return $this;
    }

    /**
     * Gets rx_only_mc_timeout
     *
     * @return int
     */
    public function getRxOnlyMcTimeout()
    {
        return $this->container['rx_only_mc_timeout'];
    }

    /**
     * Sets rx_only_mc_timeout
     *
     * @param int $rx_only_mc_timeout rx_only_mc_timeout
     *
     * @return $this
     */
    public function setRxOnlyMcTimeout($rx_only_mc_timeout)
    {
        $this->container['rx_only_mc_timeout'] = $rx_only_mc_timeout;

        return $this;
    }

    /**
     * Gets rx_carrier_id
     *
     * @return int
     */
    public function getRxCarrierId()
    {
        return $this->container['rx_carrier_id'];
    }

    /**
     * Sets rx_carrier_id
     *
     * @param int $rx_carrier_id rx_carrier_id
     *
     * @return $this
     */
    public function setRxCarrierId($rx_carrier_id)
    {
        $this->container['rx_carrier_id'] = $rx_carrier_id;

        return $this;
    }

    /**
     * Gets tx_carrier_id
     *
     * @return int
     */
    public function getTxCarrierId()
    {
        return $this->container['tx_carrier_id'];
    }

    /**
     * Sets tx_carrier_id
     *
     * @param int $tx_carrier_id tx_carrier_id
     *
     * @return $this
     */
    public function setTxCarrierId($tx_carrier_id)
    {
        $this->container['tx_carrier_id'] = $tx_carrier_id;

        return $this;
    }

    /**
     * Gets tx_power
     *
     * @return double
     */
    public function getTxPower()
    {
        return $this->container['tx_power'];
    }

    /**
     * Sets tx_power
     *
     * @param double $tx_power tx_power
     *
     * @return $this
     */
    public function setTxPower($tx_power)
    {
        $this->container['tx_power'] = $tx_power;

        return $this;
    }

    /**
     * Gets lat
     *
     * @return double
     */
    public function getLat()
    {
        return $this->container['lat'];
    }

    /**
     * Sets lat
     *
     * @param double $lat lat
     *
     * @return $this
     */
    public function setLat($lat)
    {
        $this->container['lat'] = $lat;

        return $this;
    }

    /**
     * Gets lon
     *
     * @return double
     */
    public function getLon()
    {
        return $this->container['lon'];
    }

    /**
     * Sets lon
     *
     * @param double $lon lon
     *
     * @return $this
     */
    public function setLon($lon)
    {
        $this->container['lon'] = $lon;

        return $this;
    }

    /**
     * Gets up_cir
     *
     * @return double
     */
    public function getUpCir()
    {
        return $this->container['up_cir'];
    }

    /**
     * Sets up_cir
     *
     * @param double $up_cir up_cir
     *
     * @return $this
     */
    public function setUpCir($up_cir)
    {
        $this->container['up_cir'] = $up_cir;

        return $this;
    }

    /**
     * Gets up_mir
     *
     * @return double
     */
    public function getUpMir()
    {
        return $this->container['up_mir'];
    }

    /**
     * Sets up_mir
     *
     * @param double $up_mir up_mir
     *
     * @return $this
     */
    public function setUpMir($up_mir)
    {
        $this->container['up_mir'] = $up_mir;

        return $this;
    }

    /**
     * Gets up_min
     *
     * @return double
     */
    public function getUpMin()
    {
        return $this->container['up_min'];
    }

    /**
     * Sets up_min
     *
     * @param double $up_min up_min
     *
     * @return $this
     */
    public function setUpMin($up_min)
    {
        $this->container['up_min'] = $up_min;

        return $this;
    }

    /**
     * Gets down_cir
     *
     * @return double
     */
    public function getDownCir()
    {
        return $this->container['down_cir'];
    }

    /**
     * Sets down_cir
     *
     * @param double $down_cir down_cir
     *
     * @return $this
     */
    public function setDownCir($down_cir)
    {
        $this->container['down_cir'] = $down_cir;

        return $this;
    }

    /**
     * Gets down_mir
     *
     * @return double
     */
    public function getDownMir()
    {
        return $this->container['down_mir'];
    }

    /**
     * Sets down_mir
     *
     * @param double $down_mir down_mir
     *
     * @return $this
     */
    public function setDownMir($down_mir)
    {
        $this->container['down_mir'] = $down_mir;

        return $this;
    }

    /**
     * Gets down_min
     *
     * @return double
     */
    public function getDownMin()
    {
        return $this->container['down_min'];
    }

    /**
     * Sets down_min
     *
     * @param double $down_min down_min
     *
     * @return $this
     */
    public function setDownMin($down_min)
    {
        $this->container['down_min'] = $down_min;

        return $this;
    }

    /**
     * Gets symbol_rate
     *
     * @return double
     */
    public function getSymbolRate()
    {
        return $this->container['symbol_rate'];
    }

    /**
     * Sets symbol_rate
     *
     * @param double $symbol_rate symbol_rate
     *
     * @return $this
     */
    public function setSymbolRate($symbol_rate)
    {
        $this->container['symbol_rate'] = $symbol_rate;

        return $this;
    }

    /**
     * Gets initial_power
     *
     * @return double
     */
    public function getInitialPower()
    {
        return $this->container['initial_power'];
    }

    /**
     * Sets initial_power
     *
     * @param double $initial_power initial_power
     *
     * @return $this
     */
    public function setInitialPower($initial_power)
    {
        $this->container['initial_power'] = $initial_power;

        return $this;
    }

    /**
     * Gets max_power
     *
     * @return double
     */
    public function getMaxPower()
    {
        return $this->container['max_power'];
    }

    /**
     * Sets max_power
     *
     * @param double $max_power max_power
     *
     * @return $this
     */
    public function setMaxPower($max_power)
    {
        $this->container['max_power'] = $max_power;

        return $this;
    }

    /**
     * Gets p1_db
     *
     * @return double
     */
    public function getP1Db()
    {
        return $this->container['p1_db'];
    }

    /**
     * Sets p1_db
     *
     * @param double $p1_db p1_db
     *
     * @return $this
     */
    public function setP1Db($p1_db)
    {
        $this->container['p1_db'] = $p1_db;

        return $this;
    }

    /**
     * Gets obo_limit
     *
     * @return double
     */
    public function getOboLimit()
    {
        return $this->container['obo_limit'];
    }

    /**
     * Sets obo_limit
     *
     * @param double $obo_limit obo_limit
     *
     * @return $this
     */
    public function setOboLimit($obo_limit)
    {
        $this->container['obo_limit'] = $obo_limit;

        return $this;
    }

    /**
     * Gets pool_license
     *
     * @return string[]
     */
    public function getPoolLicense()
    {
        return $this->container['pool_license'];
    }

    /**
     * Sets pool_license
     *
     * @param string[] $pool_license pool_license
     *
     * @return $this
     */
    public function setPoolLicense($pool_license)
    {
        $this->container['pool_license'] = $pool_license;

        return $this;
    }

    /**
     * Gets mobile
     *
     * @return \Swagger\Client\Model\RemoteMobile
     */
    public function getMobile()
    {
        return $this->container['mobile'];
    }

    /**
     * Sets mobile
     *
     * @param \Swagger\Client\Model\RemoteMobile $mobile mobile
     *
     * @return $this
     */
    public function setMobile($mobile)
    {
        $this->container['mobile'] = $mobile;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \Swagger\Client\Model\RemoteCustomer
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \Swagger\Client\Model\RemoteCustomer $customer customer
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets l2o_s
     *
     * @return \Swagger\Client\Model\RemoteL2oS
     */
    public function getL2oS()
    {
        return $this->container['l2o_s'];
    }

    /**
     * Sets l2o_s
     *
     * @param \Swagger\Client\Model\RemoteL2oS $l2o_s l2o_s
     *
     * @return $this
     */
    public function setL2oS($l2o_s)
    {
        $this->container['l2o_s'] = $l2o_s;

        return $this;
    }

    /**
     * Gets second_receiver
     *
     * @return \Swagger\Client\Model\RemoteSecondReceiver
     */
    public function getSecondReceiver()
    {
        return $this->container['second_receiver'];
    }

    /**
     * Sets second_receiver
     *
     * @param \Swagger\Client\Model\RemoteSecondReceiver $second_receiver second_receiver
     *
     * @return $this
     */
    public function setSecondReceiver($second_receiver)
    {
        $this->container['second_receiver'] = $second_receiver;

        return $this;
    }

    /**
     * Gets antenna_components
     *
     * @return \Swagger\Client\Model\RemoteAntennaComponents
     */
    public function getAntennaComponents()
    {
        return $this->container['antenna_components'];
    }

    /**
     * Sets antenna_components
     *
     * @param \Swagger\Client\Model\RemoteAntennaComponents $antenna_components antenna_components
     *
     * @return $this
     */
    public function setAntennaComponents($antenna_components)
    {
        $this->container['antenna_components'] = $antenna_components;

        return $this;
    }

    /**
     * Gets remote_qos
     *
     * @return \Swagger\Client\Model\RemoteRemoteQOS
     */
    public function getRemoteQos()
    {
        return $this->container['remote_qos'];
    }

    /**
     * Sets remote_qos
     *
     * @param \Swagger\Client\Model\RemoteRemoteQOS $remote_qos remote_qos
     *
     * @return $this
     */
    public function setRemoteQos($remote_qos)
    {
        $this->container['remote_qos'] = $remote_qos;

        return $this;
    }

    /**
     * Gets custom_keys
     *
     * @return \Swagger\Client\Model\RemoteCustomKeys
     */
    public function getCustomKeys()
    {
        return $this->container['custom_keys'];
    }

    /**
     * Sets custom_keys
     *
     * @param \Swagger\Client\Model\RemoteCustomKeys $custom_keys custom_keys
     *
     * @return $this
     */
    public function setCustomKeys($custom_keys)
    {
        $this->container['custom_keys'] = $custom_keys;

        return $this;
    }

    /**
     * Gets mesh
     *
     * @return \Swagger\Client\Model\RemoteMesh
     */
    public function getMesh()
    {
        return $this->container['mesh'];
    }

    /**
     * Sets mesh
     *
     * @param \Swagger\Client\Model\RemoteMesh $mesh mesh
     *
     * @return $this
     */
    public function setMesh($mesh)
    {
        $this->container['mesh'] = $mesh;

        return $this;
    }

    /**
     * Gets roaming_instances
     *
     * @return \Swagger\Client\Model\RoamingInstance[]
     */
    public function getRoamingInstances()
    {
        return $this->container['roaming_instances'];
    }

    /**
     * Sets roaming_instances
     *
     * @param \Swagger\Client\Model\RoamingInstance[] $roaming_instances roaming_instances
     *
     * @return $this
     */
    public function setRoamingInstances($roaming_instances)
    {
        $this->container['roaming_instances'] = $roaming_instances;

        return $this;
    }

    /**
     * Gets switch_ports
     *
     * @return \Swagger\Client\Model\SwitchPort[]
     */
    public function getSwitchPorts()
    {
        return $this->container['switch_ports'];
    }

    /**
     * Sets switch_ports
     *
     * @param \Swagger\Client\Model\SwitchPort[] $switch_ports switch_ports
     *
     * @return $this
     */
    public function setSwitchPorts($switch_ports)
    {
        $this->container['switch_ports'] = $switch_ports;

        return $this;
    }

    /**
     * Gets v_lans
     *
     * @return \Swagger\Client\Model\VLanInfo[]
     */
    public function getVLans()
    {
        return $this->container['v_lans'];
    }

    /**
     * Sets v_lans
     *
     * @param \Swagger\Client\Model\VLanInfo[] $v_lans v_lans
     *
     * @return $this
     */
    public function setVLans($v_lans)
    {
        $this->container['v_lans'] = $v_lans;

        return $this;
    }

    /**
     * Gets discrete_ports
     *
     * @return \Swagger\Client\Model\DiscretePort[]
     */
    public function getDiscretePorts()
    {
        return $this->container['discrete_ports'];
    }

    /**
     * Sets discrete_ports
     *
     * @param \Swagger\Client\Model\DiscretePort[] $discrete_ports discrete_ports
     *
     * @return $this
     */
    public function setDiscretePorts($discrete_ports)
    {
        $this->container['discrete_ports'] = $discrete_ports;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


