<?php
/**
 * DownConverter
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * iVantage API
 *
 * This is the iDirect iVantage API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DownConverter Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DownConverter implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DownConverter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'parent_id' => 'int',
        'manufacturer_id' => 'int',
        'manufacturer_pn' => 'string',
        'i_direct_pn' => 'string',
        'spectral_inversion' => 'string',
        'translation_freq' => 'double',
        'stability' => 'double',
        'odurx_dc_power' => 'bool',
        'odurx10_mhz' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'parent_id' => 'int32',
        'manufacturer_id' => 'int32',
        'manufacturer_pn' => null,
        'i_direct_pn' => null,
        'spectral_inversion' => null,
        'translation_freq' => 'double',
        'stability' => 'double',
        'odurx_dc_power' => null,
        'odurx10_mhz' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'ID',
        'name' => 'Name',
        'parent_id' => 'ParentID',
        'manufacturer_id' => 'ManufacturerID',
        'manufacturer_pn' => 'ManufacturerPN',
        'i_direct_pn' => 'iDirectPN',
        'spectral_inversion' => 'SpectralInversion',
        'translation_freq' => 'TranslationFreq',
        'stability' => 'Stability',
        'odurx_dc_power' => 'ODURxDCPower',
        'odurx10_mhz' => 'ODURx10MHz'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'parent_id' => 'setParentId',
        'manufacturer_id' => 'setManufacturerId',
        'manufacturer_pn' => 'setManufacturerPn',
        'i_direct_pn' => 'setIDirectPn',
        'spectral_inversion' => 'setSpectralInversion',
        'translation_freq' => 'setTranslationFreq',
        'stability' => 'setStability',
        'odurx_dc_power' => 'setOdurxDcPower',
        'odurx10_mhz' => 'setOdurx10Mhz'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'parent_id' => 'getParentId',
        'manufacturer_id' => 'getManufacturerId',
        'manufacturer_pn' => 'getManufacturerPn',
        'i_direct_pn' => 'getIDirectPn',
        'spectral_inversion' => 'getSpectralInversion',
        'translation_freq' => 'getTranslationFreq',
        'stability' => 'getStability',
        'odurx_dc_power' => 'getOdurxDcPower',
        'odurx10_mhz' => 'getOdurx10Mhz'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['parent_id'] = isset($data['parent_id']) ? $data['parent_id'] : null;
        $this->container['manufacturer_id'] = isset($data['manufacturer_id']) ? $data['manufacturer_id'] : null;
        $this->container['manufacturer_pn'] = isset($data['manufacturer_pn']) ? $data['manufacturer_pn'] : null;
        $this->container['i_direct_pn'] = isset($data['i_direct_pn']) ? $data['i_direct_pn'] : null;
        $this->container['spectral_inversion'] = isset($data['spectral_inversion']) ? $data['spectral_inversion'] : null;
        $this->container['translation_freq'] = isset($data['translation_freq']) ? $data['translation_freq'] : null;
        $this->container['stability'] = isset($data['stability']) ? $data['stability'] : null;
        $this->container['odurx_dc_power'] = isset($data['odurx_dc_power']) ? $data['odurx_dc_power'] : null;
        $this->container['odurx10_mhz'] = isset($data['odurx10_mhz']) ? $data['odurx10_mhz'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Internal ID of the DownConverter
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the DownConverter
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return int
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param int $parent_id parent_id
     *
     * @return $this
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets manufacturer_id
     *
     * @return int
     */
    public function getManufacturerId()
    {
        return $this->container['manufacturer_id'];
    }

    /**
     * Sets manufacturer_id
     *
     * @param int $manufacturer_id manufacturer_id
     *
     * @return $this
     */
    public function setManufacturerId($manufacturer_id)
    {
        $this->container['manufacturer_id'] = $manufacturer_id;

        return $this;
    }

    /**
     * Gets manufacturer_pn
     *
     * @return string
     */
    public function getManufacturerPn()
    {
        return $this->container['manufacturer_pn'];
    }

    /**
     * Sets manufacturer_pn
     *
     * @param string $manufacturer_pn manufacturer_pn
     *
     * @return $this
     */
    public function setManufacturerPn($manufacturer_pn)
    {
        $this->container['manufacturer_pn'] = $manufacturer_pn;

        return $this;
    }

    /**
     * Gets i_direct_pn
     *
     * @return string
     */
    public function getIDirectPn()
    {
        return $this->container['i_direct_pn'];
    }

    /**
     * Sets i_direct_pn
     *
     * @param string $i_direct_pn i_direct_pn
     *
     * @return $this
     */
    public function setIDirectPn($i_direct_pn)
    {
        $this->container['i_direct_pn'] = $i_direct_pn;

        return $this;
    }

    /**
     * Gets spectral_inversion
     *
     * @return string
     */
    public function getSpectralInversion()
    {
        return $this->container['spectral_inversion'];
    }

    /**
     * Sets spectral_inversion
     *
     * @param string $spectral_inversion spectral_inversion
     *
     * @return $this
     */
    public function setSpectralInversion($spectral_inversion)
    {
        $this->container['spectral_inversion'] = $spectral_inversion;

        return $this;
    }

    /**
     * Gets translation_freq
     *
     * @return double
     */
    public function getTranslationFreq()
    {
        return $this->container['translation_freq'];
    }

    /**
     * Sets translation_freq
     *
     * @param double $translation_freq translation_freq
     *
     * @return $this
     */
    public function setTranslationFreq($translation_freq)
    {
        $this->container['translation_freq'] = $translation_freq;

        return $this;
    }

    /**
     * Gets stability
     *
     * @return double
     */
    public function getStability()
    {
        return $this->container['stability'];
    }

    /**
     * Sets stability
     *
     * @param double $stability stability
     *
     * @return $this
     */
    public function setStability($stability)
    {
        $this->container['stability'] = $stability;

        return $this;
    }

    /**
     * Gets odurx_dc_power
     *
     * @return bool
     */
    public function getOdurxDcPower()
    {
        return $this->container['odurx_dc_power'];
    }

    /**
     * Sets odurx_dc_power
     *
     * @param bool $odurx_dc_power odurx_dc_power
     *
     * @return $this
     */
    public function setOdurxDcPower($odurx_dc_power)
    {
        $this->container['odurx_dc_power'] = $odurx_dc_power;

        return $this;
    }

    /**
     * Gets odurx10_mhz
     *
     * @return bool
     */
    public function getOdurx10Mhz()
    {
        return $this->container['odurx10_mhz'];
    }

    /**
     * Sets odurx10_mhz
     *
     * @param bool $odurx10_mhz odurx10_mhz
     *
     * @return $this
     */
    public function setOdurx10Mhz($odurx10_mhz)
    {
        $this->container['odurx10_mhz'] = $odurx10_mhz;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


