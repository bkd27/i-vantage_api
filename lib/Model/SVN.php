<?php
/**
 * SVN
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * iVantage API
 *
 * This is the iDirect iVantage API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * SVN Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SVN implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SVN';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'svn_id' => 'int',
        'local_id_sp' => 'int',
        'local_id_ce' => 'int',
        'enabled' => 'bool',
        'bgp_enabled' => 'bool',
        'l3' => '\Swagger\Client\Model\SVNL3'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'svn_id' => 'int32',
        'local_id_sp' => 'int32',
        'local_id_ce' => 'int32',
        'enabled' => null,
        'bgp_enabled' => null,
        'l3' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'svn_id' => 'SvnID',
        'local_id_sp' => 'LocalIdSp',
        'local_id_ce' => 'LocalIdCe',
        'enabled' => 'Enabled',
        'bgp_enabled' => 'BGPEnabled',
        'l3' => 'L3'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'svn_id' => 'setSvnId',
        'local_id_sp' => 'setLocalIdSp',
        'local_id_ce' => 'setLocalIdCe',
        'enabled' => 'setEnabled',
        'bgp_enabled' => 'setBgpEnabled',
        'l3' => 'setL3'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'svn_id' => 'getSvnId',
        'local_id_sp' => 'getLocalIdSp',
        'local_id_ce' => 'getLocalIdCe',
        'enabled' => 'getEnabled',
        'bgp_enabled' => 'getBgpEnabled',
        'l3' => 'getL3'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['svn_id'] = isset($data['svn_id']) ? $data['svn_id'] : null;
        $this->container['local_id_sp'] = isset($data['local_id_sp']) ? $data['local_id_sp'] : null;
        $this->container['local_id_ce'] = isset($data['local_id_ce']) ? $data['local_id_ce'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['bgp_enabled'] = isset($data['bgp_enabled']) ? $data['bgp_enabled'] : null;
        $this->container['l3'] = isset($data['l3']) ? $data['l3'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets svn_id
     * @return int
     */
    public function getSvnId()
    {
        return $this->container['svn_id'];
    }

    /**
     * Sets svn_id
     * @param int $svn_id
     * @return $this
     */
    public function setSvnId($svn_id)
    {
        $this->container['svn_id'] = $svn_id;

        return $this;
    }

    /**
     * Gets local_id_sp
     * @return int
     */
    public function getLocalIdSp()
    {
        return $this->container['local_id_sp'];
    }

    /**
     * Sets local_id_sp
     * @param int $local_id_sp
     * @return $this
     */
    public function setLocalIdSp($local_id_sp)
    {
        $this->container['local_id_sp'] = $local_id_sp;

        return $this;
    }

    /**
     * Gets local_id_ce
     * @return int
     */
    public function getLocalIdCe()
    {
        return $this->container['local_id_ce'];
    }

    /**
     * Sets local_id_ce
     * @param int $local_id_ce
     * @return $this
     */
    public function setLocalIdCe($local_id_ce)
    {
        $this->container['local_id_ce'] = $local_id_ce;

        return $this;
    }

    /**
     * Gets enabled
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     * @param bool $enabled
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets bgp_enabled
     * @return bool
     */
    public function getBgpEnabled()
    {
        return $this->container['bgp_enabled'];
    }

    /**
     * Sets bgp_enabled
     * @param bool $bgp_enabled
     * @return $this
     */
    public function setBgpEnabled($bgp_enabled)
    {
        $this->container['bgp_enabled'] = $bgp_enabled;

        return $this;
    }

    /**
     * Gets l3
     * @return \Swagger\Client\Model\SVNL3
     */
    public function getL3()
    {
        return $this->container['l3'];
    }

    /**
     * Sets l3
     * @param \Swagger\Client\Model\SVNL3 $l3
     * @return $this
     */
    public function setL3($l3)
    {
        $this->container['l3'] = $l3;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


