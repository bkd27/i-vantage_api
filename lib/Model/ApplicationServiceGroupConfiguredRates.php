<?php
/**
 * ApplicationServiceGroupConfiguredRates
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * iVantage API
 *
 * This is the iDirect iVantage API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ApplicationServiceGroupConfiguredRates Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ApplicationServiceGroupConfiguredRates implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ApplicationServiceGroup_ConfiguredRates';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cost' => 'double',
        'mi_rkbps' => 'double',
        'ci_rkbps' => 'double',
        'enable_mir' => 'bool',
        'enable_cir' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cost' => 'double',
        'mi_rkbps' => 'double',
        'ci_rkbps' => 'double',
        'enable_mir' => null,
        'enable_cir' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cost' => 'Cost',
        'mi_rkbps' => 'MIRkbps',
        'ci_rkbps' => 'CIRkbps',
        'enable_mir' => 'EnableMIR',
        'enable_cir' => 'EnableCIR'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cost' => 'setCost',
        'mi_rkbps' => 'setMiRkbps',
        'ci_rkbps' => 'setCiRkbps',
        'enable_mir' => 'setEnableMir',
        'enable_cir' => 'setEnableCir'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cost' => 'getCost',
        'mi_rkbps' => 'getMiRkbps',
        'ci_rkbps' => 'getCiRkbps',
        'enable_mir' => 'getEnableMir',
        'enable_cir' => 'getEnableCir'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cost'] = isset($data['cost']) ? $data['cost'] : null;
        $this->container['mi_rkbps'] = isset($data['mi_rkbps']) ? $data['mi_rkbps'] : null;
        $this->container['ci_rkbps'] = isset($data['ci_rkbps']) ? $data['ci_rkbps'] : null;
        $this->container['enable_mir'] = isset($data['enable_mir']) ? $data['enable_mir'] : null;
        $this->container['enable_cir'] = isset($data['enable_cir']) ? $data['enable_cir'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cost
     *
     * @return double
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param double $cost cost
     *
     * @return $this
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets mi_rkbps
     *
     * @return double
     */
    public function getMiRkbps()
    {
        return $this->container['mi_rkbps'];
    }

    /**
     * Sets mi_rkbps
     *
     * @param double $mi_rkbps mi_rkbps
     *
     * @return $this
     */
    public function setMiRkbps($mi_rkbps)
    {
        $this->container['mi_rkbps'] = $mi_rkbps;

        return $this;
    }

    /**
     * Gets ci_rkbps
     *
     * @return double
     */
    public function getCiRkbps()
    {
        return $this->container['ci_rkbps'];
    }

    /**
     * Sets ci_rkbps
     *
     * @param double $ci_rkbps ci_rkbps
     *
     * @return $this
     */
    public function setCiRkbps($ci_rkbps)
    {
        $this->container['ci_rkbps'] = $ci_rkbps;

        return $this;
    }

    /**
     * Gets enable_mir
     *
     * @return bool
     */
    public function getEnableMir()
    {
        return $this->container['enable_mir'];
    }

    /**
     * Sets enable_mir
     *
     * @param bool $enable_mir enable_mir
     *
     * @return $this
     */
    public function setEnableMir($enable_mir)
    {
        $this->container['enable_mir'] = $enable_mir;

        return $this;
    }

    /**
     * Gets enable_cir
     *
     * @return bool
     */
    public function getEnableCir()
    {
        return $this->container['enable_cir'];
    }

    /**
     * Sets enable_cir
     *
     * @param bool $enable_cir enable_cir
     *
     * @return $this
     */
    public function setEnableCir($enable_cir)
    {
        $this->container['enable_cir'] = $enable_cir;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


