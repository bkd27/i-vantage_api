<?php
/**
 * SwitchPort
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * iVantage API
 *
 * This is the iDirect iVantage API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SwitchPort Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SwitchPort implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SwitchPort';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'port_number' => 'int',
        'v_lan_ids' => 'int[]',
        'auto_negotiation' => 'bool',
        'speed100_mbps' => 'bool',
        'full_duplex' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'port_number' => 'int64',
        'v_lan_ids' => 'int32',
        'auto_negotiation' => null,
        'speed100_mbps' => null,
        'full_duplex' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'port_number' => 'PortNumber',
        'v_lan_ids' => 'VLanIDs',
        'auto_negotiation' => 'AutoNegotiation',
        'speed100_mbps' => 'Speed100Mbps',
        'full_duplex' => 'FullDuplex'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'port_number' => 'setPortNumber',
        'v_lan_ids' => 'setVLanIds',
        'auto_negotiation' => 'setAutoNegotiation',
        'speed100_mbps' => 'setSpeed100Mbps',
        'full_duplex' => 'setFullDuplex'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'port_number' => 'getPortNumber',
        'v_lan_ids' => 'getVLanIds',
        'auto_negotiation' => 'getAutoNegotiation',
        'speed100_mbps' => 'getSpeed100Mbps',
        'full_duplex' => 'getFullDuplex'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['port_number'] = isset($data['port_number']) ? $data['port_number'] : null;
        $this->container['v_lan_ids'] = isset($data['v_lan_ids']) ? $data['v_lan_ids'] : null;
        $this->container['auto_negotiation'] = isset($data['auto_negotiation']) ? $data['auto_negotiation'] : null;
        $this->container['speed100_mbps'] = isset($data['speed100_mbps']) ? $data['speed100_mbps'] : null;
        $this->container['full_duplex'] = isset($data['full_duplex']) ? $data['full_duplex'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets port_number
     *
     * @return int
     */
    public function getPortNumber()
    {
        return $this->container['port_number'];
    }

    /**
     * Sets port_number
     *
     * @param int $port_number port_number
     *
     * @return $this
     */
    public function setPortNumber($port_number)
    {
        $this->container['port_number'] = $port_number;

        return $this;
    }

    /**
     * Gets v_lan_ids
     *
     * @return int[]
     */
    public function getVLanIds()
    {
        return $this->container['v_lan_ids'];
    }

    /**
     * Sets v_lan_ids
     *
     * @param int[] $v_lan_ids v_lan_ids
     *
     * @return $this
     */
    public function setVLanIds($v_lan_ids)
    {
        $this->container['v_lan_ids'] = $v_lan_ids;

        return $this;
    }

    /**
     * Gets auto_negotiation
     *
     * @return bool
     */
    public function getAutoNegotiation()
    {
        return $this->container['auto_negotiation'];
    }

    /**
     * Sets auto_negotiation
     *
     * @param bool $auto_negotiation auto_negotiation
     *
     * @return $this
     */
    public function setAutoNegotiation($auto_negotiation)
    {
        $this->container['auto_negotiation'] = $auto_negotiation;

        return $this;
    }

    /**
     * Gets speed100_mbps
     *
     * @return bool
     */
    public function getSpeed100Mbps()
    {
        return $this->container['speed100_mbps'];
    }

    /**
     * Sets speed100_mbps
     *
     * @param bool $speed100_mbps speed100_mbps
     *
     * @return $this
     */
    public function setSpeed100Mbps($speed100_mbps)
    {
        $this->container['speed100_mbps'] = $speed100_mbps;

        return $this;
    }

    /**
     * Gets full_duplex
     *
     * @return bool
     */
    public function getFullDuplex()
    {
        return $this->container['full_duplex'];
    }

    /**
     * Sets full_duplex
     *
     * @param bool $full_duplex full_duplex
     *
     * @return $this
     */
    public function setFullDuplex($full_duplex)
    {
        $this->container['full_duplex'] = $full_duplex;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


