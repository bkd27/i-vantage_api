<?php
/**
 * VLanInfoDNS
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * iVantage API
 *
 * This is the iDirect iVantage API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * VLanInfoDNS Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class VLanInfoDNS implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'VLanInfo_DNS';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'enabled' => 'bool',
        'primary_name' => 'string',
        'primary_addr' => 'string',
        'secondary_name' => 'string',
        'secondary_addr' => 'string',
        'cache_size' => 'int',
        'fwd_q_size' => 'int',
        'fwd_timeout' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'enabled' => null,
        'primary_name' => null,
        'primary_addr' => null,
        'secondary_name' => null,
        'secondary_addr' => null,
        'cache_size' => 'int64',
        'fwd_q_size' => 'int64',
        'fwd_timeout' => 'int64'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'enabled' => 'Enabled',
        'primary_name' => 'PrimaryName',
        'primary_addr' => 'PrimaryAddr',
        'secondary_name' => 'SecondaryName',
        'secondary_addr' => 'SecondaryAddr',
        'cache_size' => 'CacheSize',
        'fwd_q_size' => 'FwdQSize',
        'fwd_timeout' => 'FwdTimeout'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'enabled' => 'setEnabled',
        'primary_name' => 'setPrimaryName',
        'primary_addr' => 'setPrimaryAddr',
        'secondary_name' => 'setSecondaryName',
        'secondary_addr' => 'setSecondaryAddr',
        'cache_size' => 'setCacheSize',
        'fwd_q_size' => 'setFwdQSize',
        'fwd_timeout' => 'setFwdTimeout'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'enabled' => 'getEnabled',
        'primary_name' => 'getPrimaryName',
        'primary_addr' => 'getPrimaryAddr',
        'secondary_name' => 'getSecondaryName',
        'secondary_addr' => 'getSecondaryAddr',
        'cache_size' => 'getCacheSize',
        'fwd_q_size' => 'getFwdQSize',
        'fwd_timeout' => 'getFwdTimeout'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['primary_name'] = isset($data['primary_name']) ? $data['primary_name'] : null;
        $this->container['primary_addr'] = isset($data['primary_addr']) ? $data['primary_addr'] : null;
        $this->container['secondary_name'] = isset($data['secondary_name']) ? $data['secondary_name'] : null;
        $this->container['secondary_addr'] = isset($data['secondary_addr']) ? $data['secondary_addr'] : null;
        $this->container['cache_size'] = isset($data['cache_size']) ? $data['cache_size'] : null;
        $this->container['fwd_q_size'] = isset($data['fwd_q_size']) ? $data['fwd_q_size'] : null;
        $this->container['fwd_timeout'] = isset($data['fwd_timeout']) ? $data['fwd_timeout'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets enabled
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     * @param bool $enabled
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets primary_name
     * @return string
     */
    public function getPrimaryName()
    {
        return $this->container['primary_name'];
    }

    /**
     * Sets primary_name
     * @param string $primary_name
     * @return $this
     */
    public function setPrimaryName($primary_name)
    {
        $this->container['primary_name'] = $primary_name;

        return $this;
    }

    /**
     * Gets primary_addr
     * @return string
     */
    public function getPrimaryAddr()
    {
        return $this->container['primary_addr'];
    }

    /**
     * Sets primary_addr
     * @param string $primary_addr
     * @return $this
     */
    public function setPrimaryAddr($primary_addr)
    {
        $this->container['primary_addr'] = $primary_addr;

        return $this;
    }

    /**
     * Gets secondary_name
     * @return string
     */
    public function getSecondaryName()
    {
        return $this->container['secondary_name'];
    }

    /**
     * Sets secondary_name
     * @param string $secondary_name
     * @return $this
     */
    public function setSecondaryName($secondary_name)
    {
        $this->container['secondary_name'] = $secondary_name;

        return $this;
    }

    /**
     * Gets secondary_addr
     * @return string
     */
    public function getSecondaryAddr()
    {
        return $this->container['secondary_addr'];
    }

    /**
     * Sets secondary_addr
     * @param string $secondary_addr
     * @return $this
     */
    public function setSecondaryAddr($secondary_addr)
    {
        $this->container['secondary_addr'] = $secondary_addr;

        return $this;
    }

    /**
     * Gets cache_size
     * @return int
     */
    public function getCacheSize()
    {
        return $this->container['cache_size'];
    }

    /**
     * Sets cache_size
     * @param int $cache_size
     * @return $this
     */
    public function setCacheSize($cache_size)
    {
        $this->container['cache_size'] = $cache_size;

        return $this;
    }

    /**
     * Gets fwd_q_size
     * @return int
     */
    public function getFwdQSize()
    {
        return $this->container['fwd_q_size'];
    }

    /**
     * Sets fwd_q_size
     * @param int $fwd_q_size
     * @return $this
     */
    public function setFwdQSize($fwd_q_size)
    {
        $this->container['fwd_q_size'] = $fwd_q_size;

        return $this;
    }

    /**
     * Gets fwd_timeout
     * @return int
     */
    public function getFwdTimeout()
    {
        return $this->container['fwd_timeout'];
    }

    /**
     * Sets fwd_timeout
     * @param int $fwd_timeout
     * @return $this
     */
    public function setFwdTimeout($fwd_timeout)
    {
        $this->container['fwd_timeout'] = $fwd_timeout;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


