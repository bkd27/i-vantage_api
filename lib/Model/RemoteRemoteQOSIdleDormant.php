<?php
/**
 * RemoteRemoteQOSIdleDormant
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * iVantage API
 *
 * This is the iDirect iVantage API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RemoteRemoteQOSIdleDormant Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RemoteRemoteQOSIdleDormant implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Remote_RemoteQOS_IdleDormant';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'enabled' => 'bool',
        'idle_slots_every' => 'int',
        'dormant_slots_every' => 'int',
        'idle_s_timeout' => 'int',
        'dormant_timeout' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'enabled' => null,
        'idle_slots_every' => 'int32',
        'dormant_slots_every' => 'int32',
        'idle_s_timeout' => 'int32',
        'dormant_timeout' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enabled' => 'Enabled',
        'idle_slots_every' => 'IdleSlotsEvery',
        'dormant_slots_every' => 'DormantSlotsEvery',
        'idle_s_timeout' => 'IdleSTimeout',
        'dormant_timeout' => 'DormantTimeout'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enabled' => 'setEnabled',
        'idle_slots_every' => 'setIdleSlotsEvery',
        'dormant_slots_every' => 'setDormantSlotsEvery',
        'idle_s_timeout' => 'setIdleSTimeout',
        'dormant_timeout' => 'setDormantTimeout'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enabled' => 'getEnabled',
        'idle_slots_every' => 'getIdleSlotsEvery',
        'dormant_slots_every' => 'getDormantSlotsEvery',
        'idle_s_timeout' => 'getIdleSTimeout',
        'dormant_timeout' => 'getDormantTimeout'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['idle_slots_every'] = isset($data['idle_slots_every']) ? $data['idle_slots_every'] : null;
        $this->container['dormant_slots_every'] = isset($data['dormant_slots_every']) ? $data['dormant_slots_every'] : null;
        $this->container['idle_s_timeout'] = isset($data['idle_s_timeout']) ? $data['idle_s_timeout'] : null;
        $this->container['dormant_timeout'] = isset($data['dormant_timeout']) ? $data['dormant_timeout'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets idle_slots_every
     *
     * @return int
     */
    public function getIdleSlotsEvery()
    {
        return $this->container['idle_slots_every'];
    }

    /**
     * Sets idle_slots_every
     *
     * @param int $idle_slots_every idle_slots_every
     *
     * @return $this
     */
    public function setIdleSlotsEvery($idle_slots_every)
    {
        $this->container['idle_slots_every'] = $idle_slots_every;

        return $this;
    }

    /**
     * Gets dormant_slots_every
     *
     * @return int
     */
    public function getDormantSlotsEvery()
    {
        return $this->container['dormant_slots_every'];
    }

    /**
     * Sets dormant_slots_every
     *
     * @param int $dormant_slots_every dormant_slots_every
     *
     * @return $this
     */
    public function setDormantSlotsEvery($dormant_slots_every)
    {
        $this->container['dormant_slots_every'] = $dormant_slots_every;

        return $this;
    }

    /**
     * Gets idle_s_timeout
     *
     * @return int
     */
    public function getIdleSTimeout()
    {
        return $this->container['idle_s_timeout'];
    }

    /**
     * Sets idle_s_timeout
     *
     * @param int $idle_s_timeout idle_s_timeout
     *
     * @return $this
     */
    public function setIdleSTimeout($idle_s_timeout)
    {
        $this->container['idle_s_timeout'] = $idle_s_timeout;

        return $this;
    }

    /**
     * Gets dormant_timeout
     *
     * @return int
     */
    public function getDormantTimeout()
    {
        return $this->container['dormant_timeout'];
    }

    /**
     * Sets dormant_timeout
     *
     * @param int $dormant_timeout dormant_timeout
     *
     * @return $this
     */
    public function setDormantTimeout($dormant_timeout)
    {
        $this->container['dormant_timeout'] = $dormant_timeout;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


