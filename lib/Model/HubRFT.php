<?php
/**
 * HubRFT
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * iVantage API
 *
 * This is the iDirect iVantage API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * HubRFT Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HubRFT implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'HubRFT';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'teleport_id' => 'int',
        'antenna_id' => 'int',
        'up_converter_id' => 'int',
        'down_converter_id' => 'int',
        'hpaid' => 'int',
        'spacecraft_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'teleport_id' => 'int32',
        'antenna_id' => 'int32',
        'up_converter_id' => 'int32',
        'down_converter_id' => 'int32',
        'hpaid' => 'int32',
        'spacecraft_id' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'ID',
        'name' => 'Name',
        'teleport_id' => 'TeleportID',
        'antenna_id' => 'AntennaID',
        'up_converter_id' => 'UpConverterID',
        'down_converter_id' => 'DownConverterID',
        'hpaid' => 'HPAID',
        'spacecraft_id' => 'SpacecraftID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'teleport_id' => 'setTeleportId',
        'antenna_id' => 'setAntennaId',
        'up_converter_id' => 'setUpConverterId',
        'down_converter_id' => 'setDownConverterId',
        'hpaid' => 'setHpaid',
        'spacecraft_id' => 'setSpacecraftId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'teleport_id' => 'getTeleportId',
        'antenna_id' => 'getAntennaId',
        'up_converter_id' => 'getUpConverterId',
        'down_converter_id' => 'getDownConverterId',
        'hpaid' => 'getHpaid',
        'spacecraft_id' => 'getSpacecraftId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['teleport_id'] = isset($data['teleport_id']) ? $data['teleport_id'] : null;
        $this->container['antenna_id'] = isset($data['antenna_id']) ? $data['antenna_id'] : null;
        $this->container['up_converter_id'] = isset($data['up_converter_id']) ? $data['up_converter_id'] : null;
        $this->container['down_converter_id'] = isset($data['down_converter_id']) ? $data['down_converter_id'] : null;
        $this->container['hpaid'] = isset($data['hpaid']) ? $data['hpaid'] : null;
        $this->container['spacecraft_id'] = isset($data['spacecraft_id']) ? $data['spacecraft_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Internal ID of the HubRFT
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the HubRFT
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets teleport_id
     *
     * @return int
     */
    public function getTeleportId()
    {
        return $this->container['teleport_id'];
    }

    /**
     * Sets teleport_id
     *
     * @param int $teleport_id teleport_id
     *
     * @return $this
     */
    public function setTeleportId($teleport_id)
    {
        $this->container['teleport_id'] = $teleport_id;

        return $this;
    }

    /**
     * Gets antenna_id
     *
     * @return int
     */
    public function getAntennaId()
    {
        return $this->container['antenna_id'];
    }

    /**
     * Sets antenna_id
     *
     * @param int $antenna_id antenna_id
     *
     * @return $this
     */
    public function setAntennaId($antenna_id)
    {
        $this->container['antenna_id'] = $antenna_id;

        return $this;
    }

    /**
     * Gets up_converter_id
     *
     * @return int
     */
    public function getUpConverterId()
    {
        return $this->container['up_converter_id'];
    }

    /**
     * Sets up_converter_id
     *
     * @param int $up_converter_id up_converter_id
     *
     * @return $this
     */
    public function setUpConverterId($up_converter_id)
    {
        $this->container['up_converter_id'] = $up_converter_id;

        return $this;
    }

    /**
     * Gets down_converter_id
     *
     * @return int
     */
    public function getDownConverterId()
    {
        return $this->container['down_converter_id'];
    }

    /**
     * Sets down_converter_id
     *
     * @param int $down_converter_id down_converter_id
     *
     * @return $this
     */
    public function setDownConverterId($down_converter_id)
    {
        $this->container['down_converter_id'] = $down_converter_id;

        return $this;
    }

    /**
     * Gets hpaid
     *
     * @return int
     */
    public function getHpaid()
    {
        return $this->container['hpaid'];
    }

    /**
     * Sets hpaid
     *
     * @param int $hpaid hpaid
     *
     * @return $this
     */
    public function setHpaid($hpaid)
    {
        $this->container['hpaid'] = $hpaid;

        return $this;
    }

    /**
     * Gets spacecraft_id
     *
     * @return int
     */
    public function getSpacecraftId()
    {
        return $this->container['spacecraft_id'];
    }

    /**
     * Sets spacecraft_id
     *
     * @param int $spacecraft_id spacecraft_id
     *
     * @return $this
     */
    public function setSpacecraftId($spacecraft_id)
    {
        $this->container['spacecraft_id'] = $spacecraft_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


