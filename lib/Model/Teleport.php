<?php
/**
 * Teleport
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * iVantage API
 *
 * This is the iDirect iVantage API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Teleport Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Teleport implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Teleport';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'backup_nms' => 'bool',
        'lat' => 'double',
        'lon' => 'double',
        'alt' => 'double',
        'phone' => 'string',
        'cfg_srv_ip_address' => 'string',
        'nrd_srv_ip_address' => 'string',
        'evt_srv_ip_address' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'backup_nms' => null,
        'lat' => 'double',
        'lon' => 'double',
        'alt' => 'double',
        'phone' => null,
        'cfg_srv_ip_address' => null,
        'nrd_srv_ip_address' => null,
        'evt_srv_ip_address' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'ID',
        'name' => 'Name',
        'backup_nms' => 'BackupNMS',
        'lat' => 'Lat',
        'lon' => 'Lon',
        'alt' => 'Alt',
        'phone' => 'Phone',
        'cfg_srv_ip_address' => 'CfgSrvIPAddress',
        'nrd_srv_ip_address' => 'NrdSrvIPAddress',
        'evt_srv_ip_address' => 'EvtSrvIPAddress'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'backup_nms' => 'setBackupNms',
        'lat' => 'setLat',
        'lon' => 'setLon',
        'alt' => 'setAlt',
        'phone' => 'setPhone',
        'cfg_srv_ip_address' => 'setCfgSrvIpAddress',
        'nrd_srv_ip_address' => 'setNrdSrvIpAddress',
        'evt_srv_ip_address' => 'setEvtSrvIpAddress'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'backup_nms' => 'getBackupNms',
        'lat' => 'getLat',
        'lon' => 'getLon',
        'alt' => 'getAlt',
        'phone' => 'getPhone',
        'cfg_srv_ip_address' => 'getCfgSrvIpAddress',
        'nrd_srv_ip_address' => 'getNrdSrvIpAddress',
        'evt_srv_ip_address' => 'getEvtSrvIpAddress'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['backup_nms'] = isset($data['backup_nms']) ? $data['backup_nms'] : null;
        $this->container['lat'] = isset($data['lat']) ? $data['lat'] : null;
        $this->container['lon'] = isset($data['lon']) ? $data['lon'] : null;
        $this->container['alt'] = isset($data['alt']) ? $data['alt'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['cfg_srv_ip_address'] = isset($data['cfg_srv_ip_address']) ? $data['cfg_srv_ip_address'] : null;
        $this->container['nrd_srv_ip_address'] = isset($data['nrd_srv_ip_address']) ? $data['nrd_srv_ip_address'] : null;
        $this->container['evt_srv_ip_address'] = isset($data['evt_srv_ip_address']) ? $data['evt_srv_ip_address'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Internal ID of the Teleport
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Name of the Teleport
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets backup_nms
     * @return bool
     */
    public function getBackupNms()
    {
        return $this->container['backup_nms'];
    }

    /**
     * Sets backup_nms
     * @param bool $backup_nms
     * @return $this
     */
    public function setBackupNms($backup_nms)
    {
        $this->container['backup_nms'] = $backup_nms;

        return $this;
    }

    /**
     * Gets lat
     * @return double
     */
    public function getLat()
    {
        return $this->container['lat'];
    }

    /**
     * Sets lat
     * @param double $lat
     * @return $this
     */
    public function setLat($lat)
    {
        $this->container['lat'] = $lat;

        return $this;
    }

    /**
     * Gets lon
     * @return double
     */
    public function getLon()
    {
        return $this->container['lon'];
    }

    /**
     * Sets lon
     * @param double $lon
     * @return $this
     */
    public function setLon($lon)
    {
        $this->container['lon'] = $lon;

        return $this;
    }

    /**
     * Gets alt
     * @return double
     */
    public function getAlt()
    {
        return $this->container['alt'];
    }

    /**
     * Sets alt
     * @param double $alt
     * @return $this
     */
    public function setAlt($alt)
    {
        $this->container['alt'] = $alt;

        return $this;
    }

    /**
     * Gets phone
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     * @param string $phone
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets cfg_srv_ip_address
     * @return string
     */
    public function getCfgSrvIpAddress()
    {
        return $this->container['cfg_srv_ip_address'];
    }

    /**
     * Sets cfg_srv_ip_address
     * @param string $cfg_srv_ip_address
     * @return $this
     */
    public function setCfgSrvIpAddress($cfg_srv_ip_address)
    {
        $this->container['cfg_srv_ip_address'] = $cfg_srv_ip_address;

        return $this;
    }

    /**
     * Gets nrd_srv_ip_address
     * @return string
     */
    public function getNrdSrvIpAddress()
    {
        return $this->container['nrd_srv_ip_address'];
    }

    /**
     * Sets nrd_srv_ip_address
     * @param string $nrd_srv_ip_address
     * @return $this
     */
    public function setNrdSrvIpAddress($nrd_srv_ip_address)
    {
        $this->container['nrd_srv_ip_address'] = $nrd_srv_ip_address;

        return $this;
    }

    /**
     * Gets evt_srv_ip_address
     * @return string
     */
    public function getEvtSrvIpAddress()
    {
        return $this->container['evt_srv_ip_address'];
    }

    /**
     * Sets evt_srv_ip_address
     * @param string $evt_srv_ip_address
     * @return $this
     */
    public function setEvtSrvIpAddress($evt_srv_ip_address)
    {
        $this->container['evt_srv_ip_address'] = $evt_srv_ip_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


