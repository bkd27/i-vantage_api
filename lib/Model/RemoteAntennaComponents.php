<?php
/**
 * RemoteAntennaComponents
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * iVantage API
 *
 * This is the iDirect iVantage API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RemoteAntennaComponents Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RemoteAntennaComponents implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Remote_AntennaComponents';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bucid' => 'int',
        'reflector_id' => 'int',
        'approx_cable_length' => 'int',
        'port' => 'int',
        'connect_timeout' => 'int',
        'lnbids' => 'int[]',
        'boost_lnb_voltage' => 'bool',
        'address' => 'string',
        'hunt_freq_select' => 'string',
        'rx_polarization' => 'string',
        'tx_polarization' => 'string',
        'hunt_freq' => 'double',
        'noise_ref_freq' => 'double',
        'init_tx_power_offset' => 'double',
        'open_amip_antenna_controller' => '\Swagger\Client\Model\RemoteAntennaComponentsOpenAMIPAntennaController',
        'sea_tel_dac_antenna_controller' => '\Swagger\Client\Model\RemoteAntennaComponentsSeaTelDACAntennaController',
        'orbit_sbc_antenna_controller' => '\Swagger\Client\Model\RemoteAntennaComponentsOrbitSBCAntennaController'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bucid' => 'int32',
        'reflector_id' => 'int32',
        'approx_cable_length' => 'int32',
        'port' => 'int32',
        'connect_timeout' => 'int32',
        'lnbids' => 'int32',
        'boost_lnb_voltage' => null,
        'address' => null,
        'hunt_freq_select' => null,
        'rx_polarization' => null,
        'tx_polarization' => null,
        'hunt_freq' => 'double',
        'noise_ref_freq' => 'double',
        'init_tx_power_offset' => 'double',
        'open_amip_antenna_controller' => null,
        'sea_tel_dac_antenna_controller' => null,
        'orbit_sbc_antenna_controller' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bucid' => 'BUCID',
        'reflector_id' => 'ReflectorID',
        'approx_cable_length' => 'ApproxCableLength',
        'port' => 'Port',
        'connect_timeout' => 'ConnectTimeout',
        'lnbids' => 'LNBIDs',
        'boost_lnb_voltage' => 'BoostLnbVoltage',
        'address' => 'Address',
        'hunt_freq_select' => 'HuntFreqSelect',
        'rx_polarization' => 'RXPolarization',
        'tx_polarization' => 'TXPolarization',
        'hunt_freq' => 'HuntFreq',
        'noise_ref_freq' => 'NoiseRefFreq',
        'init_tx_power_offset' => 'InitTXPowerOffset',
        'open_amip_antenna_controller' => 'OpenAMIPAntennaController',
        'sea_tel_dac_antenna_controller' => 'SeaTelDACAntennaController',
        'orbit_sbc_antenna_controller' => 'OrbitSBCAntennaController'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bucid' => 'setBucid',
        'reflector_id' => 'setReflectorId',
        'approx_cable_length' => 'setApproxCableLength',
        'port' => 'setPort',
        'connect_timeout' => 'setConnectTimeout',
        'lnbids' => 'setLnbids',
        'boost_lnb_voltage' => 'setBoostLnbVoltage',
        'address' => 'setAddress',
        'hunt_freq_select' => 'setHuntFreqSelect',
        'rx_polarization' => 'setRxPolarization',
        'tx_polarization' => 'setTxPolarization',
        'hunt_freq' => 'setHuntFreq',
        'noise_ref_freq' => 'setNoiseRefFreq',
        'init_tx_power_offset' => 'setInitTxPowerOffset',
        'open_amip_antenna_controller' => 'setOpenAmipAntennaController',
        'sea_tel_dac_antenna_controller' => 'setSeaTelDacAntennaController',
        'orbit_sbc_antenna_controller' => 'setOrbitSbcAntennaController'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bucid' => 'getBucid',
        'reflector_id' => 'getReflectorId',
        'approx_cable_length' => 'getApproxCableLength',
        'port' => 'getPort',
        'connect_timeout' => 'getConnectTimeout',
        'lnbids' => 'getLnbids',
        'boost_lnb_voltage' => 'getBoostLnbVoltage',
        'address' => 'getAddress',
        'hunt_freq_select' => 'getHuntFreqSelect',
        'rx_polarization' => 'getRxPolarization',
        'tx_polarization' => 'getTxPolarization',
        'hunt_freq' => 'getHuntFreq',
        'noise_ref_freq' => 'getNoiseRefFreq',
        'init_tx_power_offset' => 'getInitTxPowerOffset',
        'open_amip_antenna_controller' => 'getOpenAmipAntennaController',
        'sea_tel_dac_antenna_controller' => 'getSeaTelDacAntennaController',
        'orbit_sbc_antenna_controller' => 'getOrbitSbcAntennaController'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bucid'] = isset($data['bucid']) ? $data['bucid'] : null;
        $this->container['reflector_id'] = isset($data['reflector_id']) ? $data['reflector_id'] : null;
        $this->container['approx_cable_length'] = isset($data['approx_cable_length']) ? $data['approx_cable_length'] : null;
        $this->container['port'] = isset($data['port']) ? $data['port'] : null;
        $this->container['connect_timeout'] = isset($data['connect_timeout']) ? $data['connect_timeout'] : null;
        $this->container['lnbids'] = isset($data['lnbids']) ? $data['lnbids'] : null;
        $this->container['boost_lnb_voltage'] = isset($data['boost_lnb_voltage']) ? $data['boost_lnb_voltage'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['hunt_freq_select'] = isset($data['hunt_freq_select']) ? $data['hunt_freq_select'] : null;
        $this->container['rx_polarization'] = isset($data['rx_polarization']) ? $data['rx_polarization'] : null;
        $this->container['tx_polarization'] = isset($data['tx_polarization']) ? $data['tx_polarization'] : null;
        $this->container['hunt_freq'] = isset($data['hunt_freq']) ? $data['hunt_freq'] : null;
        $this->container['noise_ref_freq'] = isset($data['noise_ref_freq']) ? $data['noise_ref_freq'] : null;
        $this->container['init_tx_power_offset'] = isset($data['init_tx_power_offset']) ? $data['init_tx_power_offset'] : null;
        $this->container['open_amip_antenna_controller'] = isset($data['open_amip_antenna_controller']) ? $data['open_amip_antenna_controller'] : null;
        $this->container['sea_tel_dac_antenna_controller'] = isset($data['sea_tel_dac_antenna_controller']) ? $data['sea_tel_dac_antenna_controller'] : null;
        $this->container['orbit_sbc_antenna_controller'] = isset($data['orbit_sbc_antenna_controller']) ? $data['orbit_sbc_antenna_controller'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bucid
     *
     * @return int
     */
    public function getBucid()
    {
        return $this->container['bucid'];
    }

    /**
     * Sets bucid
     *
     * @param int $bucid bucid
     *
     * @return $this
     */
    public function setBucid($bucid)
    {
        $this->container['bucid'] = $bucid;

        return $this;
    }

    /**
     * Gets reflector_id
     *
     * @return int
     */
    public function getReflectorId()
    {
        return $this->container['reflector_id'];
    }

    /**
     * Sets reflector_id
     *
     * @param int $reflector_id reflector_id
     *
     * @return $this
     */
    public function setReflectorId($reflector_id)
    {
        $this->container['reflector_id'] = $reflector_id;

        return $this;
    }

    /**
     * Gets approx_cable_length
     *
     * @return int
     */
    public function getApproxCableLength()
    {
        return $this->container['approx_cable_length'];
    }

    /**
     * Sets approx_cable_length
     *
     * @param int $approx_cable_length approx_cable_length
     *
     * @return $this
     */
    public function setApproxCableLength($approx_cable_length)
    {
        $this->container['approx_cable_length'] = $approx_cable_length;

        return $this;
    }

    /**
     * Gets port
     *
     * @return int
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param int $port port
     *
     * @return $this
     */
    public function setPort($port)
    {
        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets connect_timeout
     *
     * @return int
     */
    public function getConnectTimeout()
    {
        return $this->container['connect_timeout'];
    }

    /**
     * Sets connect_timeout
     *
     * @param int $connect_timeout connect_timeout
     *
     * @return $this
     */
    public function setConnectTimeout($connect_timeout)
    {
        $this->container['connect_timeout'] = $connect_timeout;

        return $this;
    }

    /**
     * Gets lnbids
     *
     * @return int[]
     */
    public function getLnbids()
    {
        return $this->container['lnbids'];
    }

    /**
     * Sets lnbids
     *
     * @param int[] $lnbids lnbids
     *
     * @return $this
     */
    public function setLnbids($lnbids)
    {
        $this->container['lnbids'] = $lnbids;

        return $this;
    }

    /**
     * Gets boost_lnb_voltage
     *
     * @return bool
     */
    public function getBoostLnbVoltage()
    {
        return $this->container['boost_lnb_voltage'];
    }

    /**
     * Sets boost_lnb_voltage
     *
     * @param bool $boost_lnb_voltage boost_lnb_voltage
     *
     * @return $this
     */
    public function setBoostLnbVoltage($boost_lnb_voltage)
    {
        $this->container['boost_lnb_voltage'] = $boost_lnb_voltage;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets hunt_freq_select
     *
     * @return string
     */
    public function getHuntFreqSelect()
    {
        return $this->container['hunt_freq_select'];
    }

    /**
     * Sets hunt_freq_select
     *
     * @param string $hunt_freq_select hunt_freq_select
     *
     * @return $this
     */
    public function setHuntFreqSelect($hunt_freq_select)
    {
        $this->container['hunt_freq_select'] = $hunt_freq_select;

        return $this;
    }

    /**
     * Gets rx_polarization
     *
     * @return string
     */
    public function getRxPolarization()
    {
        return $this->container['rx_polarization'];
    }

    /**
     * Sets rx_polarization
     *
     * @param string $rx_polarization rx_polarization
     *
     * @return $this
     */
    public function setRxPolarization($rx_polarization)
    {
        $this->container['rx_polarization'] = $rx_polarization;

        return $this;
    }

    /**
     * Gets tx_polarization
     *
     * @return string
     */
    public function getTxPolarization()
    {
        return $this->container['tx_polarization'];
    }

    /**
     * Sets tx_polarization
     *
     * @param string $tx_polarization tx_polarization
     *
     * @return $this
     */
    public function setTxPolarization($tx_polarization)
    {
        $this->container['tx_polarization'] = $tx_polarization;

        return $this;
    }

    /**
     * Gets hunt_freq
     *
     * @return double
     */
    public function getHuntFreq()
    {
        return $this->container['hunt_freq'];
    }

    /**
     * Sets hunt_freq
     *
     * @param double $hunt_freq hunt_freq
     *
     * @return $this
     */
    public function setHuntFreq($hunt_freq)
    {
        $this->container['hunt_freq'] = $hunt_freq;

        return $this;
    }

    /**
     * Gets noise_ref_freq
     *
     * @return double
     */
    public function getNoiseRefFreq()
    {
        return $this->container['noise_ref_freq'];
    }

    /**
     * Sets noise_ref_freq
     *
     * @param double $noise_ref_freq noise_ref_freq
     *
     * @return $this
     */
    public function setNoiseRefFreq($noise_ref_freq)
    {
        $this->container['noise_ref_freq'] = $noise_ref_freq;

        return $this;
    }

    /**
     * Gets init_tx_power_offset
     *
     * @return double
     */
    public function getInitTxPowerOffset()
    {
        return $this->container['init_tx_power_offset'];
    }

    /**
     * Sets init_tx_power_offset
     *
     * @param double $init_tx_power_offset init_tx_power_offset
     *
     * @return $this
     */
    public function setInitTxPowerOffset($init_tx_power_offset)
    {
        $this->container['init_tx_power_offset'] = $init_tx_power_offset;

        return $this;
    }

    /**
     * Gets open_amip_antenna_controller
     *
     * @return \Swagger\Client\Model\RemoteAntennaComponentsOpenAMIPAntennaController
     */
    public function getOpenAmipAntennaController()
    {
        return $this->container['open_amip_antenna_controller'];
    }

    /**
     * Sets open_amip_antenna_controller
     *
     * @param \Swagger\Client\Model\RemoteAntennaComponentsOpenAMIPAntennaController $open_amip_antenna_controller open_amip_antenna_controller
     *
     * @return $this
     */
    public function setOpenAmipAntennaController($open_amip_antenna_controller)
    {
        $this->container['open_amip_antenna_controller'] = $open_amip_antenna_controller;

        return $this;
    }

    /**
     * Gets sea_tel_dac_antenna_controller
     *
     * @return \Swagger\Client\Model\RemoteAntennaComponentsSeaTelDACAntennaController
     */
    public function getSeaTelDacAntennaController()
    {
        return $this->container['sea_tel_dac_antenna_controller'];
    }

    /**
     * Sets sea_tel_dac_antenna_controller
     *
     * @param \Swagger\Client\Model\RemoteAntennaComponentsSeaTelDACAntennaController $sea_tel_dac_antenna_controller sea_tel_dac_antenna_controller
     *
     * @return $this
     */
    public function setSeaTelDacAntennaController($sea_tel_dac_antenna_controller)
    {
        $this->container['sea_tel_dac_antenna_controller'] = $sea_tel_dac_antenna_controller;

        return $this;
    }

    /**
     * Gets orbit_sbc_antenna_controller
     *
     * @return \Swagger\Client\Model\RemoteAntennaComponentsOrbitSBCAntennaController
     */
    public function getOrbitSbcAntennaController()
    {
        return $this->container['orbit_sbc_antenna_controller'];
    }

    /**
     * Sets orbit_sbc_antenna_controller
     *
     * @param \Swagger\Client\Model\RemoteAntennaComponentsOrbitSBCAntennaController $orbit_sbc_antenna_controller orbit_sbc_antenna_controller
     *
     * @return $this
     */
    public function setOrbitSbcAntennaController($orbit_sbc_antenna_controller)
    {
        $this->container['orbit_sbc_antenna_controller'] = $orbit_sbc_antenna_controller;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


