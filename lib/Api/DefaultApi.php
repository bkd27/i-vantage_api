<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * iVantage API
 *
 * This is the iDirect iVantage API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return DefaultApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation applicationservicegroupApplicationservicegroupIdGet
     *
     * @param int $applicationservicegroup_id ID of the applicationservicegroup (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ApplicationServiceGroupResponse
     */
    public function applicationservicegroupApplicationservicegroupIdGet($applicationservicegroup_id)
    {
        list($response) = $this->applicationservicegroupApplicationservicegroupIdGetWithHttpInfo($applicationservicegroup_id);
        return $response;
    }

    /**
     * Operation applicationservicegroupApplicationservicegroupIdGetWithHttpInfo
     *
     * @param int $applicationservicegroup_id ID of the applicationservicegroup (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ApplicationServiceGroupResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function applicationservicegroupApplicationservicegroupIdGetWithHttpInfo($applicationservicegroup_id)
    {
        // verify the required parameter 'applicationservicegroup_id' is set
        if ($applicationservicegroup_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $applicationservicegroup_id when calling applicationservicegroupApplicationservicegroupIdGet');
        }
        // parse inputs
        $resourcePath = "/applicationservicegroup/{applicationservicegroupId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($applicationservicegroup_id !== null) {
            $resourcePath = str_replace(
                "{" . "applicationservicegroupId" . "}",
                $this->apiClient->getSerializer()->toPathValue($applicationservicegroup_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ApplicationServiceGroupResponse',
                '/applicationservicegroup/{applicationservicegroupId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ApplicationServiceGroupResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ApplicationServiceGroupResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation applicationservicegroupApplicationservicegroupIdPatch
     *
     * @param int $applicationservicegroup_id ID of the applicationservicegroup (required)
     * @param \Swagger\Client\Model\ApplicationServiceGroup $application_service_group The applicationservicegroup JSON you want to update the applicationservicegroup with (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ApplicationServiceGroupResponse
     */
    public function applicationservicegroupApplicationservicegroupIdPatch($applicationservicegroup_id, $application_service_group)
    {
        list($response) = $this->applicationservicegroupApplicationservicegroupIdPatchWithHttpInfo($applicationservicegroup_id, $application_service_group);
        return $response;
    }

    /**
     * Operation applicationservicegroupApplicationservicegroupIdPatchWithHttpInfo
     *
     * @param int $applicationservicegroup_id ID of the applicationservicegroup (required)
     * @param \Swagger\Client\Model\ApplicationServiceGroup $application_service_group The applicationservicegroup JSON you want to update the applicationservicegroup with (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ApplicationServiceGroupResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function applicationservicegroupApplicationservicegroupIdPatchWithHttpInfo($applicationservicegroup_id, $application_service_group)
    {
        // verify the required parameter 'applicationservicegroup_id' is set
        if ($applicationservicegroup_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $applicationservicegroup_id when calling applicationservicegroupApplicationservicegroupIdPatch');
        }
        // verify the required parameter 'application_service_group' is set
        if ($application_service_group === null) {
            throw new \InvalidArgumentException('Missing the required parameter $application_service_group when calling applicationservicegroupApplicationservicegroupIdPatch');
        }
        // parse inputs
        $resourcePath = "/applicationservicegroup/{applicationservicegroupId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($applicationservicegroup_id !== null) {
            $resourcePath = str_replace(
                "{" . "applicationservicegroupId" . "}",
                $this->apiClient->getSerializer()->toPathValue($applicationservicegroup_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($application_service_group)) {
            $_tempBody = $application_service_group;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ApplicationServiceGroupResponse',
                '/applicationservicegroup/{applicationservicegroupId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ApplicationServiceGroupResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ApplicationServiceGroupResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation applicationservicegroupGet
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ApplicationServiceGroupListResponse
     */
    public function applicationservicegroupGet()
    {
        list($response) = $this->applicationservicegroupGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation applicationservicegroupGetWithHttpInfo
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ApplicationServiceGroupListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function applicationservicegroupGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/applicationservicegroup";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ApplicationServiceGroupListResponse',
                '/applicationservicegroup'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ApplicationServiceGroupListResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ApplicationServiceGroupListResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation authorizePost
     *
     * @param string $user The username of the user (required)
     * @param string $password The password of the user (required)
     * @param string $logout If included will logout and delete session (optional)
     * @param string $success Location to redirect to upon successful login or logout (optional)
     * @param string $fail Location to redirect to upon failed login or logout (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function authorizePost($user, $password, $logout = null, $success = null, $fail = null)
    {
        list($response) = $this->authorizePostWithHttpInfo($user, $password, $logout, $success, $fail);
        return $response;
    }

    /**
     * Operation authorizePostWithHttpInfo
     *
     * @param string $user The username of the user (required)
     * @param string $password The password of the user (required)
     * @param string $logout If included will logout and delete session (optional)
     * @param string $success Location to redirect to upon successful login or logout (optional)
     * @param string $fail Location to redirect to upon failed login or logout (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function authorizePostWithHttpInfo($user, $password, $logout = null, $success = null, $fail = null)
    {
        // verify the required parameter 'user' is set
        if ($user === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user when calling authorizePost');
        }
        // verify the required parameter 'password' is set
        if ($password === null) {
            throw new \InvalidArgumentException('Missing the required parameter $password when calling authorizePost');
        }
        // parse inputs
        $resourcePath = "/authorize";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // query params
        if ($user !== null) {
            $queryParams['user'] = $this->apiClient->getSerializer()->toQueryValue($user);
        }
        // query params
        if ($password !== null) {
            $queryParams['password'] = $this->apiClient->getSerializer()->toQueryValue($password);
        }
        // query params
        if ($logout !== null) {
            $queryParams['logout'] = $this->apiClient->getSerializer()->toQueryValue($logout);
        }
        // query params
        if ($success !== null) {
            $queryParams['success'] = $this->apiClient->getSerializer()->toQueryValue($success);
        }
        // query params
        if ($fail !== null) {
            $queryParams['fail'] = $this->apiClient->getSerializer()->toQueryValue($fail);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/authorize'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation bucBucIdGet
     *
     * @param int $buc_id ID of the buc (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\BUCResponse
     */
    public function bucBucIdGet($buc_id)
    {
        list($response) = $this->bucBucIdGetWithHttpInfo($buc_id);
        return $response;
    }

    /**
     * Operation bucBucIdGetWithHttpInfo
     *
     * @param int $buc_id ID of the buc (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\BUCResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function bucBucIdGetWithHttpInfo($buc_id)
    {
        // verify the required parameter 'buc_id' is set
        if ($buc_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $buc_id when calling bucBucIdGet');
        }
        // parse inputs
        $resourcePath = "/buc/{bucId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($buc_id !== null) {
            $resourcePath = str_replace(
                "{" . "bucId" . "}",
                $this->apiClient->getSerializer()->toPathValue($buc_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\BUCResponse',
                '/buc/{bucId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\BUCResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BUCResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation bucGet
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\BUCListResponse
     */
    public function bucGet()
    {
        list($response) = $this->bucGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation bucGetWithHttpInfo
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\BUCListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function bucGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/buc";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\BUCListResponse',
                '/buc'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\BUCListResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BUCListResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation carrierCarrierIdDelete
     *
     * @param int $carrier_id ID of the carrier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function carrierCarrierIdDelete($carrier_id)
    {
        list($response) = $this->carrierCarrierIdDeleteWithHttpInfo($carrier_id);
        return $response;
    }

    /**
     * Operation carrierCarrierIdDeleteWithHttpInfo
     *
     * @param int $carrier_id ID of the carrier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function carrierCarrierIdDeleteWithHttpInfo($carrier_id)
    {
        // verify the required parameter 'carrier_id' is set
        if ($carrier_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $carrier_id when calling carrierCarrierIdDelete');
        }
        // parse inputs
        $resourcePath = "/carrier/{carrierId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($carrier_id !== null) {
            $resourcePath = str_replace(
                "{" . "carrierId" . "}",
                $this->apiClient->getSerializer()->toPathValue($carrier_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/carrier/{carrierId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation carrierCarrierIdGet
     *
     * @param int $carrier_id ID of the carrier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CarrierResponse
     */
    public function carrierCarrierIdGet($carrier_id)
    {
        list($response) = $this->carrierCarrierIdGetWithHttpInfo($carrier_id);
        return $response;
    }

    /**
     * Operation carrierCarrierIdGetWithHttpInfo
     *
     * @param int $carrier_id ID of the carrier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CarrierResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function carrierCarrierIdGetWithHttpInfo($carrier_id)
    {
        // verify the required parameter 'carrier_id' is set
        if ($carrier_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $carrier_id when calling carrierCarrierIdGet');
        }
        // parse inputs
        $resourcePath = "/carrier/{carrierId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($carrier_id !== null) {
            $resourcePath = str_replace(
                "{" . "carrierId" . "}",
                $this->apiClient->getSerializer()->toPathValue($carrier_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CarrierResponse',
                '/carrier/{carrierId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CarrierResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CarrierResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation carrierCarrierIdPatch
     *
     * @param int $carrier_id ID of the carrier (required)
     * @param \Swagger\Client\Model\Carrier $carrier The carrier JSON you want to update the carrier with (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CarrierResponse
     */
    public function carrierCarrierIdPatch($carrier_id, $carrier)
    {
        list($response) = $this->carrierCarrierIdPatchWithHttpInfo($carrier_id, $carrier);
        return $response;
    }

    /**
     * Operation carrierCarrierIdPatchWithHttpInfo
     *
     * @param int $carrier_id ID of the carrier (required)
     * @param \Swagger\Client\Model\Carrier $carrier The carrier JSON you want to update the carrier with (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CarrierResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function carrierCarrierIdPatchWithHttpInfo($carrier_id, $carrier)
    {
        // verify the required parameter 'carrier_id' is set
        if ($carrier_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $carrier_id when calling carrierCarrierIdPatch');
        }
        // verify the required parameter 'carrier' is set
        if ($carrier === null) {
            throw new \InvalidArgumentException('Missing the required parameter $carrier when calling carrierCarrierIdPatch');
        }
        // parse inputs
        $resourcePath = "/carrier/{carrierId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($carrier_id !== null) {
            $resourcePath = str_replace(
                "{" . "carrierId" . "}",
                $this->apiClient->getSerializer()->toPathValue($carrier_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($carrier)) {
            $_tempBody = $carrier;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CarrierResponse',
                '/carrier/{carrierId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CarrierResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CarrierResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation carrierGet
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CarrierListResponse
     */
    public function carrierGet()
    {
        list($response) = $this->carrierGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation carrierGetWithHttpInfo
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CarrierListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function carrierGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/carrier";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CarrierListResponse',
                '/carrier'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CarrierListResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CarrierListResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation carrierPost
     *
     * @param \Swagger\Client\Model\Carrier $carrier The carrier JSON you want to post (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CarrierResponse
     */
    public function carrierPost($carrier)
    {
        list($response) = $this->carrierPostWithHttpInfo($carrier);
        return $response;
    }

    /**
     * Operation carrierPostWithHttpInfo
     *
     * @param \Swagger\Client\Model\Carrier $carrier The carrier JSON you want to post (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CarrierResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function carrierPostWithHttpInfo($carrier)
    {
        // verify the required parameter 'carrier' is set
        if ($carrier === null) {
            throw new \InvalidArgumentException('Missing the required parameter $carrier when calling carrierPost');
        }
        // parse inputs
        $resourcePath = "/carrier";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // body params
        $_tempBody = null;
        if (isset($carrier)) {
            $_tempBody = $carrier;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CarrierResponse',
                '/carrier'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CarrierResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CarrierResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation downconverterDownconverterIdDelete
     *
     * @param int $downconverter_id ID of the downconverter (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function downconverterDownconverterIdDelete($downconverter_id)
    {
        list($response) = $this->downconverterDownconverterIdDeleteWithHttpInfo($downconverter_id);
        return $response;
    }

    /**
     * Operation downconverterDownconverterIdDeleteWithHttpInfo
     *
     * @param int $downconverter_id ID of the downconverter (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function downconverterDownconverterIdDeleteWithHttpInfo($downconverter_id)
    {
        // verify the required parameter 'downconverter_id' is set
        if ($downconverter_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $downconverter_id when calling downconverterDownconverterIdDelete');
        }
        // parse inputs
        $resourcePath = "/downconverter/{downconverterId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($downconverter_id !== null) {
            $resourcePath = str_replace(
                "{" . "downconverterId" . "}",
                $this->apiClient->getSerializer()->toPathValue($downconverter_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/downconverter/{downconverterId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation downconverterDownconverterIdGet
     *
     * @param int $downconverter_id ID of the downconverter (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\DownConverterResponse
     */
    public function downconverterDownconverterIdGet($downconverter_id)
    {
        list($response) = $this->downconverterDownconverterIdGetWithHttpInfo($downconverter_id);
        return $response;
    }

    /**
     * Operation downconverterDownconverterIdGetWithHttpInfo
     *
     * @param int $downconverter_id ID of the downconverter (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\DownConverterResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function downconverterDownconverterIdGetWithHttpInfo($downconverter_id)
    {
        // verify the required parameter 'downconverter_id' is set
        if ($downconverter_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $downconverter_id when calling downconverterDownconverterIdGet');
        }
        // parse inputs
        $resourcePath = "/downconverter/{downconverterId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($downconverter_id !== null) {
            $resourcePath = str_replace(
                "{" . "downconverterId" . "}",
                $this->apiClient->getSerializer()->toPathValue($downconverter_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DownConverterResponse',
                '/downconverter/{downconverterId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DownConverterResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DownConverterResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation downconverterDownconverterIdPatch
     *
     * @param int $downconverter_id ID of the downconverter (required)
     * @param \Swagger\Client\Model\DownConverter $down_converter The downconverter JSON you want to update the downconverter with (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\DownConverterResponse
     */
    public function downconverterDownconverterIdPatch($downconverter_id, $down_converter)
    {
        list($response) = $this->downconverterDownconverterIdPatchWithHttpInfo($downconverter_id, $down_converter);
        return $response;
    }

    /**
     * Operation downconverterDownconverterIdPatchWithHttpInfo
     *
     * @param int $downconverter_id ID of the downconverter (required)
     * @param \Swagger\Client\Model\DownConverter $down_converter The downconverter JSON you want to update the downconverter with (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\DownConverterResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function downconverterDownconverterIdPatchWithHttpInfo($downconverter_id, $down_converter)
    {
        // verify the required parameter 'downconverter_id' is set
        if ($downconverter_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $downconverter_id when calling downconverterDownconverterIdPatch');
        }
        // verify the required parameter 'down_converter' is set
        if ($down_converter === null) {
            throw new \InvalidArgumentException('Missing the required parameter $down_converter when calling downconverterDownconverterIdPatch');
        }
        // parse inputs
        $resourcePath = "/downconverter/{downconverterId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($downconverter_id !== null) {
            $resourcePath = str_replace(
                "{" . "downconverterId" . "}",
                $this->apiClient->getSerializer()->toPathValue($downconverter_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($down_converter)) {
            $_tempBody = $down_converter;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DownConverterResponse',
                '/downconverter/{downconverterId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DownConverterResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DownConverterResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation downconverterGet
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\DownConverterListResponse
     */
    public function downconverterGet()
    {
        list($response) = $this->downconverterGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation downconverterGetWithHttpInfo
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\DownConverterListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function downconverterGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/downconverter";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DownConverterListResponse',
                '/downconverter'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DownConverterListResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DownConverterListResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation downconverterPost
     *
     * @param \Swagger\Client\Model\DownConverter $down_converter The downconverter JSON you want to post (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\DownConverterResponse
     */
    public function downconverterPost($down_converter)
    {
        list($response) = $this->downconverterPostWithHttpInfo($down_converter);
        return $response;
    }

    /**
     * Operation downconverterPostWithHttpInfo
     *
     * @param \Swagger\Client\Model\DownConverter $down_converter The downconverter JSON you want to post (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\DownConverterResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function downconverterPostWithHttpInfo($down_converter)
    {
        // verify the required parameter 'down_converter' is set
        if ($down_converter === null) {
            throw new \InvalidArgumentException('Missing the required parameter $down_converter when calling downconverterPost');
        }
        // parse inputs
        $resourcePath = "/downconverter";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // body params
        $_tempBody = null;
        if (isset($down_converter)) {
            $_tempBody = $down_converter;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DownConverterResponse',
                '/downconverter'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DownConverterResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DownConverterResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation hubrftGet
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\HubRFTListResponse
     */
    public function hubrftGet()
    {
        list($response) = $this->hubrftGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation hubrftGetWithHttpInfo
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\HubRFTListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function hubrftGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/hubrft";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\HubRFTListResponse',
                '/hubrft'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\HubRFTListResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\HubRFTListResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation hubrftHubrftIdDelete
     *
     * @param int $hubrft_id ID of the hubrft (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function hubrftHubrftIdDelete($hubrft_id)
    {
        list($response) = $this->hubrftHubrftIdDeleteWithHttpInfo($hubrft_id);
        return $response;
    }

    /**
     * Operation hubrftHubrftIdDeleteWithHttpInfo
     *
     * @param int $hubrft_id ID of the hubrft (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function hubrftHubrftIdDeleteWithHttpInfo($hubrft_id)
    {
        // verify the required parameter 'hubrft_id' is set
        if ($hubrft_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $hubrft_id when calling hubrftHubrftIdDelete');
        }
        // parse inputs
        $resourcePath = "/hubrft/{hubrftId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($hubrft_id !== null) {
            $resourcePath = str_replace(
                "{" . "hubrftId" . "}",
                $this->apiClient->getSerializer()->toPathValue($hubrft_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/hubrft/{hubrftId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation hubrftHubrftIdGet
     *
     * @param int $hubrft_id ID of the hubrft (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\HubRFTResponse
     */
    public function hubrftHubrftIdGet($hubrft_id)
    {
        list($response) = $this->hubrftHubrftIdGetWithHttpInfo($hubrft_id);
        return $response;
    }

    /**
     * Operation hubrftHubrftIdGetWithHttpInfo
     *
     * @param int $hubrft_id ID of the hubrft (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\HubRFTResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function hubrftHubrftIdGetWithHttpInfo($hubrft_id)
    {
        // verify the required parameter 'hubrft_id' is set
        if ($hubrft_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $hubrft_id when calling hubrftHubrftIdGet');
        }
        // parse inputs
        $resourcePath = "/hubrft/{hubrftId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($hubrft_id !== null) {
            $resourcePath = str_replace(
                "{" . "hubrftId" . "}",
                $this->apiClient->getSerializer()->toPathValue($hubrft_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\HubRFTResponse',
                '/hubrft/{hubrftId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\HubRFTResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\HubRFTResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation hubrftHubrftIdPatch
     *
     * @param int $hubrft_id ID of the hubrft (required)
     * @param \Swagger\Client\Model\HubRFT $hub_rft The hubrft JSON you want to update the hubrft with (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\HubRFTResponse
     */
    public function hubrftHubrftIdPatch($hubrft_id, $hub_rft)
    {
        list($response) = $this->hubrftHubrftIdPatchWithHttpInfo($hubrft_id, $hub_rft);
        return $response;
    }

    /**
     * Operation hubrftHubrftIdPatchWithHttpInfo
     *
     * @param int $hubrft_id ID of the hubrft (required)
     * @param \Swagger\Client\Model\HubRFT $hub_rft The hubrft JSON you want to update the hubrft with (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\HubRFTResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function hubrftHubrftIdPatchWithHttpInfo($hubrft_id, $hub_rft)
    {
        // verify the required parameter 'hubrft_id' is set
        if ($hubrft_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $hubrft_id when calling hubrftHubrftIdPatch');
        }
        // verify the required parameter 'hub_rft' is set
        if ($hub_rft === null) {
            throw new \InvalidArgumentException('Missing the required parameter $hub_rft when calling hubrftHubrftIdPatch');
        }
        // parse inputs
        $resourcePath = "/hubrft/{hubrftId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($hubrft_id !== null) {
            $resourcePath = str_replace(
                "{" . "hubrftId" . "}",
                $this->apiClient->getSerializer()->toPathValue($hubrft_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($hub_rft)) {
            $_tempBody = $hub_rft;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\HubRFTResponse',
                '/hubrft/{hubrftId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\HubRFTResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\HubRFTResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation hubrftPost
     *
     * @param \Swagger\Client\Model\HubRFT $hub_rft The hubrft JSON you want to post (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\HubRFTResponse
     */
    public function hubrftPost($hub_rft)
    {
        list($response) = $this->hubrftPostWithHttpInfo($hub_rft);
        return $response;
    }

    /**
     * Operation hubrftPostWithHttpInfo
     *
     * @param \Swagger\Client\Model\HubRFT $hub_rft The hubrft JSON you want to post (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\HubRFTResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function hubrftPostWithHttpInfo($hub_rft)
    {
        // verify the required parameter 'hub_rft' is set
        if ($hub_rft === null) {
            throw new \InvalidArgumentException('Missing the required parameter $hub_rft when calling hubrftPost');
        }
        // parse inputs
        $resourcePath = "/hubrft";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // body params
        $_tempBody = null;
        if (isset($hub_rft)) {
            $_tempBody = $hub_rft;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\HubRFTResponse',
                '/hubrft'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\HubRFTResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\HubRFTResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation inroutegroupGet
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InrouteGroupListResponse
     */
    public function inroutegroupGet()
    {
        list($response) = $this->inroutegroupGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation inroutegroupGetWithHttpInfo
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InrouteGroupListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function inroutegroupGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/inroutegroup";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InrouteGroupListResponse',
                '/inroutegroup'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InrouteGroupListResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InrouteGroupListResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation inroutegroupInroutegroupIdDelete
     *
     * @param int $inroutegroup_id ID of the inroutegroup (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function inroutegroupInroutegroupIdDelete($inroutegroup_id)
    {
        list($response) = $this->inroutegroupInroutegroupIdDeleteWithHttpInfo($inroutegroup_id);
        return $response;
    }

    /**
     * Operation inroutegroupInroutegroupIdDeleteWithHttpInfo
     *
     * @param int $inroutegroup_id ID of the inroutegroup (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function inroutegroupInroutegroupIdDeleteWithHttpInfo($inroutegroup_id)
    {
        // verify the required parameter 'inroutegroup_id' is set
        if ($inroutegroup_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $inroutegroup_id when calling inroutegroupInroutegroupIdDelete');
        }
        // parse inputs
        $resourcePath = "/inroutegroup/{inroutegroupId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($inroutegroup_id !== null) {
            $resourcePath = str_replace(
                "{" . "inroutegroupId" . "}",
                $this->apiClient->getSerializer()->toPathValue($inroutegroup_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/inroutegroup/{inroutegroupId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation inroutegroupInroutegroupIdGet
     *
     * @param int $inroutegroup_id ID of the inroutegroup (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InrouteGroupResponse
     */
    public function inroutegroupInroutegroupIdGet($inroutegroup_id)
    {
        list($response) = $this->inroutegroupInroutegroupIdGetWithHttpInfo($inroutegroup_id);
        return $response;
    }

    /**
     * Operation inroutegroupInroutegroupIdGetWithHttpInfo
     *
     * @param int $inroutegroup_id ID of the inroutegroup (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InrouteGroupResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function inroutegroupInroutegroupIdGetWithHttpInfo($inroutegroup_id)
    {
        // verify the required parameter 'inroutegroup_id' is set
        if ($inroutegroup_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $inroutegroup_id when calling inroutegroupInroutegroupIdGet');
        }
        // parse inputs
        $resourcePath = "/inroutegroup/{inroutegroupId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($inroutegroup_id !== null) {
            $resourcePath = str_replace(
                "{" . "inroutegroupId" . "}",
                $this->apiClient->getSerializer()->toPathValue($inroutegroup_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InrouteGroupResponse',
                '/inroutegroup/{inroutegroupId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InrouteGroupResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InrouteGroupResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation inroutegroupInroutegroupIdPatch
     *
     * @param int $inroutegroup_id ID of the inroutegroup (required)
     * @param \Swagger\Client\Model\InrouteGroup $inroute_group The inroutegroup JSON you want to update the inroutegroup with (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InrouteGroupResponse
     */
    public function inroutegroupInroutegroupIdPatch($inroutegroup_id, $inroute_group)
    {
        list($response) = $this->inroutegroupInroutegroupIdPatchWithHttpInfo($inroutegroup_id, $inroute_group);
        return $response;
    }

    /**
     * Operation inroutegroupInroutegroupIdPatchWithHttpInfo
     *
     * @param int $inroutegroup_id ID of the inroutegroup (required)
     * @param \Swagger\Client\Model\InrouteGroup $inroute_group The inroutegroup JSON you want to update the inroutegroup with (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InrouteGroupResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function inroutegroupInroutegroupIdPatchWithHttpInfo($inroutegroup_id, $inroute_group)
    {
        // verify the required parameter 'inroutegroup_id' is set
        if ($inroutegroup_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $inroutegroup_id when calling inroutegroupInroutegroupIdPatch');
        }
        // verify the required parameter 'inroute_group' is set
        if ($inroute_group === null) {
            throw new \InvalidArgumentException('Missing the required parameter $inroute_group when calling inroutegroupInroutegroupIdPatch');
        }
        // parse inputs
        $resourcePath = "/inroutegroup/{inroutegroupId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($inroutegroup_id !== null) {
            $resourcePath = str_replace(
                "{" . "inroutegroupId" . "}",
                $this->apiClient->getSerializer()->toPathValue($inroutegroup_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($inroute_group)) {
            $_tempBody = $inroute_group;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InrouteGroupResponse',
                '/inroutegroup/{inroutegroupId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InrouteGroupResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InrouteGroupResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation inroutegroupPost
     *
     * @param \Swagger\Client\Model\InrouteGroup $inroute_group The inroutegroup JSON you want to post (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InrouteGroupResponse
     */
    public function inroutegroupPost($inroute_group)
    {
        list($response) = $this->inroutegroupPostWithHttpInfo($inroute_group);
        return $response;
    }

    /**
     * Operation inroutegroupPostWithHttpInfo
     *
     * @param \Swagger\Client\Model\InrouteGroup $inroute_group The inroutegroup JSON you want to post (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InrouteGroupResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function inroutegroupPostWithHttpInfo($inroute_group)
    {
        // verify the required parameter 'inroute_group' is set
        if ($inroute_group === null) {
            throw new \InvalidArgumentException('Missing the required parameter $inroute_group when calling inroutegroupPost');
        }
        // parse inputs
        $resourcePath = "/inroutegroup";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // body params
        $_tempBody = null;
        if (isset($inroute_group)) {
            $_tempBody = $inroute_group;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InrouteGroupResponse',
                '/inroutegroup'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InrouteGroupResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InrouteGroupResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation linecardGet
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LinecardResponse
     */
    public function linecardGet()
    {
        list($response) = $this->linecardGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation linecardGetWithHttpInfo
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LinecardResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function linecardGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/linecard";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LinecardResponse',
                '/linecard'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LinecardResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LinecardResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation linecardLinecardIdDelete
     *
     * @param int $linecard_id ID of the linecard (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function linecardLinecardIdDelete($linecard_id)
    {
        list($response) = $this->linecardLinecardIdDeleteWithHttpInfo($linecard_id);
        return $response;
    }

    /**
     * Operation linecardLinecardIdDeleteWithHttpInfo
     *
     * @param int $linecard_id ID of the linecard (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function linecardLinecardIdDeleteWithHttpInfo($linecard_id)
    {
        // verify the required parameter 'linecard_id' is set
        if ($linecard_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $linecard_id when calling linecardLinecardIdDelete');
        }
        // parse inputs
        $resourcePath = "/linecard/{linecardId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($linecard_id !== null) {
            $resourcePath = str_replace(
                "{" . "linecardId" . "}",
                $this->apiClient->getSerializer()->toPathValue($linecard_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/linecard/{linecardId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation linecardLinecardIdGet
     *
     * @param int $linecard_id ID of the linecard (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LinecardResponse
     */
    public function linecardLinecardIdGet($linecard_id)
    {
        list($response) = $this->linecardLinecardIdGetWithHttpInfo($linecard_id);
        return $response;
    }

    /**
     * Operation linecardLinecardIdGetWithHttpInfo
     *
     * @param int $linecard_id ID of the linecard (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LinecardResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function linecardLinecardIdGetWithHttpInfo($linecard_id)
    {
        // verify the required parameter 'linecard_id' is set
        if ($linecard_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $linecard_id when calling linecardLinecardIdGet');
        }
        // parse inputs
        $resourcePath = "/linecard/{linecardId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($linecard_id !== null) {
            $resourcePath = str_replace(
                "{" . "linecardId" . "}",
                $this->apiClient->getSerializer()->toPathValue($linecard_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LinecardResponse',
                '/linecard/{linecardId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LinecardResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LinecardResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation linecardLinecardIdPatch
     *
     * @param int $linecard_id ID of the linecard (required)
     * @param \Swagger\Client\Model\Linecard $linecard The linecard JSON you want to update the linecard with (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LinecardResponse
     */
    public function linecardLinecardIdPatch($linecard_id, $linecard)
    {
        list($response) = $this->linecardLinecardIdPatchWithHttpInfo($linecard_id, $linecard);
        return $response;
    }

    /**
     * Operation linecardLinecardIdPatchWithHttpInfo
     *
     * @param int $linecard_id ID of the linecard (required)
     * @param \Swagger\Client\Model\Linecard $linecard The linecard JSON you want to update the linecard with (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LinecardResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function linecardLinecardIdPatchWithHttpInfo($linecard_id, $linecard)
    {
        // verify the required parameter 'linecard_id' is set
        if ($linecard_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $linecard_id when calling linecardLinecardIdPatch');
        }
        // verify the required parameter 'linecard' is set
        if ($linecard === null) {
            throw new \InvalidArgumentException('Missing the required parameter $linecard when calling linecardLinecardIdPatch');
        }
        // parse inputs
        $resourcePath = "/linecard/{linecardId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($linecard_id !== null) {
            $resourcePath = str_replace(
                "{" . "linecardId" . "}",
                $this->apiClient->getSerializer()->toPathValue($linecard_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($linecard)) {
            $_tempBody = $linecard;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LinecardResponse',
                '/linecard/{linecardId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LinecardResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LinecardResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation linecardPost
     *
     * @param \Swagger\Client\Model\Linecard $linecard The linecard JSON you want to post (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LinecardResponse
     */
    public function linecardPost($linecard)
    {
        list($response) = $this->linecardPostWithHttpInfo($linecard);
        return $response;
    }

    /**
     * Operation linecardPostWithHttpInfo
     *
     * @param \Swagger\Client\Model\Linecard $linecard The linecard JSON you want to post (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LinecardResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function linecardPostWithHttpInfo($linecard)
    {
        // verify the required parameter 'linecard' is set
        if ($linecard === null) {
            throw new \InvalidArgumentException('Missing the required parameter $linecard when calling linecardPost');
        }
        // parse inputs
        $resourcePath = "/linecard";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // body params
        $_tempBody = null;
        if (isset($linecard)) {
            $_tempBody = $linecard;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LinecardResponse',
                '/linecard'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LinecardResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LinecardResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation lnbGet
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LNBListResponse
     */
    public function lnbGet()
    {
        list($response) = $this->lnbGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation lnbGetWithHttpInfo
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LNBListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function lnbGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/lnb";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LNBListResponse',
                '/lnb'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LNBListResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LNBListResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation lnbLnbIdGet
     *
     * @param int $lnb_id ID of the lnb (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LNBResponse
     */
    public function lnbLnbIdGet($lnb_id)
    {
        list($response) = $this->lnbLnbIdGetWithHttpInfo($lnb_id);
        return $response;
    }

    /**
     * Operation lnbLnbIdGetWithHttpInfo
     *
     * @param int $lnb_id ID of the lnb (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LNBResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function lnbLnbIdGetWithHttpInfo($lnb_id)
    {
        // verify the required parameter 'lnb_id' is set
        if ($lnb_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $lnb_id when calling lnbLnbIdGet');
        }
        // parse inputs
        $resourcePath = "/lnb/{lnbId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($lnb_id !== null) {
            $resourcePath = str_replace(
                "{" . "lnbId" . "}",
                $this->apiClient->getSerializer()->toPathValue($lnb_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LNBResponse',
                '/lnb/{lnbId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LNBResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LNBResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation networkGet
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\NetworkListResponse
     */
    public function networkGet()
    {
        list($response) = $this->networkGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation networkGetWithHttpInfo
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\NetworkListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function networkGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/network";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\NetworkListResponse',
                '/network'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\NetworkListResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\NetworkListResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation networkNetworkIdDelete
     *
     * @param int $network_id ID of the network (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function networkNetworkIdDelete($network_id)
    {
        list($response) = $this->networkNetworkIdDeleteWithHttpInfo($network_id);
        return $response;
    }

    /**
     * Operation networkNetworkIdDeleteWithHttpInfo
     *
     * @param int $network_id ID of the network (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function networkNetworkIdDeleteWithHttpInfo($network_id)
    {
        // verify the required parameter 'network_id' is set
        if ($network_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $network_id when calling networkNetworkIdDelete');
        }
        // parse inputs
        $resourcePath = "/network/{networkId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                "{" . "networkId" . "}",
                $this->apiClient->getSerializer()->toPathValue($network_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/network/{networkId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation networkNetworkIdGet
     *
     * @param int $network_id ID of the network (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\NetworkResponse
     */
    public function networkNetworkIdGet($network_id)
    {
        list($response) = $this->networkNetworkIdGetWithHttpInfo($network_id);
        return $response;
    }

    /**
     * Operation networkNetworkIdGetWithHttpInfo
     *
     * @param int $network_id ID of the network (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\NetworkResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function networkNetworkIdGetWithHttpInfo($network_id)
    {
        // verify the required parameter 'network_id' is set
        if ($network_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $network_id when calling networkNetworkIdGet');
        }
        // parse inputs
        $resourcePath = "/network/{networkId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                "{" . "networkId" . "}",
                $this->apiClient->getSerializer()->toPathValue($network_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\NetworkResponse',
                '/network/{networkId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\NetworkResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\NetworkResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation networkNetworkIdPatch
     *
     * @param int $network_id ID of the network (required)
     * @param \Swagger\Client\Model\Network $network The network JSON you want to update the network with (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\NetworkResponse
     */
    public function networkNetworkIdPatch($network_id, $network)
    {
        list($response) = $this->networkNetworkIdPatchWithHttpInfo($network_id, $network);
        return $response;
    }

    /**
     * Operation networkNetworkIdPatchWithHttpInfo
     *
     * @param int $network_id ID of the network (required)
     * @param \Swagger\Client\Model\Network $network The network JSON you want to update the network with (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\NetworkResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function networkNetworkIdPatchWithHttpInfo($network_id, $network)
    {
        // verify the required parameter 'network_id' is set
        if ($network_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $network_id when calling networkNetworkIdPatch');
        }
        // verify the required parameter 'network' is set
        if ($network === null) {
            throw new \InvalidArgumentException('Missing the required parameter $network when calling networkNetworkIdPatch');
        }
        // parse inputs
        $resourcePath = "/network/{networkId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                "{" . "networkId" . "}",
                $this->apiClient->getSerializer()->toPathValue($network_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($network)) {
            $_tempBody = $network;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\NetworkResponse',
                '/network/{networkId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\NetworkResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\NetworkResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation networkPost
     *
     * @param \Swagger\Client\Model\Network $network The network JSON you want to post (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\NetworkResponse
     */
    public function networkPost($network)
    {
        list($response) = $this->networkPostWithHttpInfo($network);
        return $response;
    }

    /**
     * Operation networkPostWithHttpInfo
     *
     * @param \Swagger\Client\Model\Network $network The network JSON you want to post (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\NetworkResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function networkPostWithHttpInfo($network)
    {
        // verify the required parameter 'network' is set
        if ($network === null) {
            throw new \InvalidArgumentException('Missing the required parameter $network when calling networkPost');
        }
        // parse inputs
        $resourcePath = "/network";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // body params
        $_tempBody = null;
        if (isset($network)) {
            $_tempBody = $network;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\NetworkResponse',
                '/network'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\NetworkResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\NetworkResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation protocolprocessorGet
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ProtocolProcessorListResponse
     */
    public function protocolprocessorGet()
    {
        list($response) = $this->protocolprocessorGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation protocolprocessorGetWithHttpInfo
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ProtocolProcessorListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function protocolprocessorGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/protocolprocessor";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProtocolProcessorListResponse',
                '/protocolprocessor'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProtocolProcessorListResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProtocolProcessorListResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation protocolprocessorPost
     *
     * @param \Swagger\Client\Model\ProtocolProcessor $protocol_processor The protocolprocessor JSON you want to post (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ProtocolProcessorResponse
     */
    public function protocolprocessorPost($protocol_processor)
    {
        list($response) = $this->protocolprocessorPostWithHttpInfo($protocol_processor);
        return $response;
    }

    /**
     * Operation protocolprocessorPostWithHttpInfo
     *
     * @param \Swagger\Client\Model\ProtocolProcessor $protocol_processor The protocolprocessor JSON you want to post (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ProtocolProcessorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function protocolprocessorPostWithHttpInfo($protocol_processor)
    {
        // verify the required parameter 'protocol_processor' is set
        if ($protocol_processor === null) {
            throw new \InvalidArgumentException('Missing the required parameter $protocol_processor when calling protocolprocessorPost');
        }
        // parse inputs
        $resourcePath = "/protocolprocessor";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // body params
        $_tempBody = null;
        if (isset($protocol_processor)) {
            $_tempBody = $protocol_processor;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProtocolProcessorResponse',
                '/protocolprocessor'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProtocolProcessorResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProtocolProcessorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation protocolprocessorProtocolprocessorIdDelete
     *
     * @param int $protocolprocessor_id ID of the protocolprocessor (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function protocolprocessorProtocolprocessorIdDelete($protocolprocessor_id)
    {
        list($response) = $this->protocolprocessorProtocolprocessorIdDeleteWithHttpInfo($protocolprocessor_id);
        return $response;
    }

    /**
     * Operation protocolprocessorProtocolprocessorIdDeleteWithHttpInfo
     *
     * @param int $protocolprocessor_id ID of the protocolprocessor (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function protocolprocessorProtocolprocessorIdDeleteWithHttpInfo($protocolprocessor_id)
    {
        // verify the required parameter 'protocolprocessor_id' is set
        if ($protocolprocessor_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $protocolprocessor_id when calling protocolprocessorProtocolprocessorIdDelete');
        }
        // parse inputs
        $resourcePath = "/protocolprocessor/{protocolprocessorId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($protocolprocessor_id !== null) {
            $resourcePath = str_replace(
                "{" . "protocolprocessorId" . "}",
                $this->apiClient->getSerializer()->toPathValue($protocolprocessor_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/protocolprocessor/{protocolprocessorId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation protocolprocessorProtocolprocessorIdGet
     *
     * @param int $protocolprocessor_id ID of the protocolprocessor (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ProtocolProcessorResponse
     */
    public function protocolprocessorProtocolprocessorIdGet($protocolprocessor_id)
    {
        list($response) = $this->protocolprocessorProtocolprocessorIdGetWithHttpInfo($protocolprocessor_id);
        return $response;
    }

    /**
     * Operation protocolprocessorProtocolprocessorIdGetWithHttpInfo
     *
     * @param int $protocolprocessor_id ID of the protocolprocessor (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ProtocolProcessorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function protocolprocessorProtocolprocessorIdGetWithHttpInfo($protocolprocessor_id)
    {
        // verify the required parameter 'protocolprocessor_id' is set
        if ($protocolprocessor_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $protocolprocessor_id when calling protocolprocessorProtocolprocessorIdGet');
        }
        // parse inputs
        $resourcePath = "/protocolprocessor/{protocolprocessorId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($protocolprocessor_id !== null) {
            $resourcePath = str_replace(
                "{" . "protocolprocessorId" . "}",
                $this->apiClient->getSerializer()->toPathValue($protocolprocessor_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProtocolProcessorResponse',
                '/protocolprocessor/{protocolprocessorId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProtocolProcessorResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProtocolProcessorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation protocolprocessorProtocolprocessorIdPatch
     *
     * @param int $protocolprocessor_id ID of the protocolprocessor (required)
     * @param \Swagger\Client\Model\ProtocolProcessor $protocol_processor The protocolprocessor JSON you want to update the protocolprocessor with (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ProtocolProcessorResponse
     */
    public function protocolprocessorProtocolprocessorIdPatch($protocolprocessor_id, $protocol_processor)
    {
        list($response) = $this->protocolprocessorProtocolprocessorIdPatchWithHttpInfo($protocolprocessor_id, $protocol_processor);
        return $response;
    }

    /**
     * Operation protocolprocessorProtocolprocessorIdPatchWithHttpInfo
     *
     * @param int $protocolprocessor_id ID of the protocolprocessor (required)
     * @param \Swagger\Client\Model\ProtocolProcessor $protocol_processor The protocolprocessor JSON you want to update the protocolprocessor with (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ProtocolProcessorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function protocolprocessorProtocolprocessorIdPatchWithHttpInfo($protocolprocessor_id, $protocol_processor)
    {
        // verify the required parameter 'protocolprocessor_id' is set
        if ($protocolprocessor_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $protocolprocessor_id when calling protocolprocessorProtocolprocessorIdPatch');
        }
        // verify the required parameter 'protocol_processor' is set
        if ($protocol_processor === null) {
            throw new \InvalidArgumentException('Missing the required parameter $protocol_processor when calling protocolprocessorProtocolprocessorIdPatch');
        }
        // parse inputs
        $resourcePath = "/protocolprocessor/{protocolprocessorId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($protocolprocessor_id !== null) {
            $resourcePath = str_replace(
                "{" . "protocolprocessorId" . "}",
                $this->apiClient->getSerializer()->toPathValue($protocolprocessor_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($protocol_processor)) {
            $_tempBody = $protocol_processor;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProtocolProcessorResponse',
                '/protocolprocessor/{protocolprocessorId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProtocolProcessorResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProtocolProcessorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteGet
     *
     * @param int $id The ID of the remote you would like to match (optional)
     * @param int $parent_id The ParentID of the remotes you would like to match (optional)
     * @param int $network_id The NetworkID of the remotes you would like to match (optional)
     * @param int $inroute_group_id The InrouteGroupID of the remotes you would like to match (optional)
     * @param string $name The name or partial name of the remotes you would like to match (optional)
     * @param string $sn The serial number of the remote you would like to match (optional)
     * @param int $did The InrouteGroupID of the remotes you would like to match (optional)
     * @param string $model_type The model type of the remotes you would like to match (optional)
     * @param bool $is_scpc A boolean flag indicating whether to retrieve remotes using SCPC return (optional)
     * @param int $scpc_peer_id The InrouteGroupID of the remotes you would like to match (optional)
     * @param bool $active A boolean flag indicating whether to retrieve remotes that are active or inactive (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\RemoteListResponse
     */
    public function remoteGet($id = null, $parent_id = null, $network_id = null, $inroute_group_id = null, $name = null, $sn = null, $did = null, $model_type = null, $is_scpc = null, $scpc_peer_id = null, $active = null)
    {
        list($response) = $this->remoteGetWithHttpInfo($id, $parent_id, $network_id, $inroute_group_id, $name, $sn, $did, $model_type, $is_scpc, $scpc_peer_id, $active);
        return $response;
    }

    /**
     * Operation remoteGetWithHttpInfo
     *
     * @param int $id The ID of the remote you would like to match (optional)
     * @param int $parent_id The ParentID of the remotes you would like to match (optional)
     * @param int $network_id The NetworkID of the remotes you would like to match (optional)
     * @param int $inroute_group_id The InrouteGroupID of the remotes you would like to match (optional)
     * @param string $name The name or partial name of the remotes you would like to match (optional)
     * @param string $sn The serial number of the remote you would like to match (optional)
     * @param int $did The InrouteGroupID of the remotes you would like to match (optional)
     * @param string $model_type The model type of the remotes you would like to match (optional)
     * @param bool $is_scpc A boolean flag indicating whether to retrieve remotes using SCPC return (optional)
     * @param int $scpc_peer_id The InrouteGroupID of the remotes you would like to match (optional)
     * @param bool $active A boolean flag indicating whether to retrieve remotes that are active or inactive (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\RemoteListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteGetWithHttpInfo($id = null, $parent_id = null, $network_id = null, $inroute_group_id = null, $name = null, $sn = null, $did = null, $model_type = null, $is_scpc = null, $scpc_peer_id = null, $active = null)
    {
        // parse inputs
        $resourcePath = "/remote";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // query params
        if ($id !== null) {
            $queryParams['ID'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }
        // query params
        if ($parent_id !== null) {
            $queryParams['ParentID'] = $this->apiClient->getSerializer()->toQueryValue($parent_id);
        }
        // query params
        if ($network_id !== null) {
            $queryParams['NetworkID'] = $this->apiClient->getSerializer()->toQueryValue($network_id);
        }
        // query params
        if ($inroute_group_id !== null) {
            $queryParams['InrouteGroupID'] = $this->apiClient->getSerializer()->toQueryValue($inroute_group_id);
        }
        // query params
        if ($name !== null) {
            $queryParams['Name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($sn !== null) {
            $queryParams['SN'] = $this->apiClient->getSerializer()->toQueryValue($sn);
        }
        // query params
        if ($did !== null) {
            $queryParams['DID'] = $this->apiClient->getSerializer()->toQueryValue($did);
        }
        // query params
        if ($model_type !== null) {
            $queryParams['ModelType'] = $this->apiClient->getSerializer()->toQueryValue($model_type);
        }
        // query params
        if ($is_scpc !== null) {
            $queryParams['IsSCPC'] = $this->apiClient->getSerializer()->toQueryValue($is_scpc);
        }
        // query params
        if ($scpc_peer_id !== null) {
            $queryParams['SCPCPeerID'] = $this->apiClient->getSerializer()->toQueryValue($scpc_peer_id);
        }
        // query params
        if ($active !== null) {
            $queryParams['Active'] = $this->apiClient->getSerializer()->toQueryValue($active);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RemoteListResponse',
                '/remote'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RemoteListResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RemoteListResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remotePost
     *
     * @param \Swagger\Client\Model\Remote $remote The remote JSON you want to post (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\RemoteResponse
     */
    public function remotePost($remote)
    {
        list($response) = $this->remotePostWithHttpInfo($remote);
        return $response;
    }

    /**
     * Operation remotePostWithHttpInfo
     *
     * @param \Swagger\Client\Model\Remote $remote The remote JSON you want to post (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\RemoteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function remotePostWithHttpInfo($remote)
    {
        // verify the required parameter 'remote' is set
        if ($remote === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remote when calling remotePost');
        }
        // parse inputs
        $resourcePath = "/remote";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // body params
        $_tempBody = null;
        if (isset($remote)) {
            $_tempBody = $remote;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RemoteResponse',
                '/remote'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RemoteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RemoteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteRemoteIdAddRoamingInstancePost
     *
     * @param \Swagger\Client\Model\RoamingRemote $remote The roaming remote JSON you want to post (required)
     * @param int $remote_id The id of the remote to send the probe command to. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\RemoteResponse
     */
    public function remoteRemoteIdAddRoamingInstancePost($remote, $remote_id)
    {
        list($response) = $this->remoteRemoteIdAddRoamingInstancePostWithHttpInfo($remote, $remote_id);
        return $response;
    }

    /**
     * Operation remoteRemoteIdAddRoamingInstancePostWithHttpInfo
     *
     * @param \Swagger\Client\Model\RoamingRemote $remote The roaming remote JSON you want to post (required)
     * @param int $remote_id The id of the remote to send the probe command to. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\RemoteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteRemoteIdAddRoamingInstancePostWithHttpInfo($remote, $remote_id)
    {
        // verify the required parameter 'remote' is set
        if ($remote === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remote when calling remoteRemoteIdAddRoamingInstancePost');
        }
        // verify the required parameter 'remote_id' is set
        if ($remote_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remote_id when calling remoteRemoteIdAddRoamingInstancePost');
        }
        // parse inputs
        $resourcePath = "/remote/{remoteId}/add_roaming_instance";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($remote_id !== null) {
            $resourcePath = str_replace(
                "{" . "remoteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($remote_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($remote)) {
            $_tempBody = $remote;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RemoteResponse',
                '/remote/{remoteId}/add_roaming_instance'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RemoteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RemoteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteRemoteIdApplyChangesPatch
     *
     * @param int $remote_id The id of the remote to apply changes to. (required)
     * @param \Swagger\Client\Model\ApplyChangesRequest $parameters The settings JSON you want to use. Transport can be udp or tcp. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ApplyChangesResponse
     */
    public function remoteRemoteIdApplyChangesPatch($remote_id, $parameters)
    {
        list($response) = $this->remoteRemoteIdApplyChangesPatchWithHttpInfo($remote_id, $parameters);
        return $response;
    }

    /**
     * Operation remoteRemoteIdApplyChangesPatchWithHttpInfo
     *
     * @param int $remote_id The id of the remote to apply changes to. (required)
     * @param \Swagger\Client\Model\ApplyChangesRequest $parameters The settings JSON you want to use. Transport can be udp or tcp. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ApplyChangesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteRemoteIdApplyChangesPatchWithHttpInfo($remote_id, $parameters)
    {
        // verify the required parameter 'remote_id' is set
        if ($remote_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remote_id when calling remoteRemoteIdApplyChangesPatch');
        }
        // verify the required parameter 'parameters' is set
        if ($parameters === null) {
            throw new \InvalidArgumentException('Missing the required parameter $parameters when calling remoteRemoteIdApplyChangesPatch');
        }
        // parse inputs
        $resourcePath = "/remote/{remoteId}/apply_changes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($remote_id !== null) {
            $resourcePath = str_replace(
                "{" . "remoteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($remote_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($parameters)) {
            $_tempBody = $parameters;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ApplyChangesResponse',
                '/remote/{remoteId}/apply_changes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ApplyChangesResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ApplyChangesResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteRemoteIdDelete
     *
     * @param int $remote_id ID of the remote (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function remoteRemoteIdDelete($remote_id)
    {
        list($response) = $this->remoteRemoteIdDeleteWithHttpInfo($remote_id);
        return $response;
    }

    /**
     * Operation remoteRemoteIdDeleteWithHttpInfo
     *
     * @param int $remote_id ID of the remote (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteRemoteIdDeleteWithHttpInfo($remote_id)
    {
        // verify the required parameter 'remote_id' is set
        if ($remote_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remote_id when calling remoteRemoteIdDelete');
        }
        // parse inputs
        $resourcePath = "/remote/{remoteId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($remote_id !== null) {
            $resourcePath = str_replace(
                "{" . "remoteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($remote_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/remote/{remoteId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteRemoteIdGet
     *
     * @param int $remote_id ID of the remote (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\RemoteResponse
     */
    public function remoteRemoteIdGet($remote_id)
    {
        list($response) = $this->remoteRemoteIdGetWithHttpInfo($remote_id);
        return $response;
    }

    /**
     * Operation remoteRemoteIdGetWithHttpInfo
     *
     * @param int $remote_id ID of the remote (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\RemoteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteRemoteIdGetWithHttpInfo($remote_id)
    {
        // verify the required parameter 'remote_id' is set
        if ($remote_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remote_id when calling remoteRemoteIdGet');
        }
        // parse inputs
        $resourcePath = "/remote/{remoteId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($remote_id !== null) {
            $resourcePath = str_replace(
                "{" . "remoteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($remote_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RemoteResponse',
                '/remote/{remoteId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RemoteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RemoteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteRemoteIdPatch
     *
     * @param int $remote_id ID of the remote (required)
     * @param \Swagger\Client\Model\Remote $remote The remote JSON you want to update the remote with (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\RemoteResponse
     */
    public function remoteRemoteIdPatch($remote_id, $remote)
    {
        list($response) = $this->remoteRemoteIdPatchWithHttpInfo($remote_id, $remote);
        return $response;
    }

    /**
     * Operation remoteRemoteIdPatchWithHttpInfo
     *
     * @param int $remote_id ID of the remote (required)
     * @param \Swagger\Client\Model\Remote $remote The remote JSON you want to update the remote with (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\RemoteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteRemoteIdPatchWithHttpInfo($remote_id, $remote)
    {
        // verify the required parameter 'remote_id' is set
        if ($remote_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remote_id when calling remoteRemoteIdPatch');
        }
        // verify the required parameter 'remote' is set
        if ($remote === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remote when calling remoteRemoteIdPatch');
        }
        // parse inputs
        $resourcePath = "/remote/{remoteId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($remote_id !== null) {
            $resourcePath = str_replace(
                "{" . "remoteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($remote_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($remote)) {
            $_tempBody = $remote;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RemoteResponse',
                '/remote/{remoteId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RemoteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RemoteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteRemoteIdRawOptionsfileGet
     *
     * @param int $remote_id The id of the remote to retrieve the options file for. (required)
     * @param string $type The type of options file, HubSide or RmtSide. (optional)
     * @param string $version The version of options file, Active or Saved. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function remoteRemoteIdRawOptionsfileGet($remote_id, $type = null, $version = null)
    {
        list($response) = $this->remoteRemoteIdRawOptionsfileGetWithHttpInfo($remote_id, $type, $version);
        return $response;
    }

    /**
     * Operation remoteRemoteIdRawOptionsfileGetWithHttpInfo
     *
     * @param int $remote_id The id of the remote to retrieve the options file for. (required)
     * @param string $type The type of options file, HubSide or RmtSide. (optional)
     * @param string $version The version of options file, Active or Saved. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteRemoteIdRawOptionsfileGetWithHttpInfo($remote_id, $type = null, $version = null)
    {
        // verify the required parameter 'remote_id' is set
        if ($remote_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remote_id when calling remoteRemoteIdRawOptionsfileGet');
        }
        // parse inputs
        $resourcePath = "/remote/{remoteId}/raw_optionsfile";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // query params
        if ($type !== null) {
            $queryParams['type'] = $this->apiClient->getSerializer()->toQueryValue($type);
        }
        // query params
        if ($version !== null) {
            $queryParams['version'] = $this->apiClient->getSerializer()->toQueryValue($version);
        }
        // path params
        if ($remote_id !== null) {
            $resourcePath = str_replace(
                "{" . "remoteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($remote_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/remote/{remoteId}/raw_optionsfile'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteRemoteIdResetPatch
     *
     * @param int $remote_id The id of the remote to send the stop command to. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function remoteRemoteIdResetPatch($remote_id)
    {
        list($response) = $this->remoteRemoteIdResetPatchWithHttpInfo($remote_id);
        return $response;
    }

    /**
     * Operation remoteRemoteIdResetPatchWithHttpInfo
     *
     * @param int $remote_id The id of the remote to send the stop command to. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteRemoteIdResetPatchWithHttpInfo($remote_id)
    {
        // verify the required parameter 'remote_id' is set
        if ($remote_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remote_id when calling remoteRemoteIdResetPatch');
        }
        // parse inputs
        $resourcePath = "/remote/{remoteId}/reset";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($remote_id !== null) {
            $resourcePath = str_replace(
                "{" . "remoteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($remote_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/remote/{remoteId}/reset'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteRemoteIdStatusGet
     *
     * @param int $remote_id The id of the remote to check the status of. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\StatusResponse
     */
    public function remoteRemoteIdStatusGet($remote_id)
    {
        list($response) = $this->remoteRemoteIdStatusGetWithHttpInfo($remote_id);
        return $response;
    }

    /**
     * Operation remoteRemoteIdStatusGetWithHttpInfo
     *
     * @param int $remote_id The id of the remote to check the status of. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\StatusResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteRemoteIdStatusGetWithHttpInfo($remote_id)
    {
        // verify the required parameter 'remote_id' is set
        if ($remote_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remote_id when calling remoteRemoteIdStatusGet');
        }
        // parse inputs
        $resourcePath = "/remote/{remoteId}/status";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($remote_id !== null) {
            $resourcePath = str_replace(
                "{" . "remoteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($remote_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\StatusResponse',
                '/remote/{remoteId}/status'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\StatusResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\StatusResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteRemoteIdStopCwPnPatch
     *
     * @param int $remote_id The id of the remote to send the stop command to. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function remoteRemoteIdStopCwPnPatch($remote_id)
    {
        list($response) = $this->remoteRemoteIdStopCwPnPatchWithHttpInfo($remote_id);
        return $response;
    }

    /**
     * Operation remoteRemoteIdStopCwPnPatchWithHttpInfo
     *
     * @param int $remote_id The id of the remote to send the stop command to. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteRemoteIdStopCwPnPatchWithHttpInfo($remote_id)
    {
        // verify the required parameter 'remote_id' is set
        if ($remote_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remote_id when calling remoteRemoteIdStopCwPnPatch');
        }
        // parse inputs
        $resourcePath = "/remote/{remoteId}/stop_cw_pn";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($remote_id !== null) {
            $resourcePath = str_replace(
                "{" . "remoteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($remote_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/remote/{remoteId}/stop_cw_pn'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteRemoteIdTxCwPatch
     *
     * @param int $remote_id The id of the remote to send the probe command to. (required)
     * @param \Swagger\Client\Model\CW $cw The CW settings JSON you want to use for the command. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function remoteRemoteIdTxCwPatch($remote_id, $cw)
    {
        list($response) = $this->remoteRemoteIdTxCwPatchWithHttpInfo($remote_id, $cw);
        return $response;
    }

    /**
     * Operation remoteRemoteIdTxCwPatchWithHttpInfo
     *
     * @param int $remote_id The id of the remote to send the probe command to. (required)
     * @param \Swagger\Client\Model\CW $cw The CW settings JSON you want to use for the command. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteRemoteIdTxCwPatchWithHttpInfo($remote_id, $cw)
    {
        // verify the required parameter 'remote_id' is set
        if ($remote_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remote_id when calling remoteRemoteIdTxCwPatch');
        }
        // verify the required parameter 'cw' is set
        if ($cw === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cw when calling remoteRemoteIdTxCwPatch');
        }
        // parse inputs
        $resourcePath = "/remote/{remoteId}/tx_cw";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($remote_id !== null) {
            $resourcePath = str_replace(
                "{" . "remoteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($remote_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($cw)) {
            $_tempBody = $cw;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/remote/{remoteId}/tx_cw'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteRemoteIdTxPnPatch
     *
     * @param int $remote_id The id of the remote to send the probe command to. (required)
     * @param \Swagger\Client\Model\PN $pn The PN settings JSON you want to use for the command.  Type Modulation values can be 8PSK, QPSK or BPSK. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function remoteRemoteIdTxPnPatch($remote_id, $pn)
    {
        list($response) = $this->remoteRemoteIdTxPnPatchWithHttpInfo($remote_id, $pn);
        return $response;
    }

    /**
     * Operation remoteRemoteIdTxPnPatchWithHttpInfo
     *
     * @param int $remote_id The id of the remote to send the probe command to. (required)
     * @param \Swagger\Client\Model\PN $pn The PN settings JSON you want to use for the command.  Type Modulation values can be 8PSK, QPSK or BPSK. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteRemoteIdTxPnPatchWithHttpInfo($remote_id, $pn)
    {
        // verify the required parameter 'remote_id' is set
        if ($remote_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remote_id when calling remoteRemoteIdTxPnPatch');
        }
        // verify the required parameter 'pn' is set
        if ($pn === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pn when calling remoteRemoteIdTxPnPatch');
        }
        // parse inputs
        $resourcePath = "/remote/{remoteId}/tx_pn";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($remote_id !== null) {
            $resourcePath = str_replace(
                "{" . "remoteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($remote_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($pn)) {
            $_tempBody = $pn;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/remote/{remoteId}/tx_pn'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteservicegroupGet
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\RemoteServiceGroupListResponse
     */
    public function remoteservicegroupGet()
    {
        list($response) = $this->remoteservicegroupGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation remoteservicegroupGetWithHttpInfo
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\RemoteServiceGroupListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteservicegroupGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/remoteservicegroup";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RemoteServiceGroupListResponse',
                '/remoteservicegroup'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RemoteServiceGroupListResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RemoteServiceGroupListResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteservicegroupRemoteservicegroupIdGet
     *
     * @param int $remoteservicegroup_id ID of the remoteservicegroup (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\RemoteServiceGroupResponse
     */
    public function remoteservicegroupRemoteservicegroupIdGet($remoteservicegroup_id)
    {
        list($response) = $this->remoteservicegroupRemoteservicegroupIdGetWithHttpInfo($remoteservicegroup_id);
        return $response;
    }

    /**
     * Operation remoteservicegroupRemoteservicegroupIdGetWithHttpInfo
     *
     * @param int $remoteservicegroup_id ID of the remoteservicegroup (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\RemoteServiceGroupResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteservicegroupRemoteservicegroupIdGetWithHttpInfo($remoteservicegroup_id)
    {
        // verify the required parameter 'remoteservicegroup_id' is set
        if ($remoteservicegroup_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remoteservicegroup_id when calling remoteservicegroupRemoteservicegroupIdGet');
        }
        // parse inputs
        $resourcePath = "/remoteservicegroup/{remoteservicegroupId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($remoteservicegroup_id !== null) {
            $resourcePath = str_replace(
                "{" . "remoteservicegroupId" . "}",
                $this->apiClient->getSerializer()->toPathValue($remoteservicegroup_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RemoteServiceGroupResponse',
                '/remoteservicegroup/{remoteservicegroupId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RemoteServiceGroupResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RemoteServiceGroupResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteservicegroupRemoteservicegroupIdPatch
     *
     * @param int $remoteservicegroup_id ID of the remoteservicegroup (required)
     * @param \Swagger\Client\Model\RemoteServiceGroup $remote_service_group The remoteservicegroup JSON you want to update the remoteservicegroup with (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\RemoteServiceGroupResponse
     */
    public function remoteservicegroupRemoteservicegroupIdPatch($remoteservicegroup_id, $remote_service_group)
    {
        list($response) = $this->remoteservicegroupRemoteservicegroupIdPatchWithHttpInfo($remoteservicegroup_id, $remote_service_group);
        return $response;
    }

    /**
     * Operation remoteservicegroupRemoteservicegroupIdPatchWithHttpInfo
     *
     * @param int $remoteservicegroup_id ID of the remoteservicegroup (required)
     * @param \Swagger\Client\Model\RemoteServiceGroup $remote_service_group The remoteservicegroup JSON you want to update the remoteservicegroup with (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\RemoteServiceGroupResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteservicegroupRemoteservicegroupIdPatchWithHttpInfo($remoteservicegroup_id, $remote_service_group)
    {
        // verify the required parameter 'remoteservicegroup_id' is set
        if ($remoteservicegroup_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remoteservicegroup_id when calling remoteservicegroupRemoteservicegroupIdPatch');
        }
        // verify the required parameter 'remote_service_group' is set
        if ($remote_service_group === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remote_service_group when calling remoteservicegroupRemoteservicegroupIdPatch');
        }
        // parse inputs
        $resourcePath = "/remoteservicegroup/{remoteservicegroupId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($remoteservicegroup_id !== null) {
            $resourcePath = str_replace(
                "{" . "remoteservicegroupId" . "}",
                $this->apiClient->getSerializer()->toPathValue($remoteservicegroup_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($remote_service_group)) {
            $_tempBody = $remote_service_group;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RemoteServiceGroupResponse',
                '/remoteservicegroup/{remoteservicegroupId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RemoteServiceGroupResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RemoteServiceGroupResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation spacecraftGet
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SpacecraftListResponse
     */
    public function spacecraftGet()
    {
        list($response) = $this->spacecraftGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation spacecraftGetWithHttpInfo
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SpacecraftListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function spacecraftGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/spacecraft";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SpacecraftListResponse',
                '/spacecraft'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SpacecraftListResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SpacecraftListResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation spacecraftPost
     *
     * @param \Swagger\Client\Model\Spacecraft $spacecraft The spacecraft JSON you want to post (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SpacecraftResponse
     */
    public function spacecraftPost($spacecraft)
    {
        list($response) = $this->spacecraftPostWithHttpInfo($spacecraft);
        return $response;
    }

    /**
     * Operation spacecraftPostWithHttpInfo
     *
     * @param \Swagger\Client\Model\Spacecraft $spacecraft The spacecraft JSON you want to post (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SpacecraftResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function spacecraftPostWithHttpInfo($spacecraft)
    {
        // verify the required parameter 'spacecraft' is set
        if ($spacecraft === null) {
            throw new \InvalidArgumentException('Missing the required parameter $spacecraft when calling spacecraftPost');
        }
        // parse inputs
        $resourcePath = "/spacecraft";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // body params
        $_tempBody = null;
        if (isset($spacecraft)) {
            $_tempBody = $spacecraft;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SpacecraftResponse',
                '/spacecraft'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SpacecraftResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SpacecraftResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation spacecraftSpacecraftIdDelete
     *
     * @param int $spacecraft_id ID of the spacecraft (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function spacecraftSpacecraftIdDelete($spacecraft_id)
    {
        list($response) = $this->spacecraftSpacecraftIdDeleteWithHttpInfo($spacecraft_id);
        return $response;
    }

    /**
     * Operation spacecraftSpacecraftIdDeleteWithHttpInfo
     *
     * @param int $spacecraft_id ID of the spacecraft (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function spacecraftSpacecraftIdDeleteWithHttpInfo($spacecraft_id)
    {
        // verify the required parameter 'spacecraft_id' is set
        if ($spacecraft_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $spacecraft_id when calling spacecraftSpacecraftIdDelete');
        }
        // parse inputs
        $resourcePath = "/spacecraft/{spacecraftId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($spacecraft_id !== null) {
            $resourcePath = str_replace(
                "{" . "spacecraftId" . "}",
                $this->apiClient->getSerializer()->toPathValue($spacecraft_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/spacecraft/{spacecraftId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation spacecraftSpacecraftIdGet
     *
     * @param int $spacecraft_id ID of the spacecraft (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SpacecraftResponse
     */
    public function spacecraftSpacecraftIdGet($spacecraft_id)
    {
        list($response) = $this->spacecraftSpacecraftIdGetWithHttpInfo($spacecraft_id);
        return $response;
    }

    /**
     * Operation spacecraftSpacecraftIdGetWithHttpInfo
     *
     * @param int $spacecraft_id ID of the spacecraft (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SpacecraftResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function spacecraftSpacecraftIdGetWithHttpInfo($spacecraft_id)
    {
        // verify the required parameter 'spacecraft_id' is set
        if ($spacecraft_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $spacecraft_id when calling spacecraftSpacecraftIdGet');
        }
        // parse inputs
        $resourcePath = "/spacecraft/{spacecraftId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($spacecraft_id !== null) {
            $resourcePath = str_replace(
                "{" . "spacecraftId" . "}",
                $this->apiClient->getSerializer()->toPathValue($spacecraft_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SpacecraftResponse',
                '/spacecraft/{spacecraftId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SpacecraftResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SpacecraftResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation spacecraftSpacecraftIdPatch
     *
     * @param int $spacecraft_id ID of the spacecraft (required)
     * @param \Swagger\Client\Model\Spacecraft $spacecraft The spacecraft JSON you want to update the spacecraft with (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SpacecraftResponse
     */
    public function spacecraftSpacecraftIdPatch($spacecraft_id, $spacecraft)
    {
        list($response) = $this->spacecraftSpacecraftIdPatchWithHttpInfo($spacecraft_id, $spacecraft);
        return $response;
    }

    /**
     * Operation spacecraftSpacecraftIdPatchWithHttpInfo
     *
     * @param int $spacecraft_id ID of the spacecraft (required)
     * @param \Swagger\Client\Model\Spacecraft $spacecraft The spacecraft JSON you want to update the spacecraft with (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SpacecraftResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function spacecraftSpacecraftIdPatchWithHttpInfo($spacecraft_id, $spacecraft)
    {
        // verify the required parameter 'spacecraft_id' is set
        if ($spacecraft_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $spacecraft_id when calling spacecraftSpacecraftIdPatch');
        }
        // verify the required parameter 'spacecraft' is set
        if ($spacecraft === null) {
            throw new \InvalidArgumentException('Missing the required parameter $spacecraft when calling spacecraftSpacecraftIdPatch');
        }
        // parse inputs
        $resourcePath = "/spacecraft/{spacecraftId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($spacecraft_id !== null) {
            $resourcePath = str_replace(
                "{" . "spacecraftId" . "}",
                $this->apiClient->getSerializer()->toPathValue($spacecraft_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($spacecraft)) {
            $_tempBody = $spacecraft;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SpacecraftResponse',
                '/spacecraft/{spacecraftId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SpacecraftResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SpacecraftResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teleportGet
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\TeleportListResponse
     */
    public function teleportGet()
    {
        list($response) = $this->teleportGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation teleportGetWithHttpInfo
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\TeleportListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function teleportGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/teleport";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeleportListResponse',
                '/teleport'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeleportListResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeleportListResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teleportPost
     *
     * @param \Swagger\Client\Model\Teleport $teleport The teleport JSON you want to post (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\TeleportResponse
     */
    public function teleportPost($teleport)
    {
        list($response) = $this->teleportPostWithHttpInfo($teleport);
        return $response;
    }

    /**
     * Operation teleportPostWithHttpInfo
     *
     * @param \Swagger\Client\Model\Teleport $teleport The teleport JSON you want to post (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\TeleportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function teleportPostWithHttpInfo($teleport)
    {
        // verify the required parameter 'teleport' is set
        if ($teleport === null) {
            throw new \InvalidArgumentException('Missing the required parameter $teleport when calling teleportPost');
        }
        // parse inputs
        $resourcePath = "/teleport";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // body params
        $_tempBody = null;
        if (isset($teleport)) {
            $_tempBody = $teleport;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeleportResponse',
                '/teleport'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeleportResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeleportResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teleportTeleportIdDelete
     *
     * @param int $teleport_id ID of the teleport (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function teleportTeleportIdDelete($teleport_id)
    {
        list($response) = $this->teleportTeleportIdDeleteWithHttpInfo($teleport_id);
        return $response;
    }

    /**
     * Operation teleportTeleportIdDeleteWithHttpInfo
     *
     * @param int $teleport_id ID of the teleport (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function teleportTeleportIdDeleteWithHttpInfo($teleport_id)
    {
        // verify the required parameter 'teleport_id' is set
        if ($teleport_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $teleport_id when calling teleportTeleportIdDelete');
        }
        // parse inputs
        $resourcePath = "/teleport/{teleportId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($teleport_id !== null) {
            $resourcePath = str_replace(
                "{" . "teleportId" . "}",
                $this->apiClient->getSerializer()->toPathValue($teleport_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/teleport/{teleportId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teleportTeleportIdGet
     *
     * @param int $teleport_id ID of the teleport (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\TeleportResponse
     */
    public function teleportTeleportIdGet($teleport_id)
    {
        list($response) = $this->teleportTeleportIdGetWithHttpInfo($teleport_id);
        return $response;
    }

    /**
     * Operation teleportTeleportIdGetWithHttpInfo
     *
     * @param int $teleport_id ID of the teleport (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\TeleportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function teleportTeleportIdGetWithHttpInfo($teleport_id)
    {
        // verify the required parameter 'teleport_id' is set
        if ($teleport_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $teleport_id when calling teleportTeleportIdGet');
        }
        // parse inputs
        $resourcePath = "/teleport/{teleportId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($teleport_id !== null) {
            $resourcePath = str_replace(
                "{" . "teleportId" . "}",
                $this->apiClient->getSerializer()->toPathValue($teleport_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeleportResponse',
                '/teleport/{teleportId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeleportResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeleportResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation teleportTeleportIdPatch
     *
     * @param int $teleport_id ID of the teleport (required)
     * @param \Swagger\Client\Model\Teleport $teleport The teleport JSON you want to update the teleport with (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\TeleportResponse
     */
    public function teleportTeleportIdPatch($teleport_id, $teleport)
    {
        list($response) = $this->teleportTeleportIdPatchWithHttpInfo($teleport_id, $teleport);
        return $response;
    }

    /**
     * Operation teleportTeleportIdPatchWithHttpInfo
     *
     * @param int $teleport_id ID of the teleport (required)
     * @param \Swagger\Client\Model\Teleport $teleport The teleport JSON you want to update the teleport with (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\TeleportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function teleportTeleportIdPatchWithHttpInfo($teleport_id, $teleport)
    {
        // verify the required parameter 'teleport_id' is set
        if ($teleport_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $teleport_id when calling teleportTeleportIdPatch');
        }
        // verify the required parameter 'teleport' is set
        if ($teleport === null) {
            throw new \InvalidArgumentException('Missing the required parameter $teleport when calling teleportTeleportIdPatch');
        }
        // parse inputs
        $resourcePath = "/teleport/{teleportId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($teleport_id !== null) {
            $resourcePath = str_replace(
                "{" . "teleportId" . "}",
                $this->apiClient->getSerializer()->toPathValue($teleport_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($teleport)) {
            $_tempBody = $teleport;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TeleportResponse',
                '/teleport/{teleportId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TeleportResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TeleportResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation upconverterGet
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\UpConverterListResponse
     */
    public function upconverterGet()
    {
        list($response) = $this->upconverterGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation upconverterGetWithHttpInfo
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\UpConverterListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function upconverterGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/upconverter";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\UpConverterListResponse',
                '/upconverter'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\UpConverterListResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\UpConverterListResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation upconverterPost
     *
     * @param \Swagger\Client\Model\UpConverter $up_converter The upconverter JSON you want to post (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\UpConverterResponse
     */
    public function upconverterPost($up_converter)
    {
        list($response) = $this->upconverterPostWithHttpInfo($up_converter);
        return $response;
    }

    /**
     * Operation upconverterPostWithHttpInfo
     *
     * @param \Swagger\Client\Model\UpConverter $up_converter The upconverter JSON you want to post (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\UpConverterResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function upconverterPostWithHttpInfo($up_converter)
    {
        // verify the required parameter 'up_converter' is set
        if ($up_converter === null) {
            throw new \InvalidArgumentException('Missing the required parameter $up_converter when calling upconverterPost');
        }
        // parse inputs
        $resourcePath = "/upconverter";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // body params
        $_tempBody = null;
        if (isset($up_converter)) {
            $_tempBody = $up_converter;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\UpConverterResponse',
                '/upconverter'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\UpConverterResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\UpConverterResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation upconverterUpconverterIdDelete
     *
     * @param int $upconverter_id ID of the upconverter (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function upconverterUpconverterIdDelete($upconverter_id)
    {
        list($response) = $this->upconverterUpconverterIdDeleteWithHttpInfo($upconverter_id);
        return $response;
    }

    /**
     * Operation upconverterUpconverterIdDeleteWithHttpInfo
     *
     * @param int $upconverter_id ID of the upconverter (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function upconverterUpconverterIdDeleteWithHttpInfo($upconverter_id)
    {
        // verify the required parameter 'upconverter_id' is set
        if ($upconverter_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $upconverter_id when calling upconverterUpconverterIdDelete');
        }
        // parse inputs
        $resourcePath = "/upconverter/{upconverterId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($upconverter_id !== null) {
            $resourcePath = str_replace(
                "{" . "upconverterId" . "}",
                $this->apiClient->getSerializer()->toPathValue($upconverter_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/upconverter/{upconverterId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation upconverterUpconverterIdGet
     *
     * @param int $upconverter_id ID of the upconverter (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\UpConverterResponse
     */
    public function upconverterUpconverterIdGet($upconverter_id)
    {
        list($response) = $this->upconverterUpconverterIdGetWithHttpInfo($upconverter_id);
        return $response;
    }

    /**
     * Operation upconverterUpconverterIdGetWithHttpInfo
     *
     * @param int $upconverter_id ID of the upconverter (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\UpConverterResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function upconverterUpconverterIdGetWithHttpInfo($upconverter_id)
    {
        // verify the required parameter 'upconverter_id' is set
        if ($upconverter_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $upconverter_id when calling upconverterUpconverterIdGet');
        }
        // parse inputs
        $resourcePath = "/upconverter/{upconverterId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($upconverter_id !== null) {
            $resourcePath = str_replace(
                "{" . "upconverterId" . "}",
                $this->apiClient->getSerializer()->toPathValue($upconverter_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\UpConverterResponse',
                '/upconverter/{upconverterId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\UpConverterResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\UpConverterResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation upconverterUpconverterIdPatch
     *
     * @param int $upconverter_id ID of the upconverter (required)
     * @param \Swagger\Client\Model\UpConverter $up_converter The upconverter JSON you want to update the upconverter with (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\UpConverterResponse
     */
    public function upconverterUpconverterIdPatch($upconverter_id, $up_converter)
    {
        list($response) = $this->upconverterUpconverterIdPatchWithHttpInfo($upconverter_id, $up_converter);
        return $response;
    }

    /**
     * Operation upconverterUpconverterIdPatchWithHttpInfo
     *
     * @param int $upconverter_id ID of the upconverter (required)
     * @param \Swagger\Client\Model\UpConverter $up_converter The upconverter JSON you want to update the upconverter with (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\UpConverterResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function upconverterUpconverterIdPatchWithHttpInfo($upconverter_id, $up_converter)
    {
        // verify the required parameter 'upconverter_id' is set
        if ($upconverter_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $upconverter_id when calling upconverterUpconverterIdPatch');
        }
        // verify the required parameter 'up_converter' is set
        if ($up_converter === null) {
            throw new \InvalidArgumentException('Missing the required parameter $up_converter when calling upconverterUpconverterIdPatch');
        }
        // parse inputs
        $resourcePath = "/upconverter/{upconverterId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($upconverter_id !== null) {
            $resourcePath = str_replace(
                "{" . "upconverterId" . "}",
                $this->apiClient->getSerializer()->toPathValue($upconverter_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($up_converter)) {
            $_tempBody = $up_converter;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\UpConverterResponse',
                '/upconverter/{upconverterId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\UpConverterResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\UpConverterResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userGet
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\UserListResponse
     */
    public function userGet()
    {
        list($response) = $this->userGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation userGetWithHttpInfo
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\UserListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/user";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\UserListResponse',
                '/user'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\UserListResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\UserListResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userPost
     *
     * @param \Swagger\Client\Model\User $user The user JSON you want to post (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\UserResponse
     */
    public function userPost($user)
    {
        list($response) = $this->userPostWithHttpInfo($user);
        return $response;
    }

    /**
     * Operation userPostWithHttpInfo
     *
     * @param \Swagger\Client\Model\User $user The user JSON you want to post (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\UserResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userPostWithHttpInfo($user)
    {
        // verify the required parameter 'user' is set
        if ($user === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user when calling userPost');
        }
        // parse inputs
        $resourcePath = "/user";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // body params
        $_tempBody = null;
        if (isset($user)) {
            $_tempBody = $user;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\UserResponse',
                '/user'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\UserResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\UserResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userUserIdGet
     *
     * @param int $user_id ID of the user (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\UserResponse
     */
    public function userUserIdGet($user_id)
    {
        list($response) = $this->userUserIdGetWithHttpInfo($user_id);
        return $response;
    }

    /**
     * Operation userUserIdGetWithHttpInfo
     *
     * @param int $user_id ID of the user (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\UserResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userUserIdGetWithHttpInfo($user_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling userUserIdGet');
        }
        // parse inputs
        $resourcePath = "/user/{userId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "userId" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\UserResponse',
                '/user/{userId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\UserResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\UserResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userUserIdPatch
     *
     * @param int $user_id ID of the user (required)
     * @param \Swagger\Client\Model\User $user The user JSON you want to update the user with (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\UserResponse
     */
    public function userUserIdPatch($user_id, $user)
    {
        list($response) = $this->userUserIdPatchWithHttpInfo($user_id, $user);
        return $response;
    }

    /**
     * Operation userUserIdPatchWithHttpInfo
     *
     * @param int $user_id ID of the user (required)
     * @param \Swagger\Client\Model\User $user The user JSON you want to update the user with (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\UserResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userUserIdPatchWithHttpInfo($user_id, $user)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling userUserIdPatch');
        }
        // verify the required parameter 'user' is set
        if ($user === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user when calling userUserIdPatch');
        }
        // parse inputs
        $resourcePath = "/user/{userId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/xml']);

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "userId" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($user)) {
            $_tempBody = $user;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Session');
        if (strlen($apiKey) !== 0) {
            $headerParams['Session'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\UserResponse',
                '/user/{userId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\UserResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\UserResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
